
# Dice Flag Taxation

### [Article 1]

```catala
scope ComputeTaxableFairyDustTradeIncomes:
    exception
    definition quantity_of_pips_deducted_for_mortgage_interest under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 31 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForDarkWebMonitoringProfits with { --flag: flag }.out

scope ComputeTaxableDiceRollForSecureCodeReviewProfits:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals dice_roll_for_tax_exempt_alien_income - dice_thrown_for_taxable_fringe_benefits

scope ComputeNYCDiceRollForBlockchainSecurity:
    exception
    definition dice_thrown_for_disaster_losses under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 9 }).val) }.out
    consequence equals output of ComputeHomeOfficeDeduction with { --flag: flag }.out

scope ComputeTaxableDiceRollForEndpointSecurityIncome:
    definition number_of_dice_used_for_tax_credits equals output of ComputeNYCNetworkSecurityProfits with { --flag: flag }.out

scope ComputeDiceRollForBiometricSecurityConsultingEarnings:
    definition out equals dice_result_for_charitable_contributions - dice_roll_for_social_security_benefits

declaration scope ComputeTaxableCardGameProfits:
    input flag content list of C
    context number_of_dice_thrown_for_taxable_ogre_consulting_fees content integer
    context dice_roll_for_taxable_wizard_consulting_fees content integer
    output out content integer

scope ComputeNYCDiceRollForBlockchainSecurity:
    definition dice_thrown_for_disaster_losses equals output of ComputeStudentLoanInterest with { --flag: flag }.out

scope ComputeGamblingDebtInterest:
    definition tax equals if
    dice_roll_for_tax_exempt_time_machine_rental_income = quantity_of_pips_deducted_for_mortgage_interest
    then $0
    else $1000

scope ComputeTaxableOgreConsultingFees:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 30 }).val) }.out
    consequence equals number_of_dice_thrown_for_military_service_deductions + quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales

scope ComputeDiceForIoTSecurityConsultingNYC:
    definition largest_dice_roll_for_taxable_superhero_salaries equals dice_roll_for_tax_exempt_mermaid_song_royalties - largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings

scope ComputeTaxableDiceRollForHackerBountyRewards:
    exception
    definition dice_roll_for_tax_exempt_fairy_dust_trade_incomes under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 23 }).val) }.out
    consequence equals quantity_of_pips_claimed + quantity_of_pips_for_taxable_gifts

scope ComputeHSAContributions:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 23 }).val) }.out
    consequence equals largest_dice_roll_for_depletion_deduction + number_of_dice_used_for_tax_exempt_sorcerer_spell_casting_fees

declaration scope ComputeTaxableDiceRollForOnlinePokerIncome:
    input flag content list of C
    context number_of_dice_thrown_for_taxable_dragonslaying_earnings content integer
    context largest_dice_amount_exempted content integer
    output out content integer

scope ComputeDependentCareCredit:
    exception
    definition number_of_dice_for_health_savings_account_contributions under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 29 }).val) }.out
    consequence equals 280909

scope ComputeEarnedIncomeCredit:
    definition number_of_exemptions_rolled equals output of ComputeDiceForNYCSecureSoftwareDevelopment with { --flag: flag }.out

scope ComputeDiceRollForPenetrationTestingEarnings:
    definition out equals dice_roll_for_business_expenses + dice_roll_for_dice_related_business_expenses

scope ComputeTaxableDiceRollForCriticalInfrastructureProtectionProfits:
    definition out equals output of Dicer2 with { --flag: flag --index: 5 }.val

scope ComputeTaxableOgreConsultingFees:
    exception
    definition number_of_dice_thrown_for_military_service_deductions under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 12 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForDarkWebMonitoringProfits with { --flag: flag }.out

scope ComputeSelfEmploymentIncome:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 19 }.val

scope ComputeTaxableNymphLandscapingProfits:
    definition out equals output of Dicer2 with { --flag: flag --index: 24 }.val

scope ComputeNYCDiceRollForBlockchainSecurity:
    definition out equals quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues - dice_thrown_for_disaster_losses

scope ComputeNYCDiceRollForCloudSecurity:
    definition number_of_dice_for_health_savings_account_contributions equals output of ComputeStudentLoanInterest with { --flag: flag }.out

scope ComputeTaxExemptMermaidSongRoyalties:
    exception
    definition dice_roll_for_tax_exempt_fairy_dust_trade_incomes under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 11 }).val) }.out
    consequence equals output of ComputeTaxExemptInterest with { --flag: flag }.out

scope ComputeTaxableFengShuiDragonAdviceFees:
    definition out equals output of Dicer2 with { --flag: flag --index: 20 }.val

scope ComputeTaxableGremlinTechnologySales:
    definition dice_roll_for_tax_prep_fees equals output of ComputeDiceRollForIndustrialControlSystemSecurityIncome with { --flag: flag }.out

scope ComputeTaxExemptInterest:
    definition dice_roll_for_business_expenses equals output of ComputeTaxableNymphLandscapingProfits with { --flag: flag }.out

scope ComputeTaxableDiceRollForOnlineGameShowWinnings:
    definition number_of_dice_used_for_tax_credits equals output of ComputeEducationExpenses with { --flag: flag }.out

scope ComputeDiceRollForPhysicalSecuritySystemConsultingIncome:
    exception
    definition dice_roll_for_taxable_gremlin_technology_sales under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 10 }).val) }.out
    consequence equals -29070

scope ComputeTaxExemptLeprechaunGifts:
    definition out equals dice_roll_for_tax_exempt_luck_dragon_treasure_location_services - largest_dice_deduction

scope ComputeTaxableRouletteWinnings:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 29 }).val) }.out
    consequence equals dice_roll_for_tax_exempt_fairy_tale_royalties + quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues

scope ComputeDiceRollForSecurityAuditFees:
    definition quantity_of_pips_for_tax_exempt_interest equals output of ComputeNYCNetworkSecurityProfits with { --flag: flag }.out

scope ComputeDiceRollForSecurityPolicyConsultingFees:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 26 }).val) }.out
    consequence equals dice_roll_for_moving_expenses * quantity_of_pips_claimed

scope ComputeDiceForNYCSecureSoftwareDevelopment:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 29 }).val) }.out
    consequence equals number_of_dice_used_for_tax_exempt_sorcerer_spell_casting_fees + number_of_dice_for_taxable_fishing_incomes

declaration scope ComputeHomeOfficeDeduction:
    input flag content list of C
    output out content integer

scope ComputeDiceRollForOnlineRouletteWinnings:
    exception
    definition dice_roll_for_dice_related_business_expenses under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 21 }).val) }.out
    consequence equals number_of_dice_used_for_vehicle_expenses * dice_roll_for_taxable_philosopher_stone_sales

scope ComputeEarnedIncomeCredit:
    exception
    definition number_of_dice_thrown_for_taxable_ogre_consulting_fees under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 11 }).val) }.out
    consequence equals -12177

scope ComputeAdoptionExpenses:
    exception
    definition total_dice_investment_losses under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 3 }).val) }.out
    consequence equals 227

scope ComputeDiceRollForPenetrationTestingEarnings:
    definition dice_roll_for_business_expenses equals output of ComputeNYCDiceRollForPhysicalSecuritySystem with { --flag: flag }.out

scope ComputeTaxableGhostHuntingRewards:
    definition number_of_dependents_dice equals output of ComputeHomeOfficeDeduction with { --flag: flag }.out

scope ComputeTaxExemptYetiTourismIncome:
    definition quantity_of_pips_claimed_for_taxable_gold_discoveries equals output of ComputeStandardDeduction with { --flag: flag }.out

scope ComputeNYCDiceRollForBiometricSecurity:
    definition quantity_of_pips_claimed_for_taxable_gold_discoveries equals dice_roll_for_moving_expenses + dice_roll_for_tax_exempt_fairy_tale_royalties

scope ComputeNYCDigitalSecurityIncome:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 6 }).val) }.out
    consequence equals largest_dice_roll_for_employer_provided_benefits - number_of_dice_used_for_tax_exempt_sorcerer_spell_casting_fees

declaration scope ComputeTaxableRouletteWinnings:
    input flag content list of C
    context dice_roll_for_tax_exempt_fairy_tale_royalties content integer
    context quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues content integer
    output out content integer

scope ComputeDiceRollForSlotMachinePayouts:
    exception
    definition dice_roll_for_tax_exempt_bond_interest under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 6 }).val) }.out
    consequence equals 138

scope ComputeAdoptionExpenses:
    definition total_dice_investment_losses equals 226

scope ComputeTaxableDiceRollForVulnerabilityAssessmentProfits:
    definition number_of_dice_for_health_savings_account_contributions equals output of ComputeNYCFirewallUpgradeIncome with { --flag: flag }.out

scope ComputeDiceRollForNYCStartupInvestment:
    definition quantity_of_pips_claimed_for_farm_income equals output of ComputeDiceRollForOnlineGamblingProfits with { --flag: flag }.out

declaration scope ComputeTaxableDiceRollForDarkWebMonitoringProfits:
    input flag content list of C
    output out content integer

scope ComputeNYCNetworkSecurityProfits:
    definition dice_roll_for_state_and_local_taxes equals output of ComputeTaxableNymphLandscapingProfits with { --flag: flag }.out

scope ComputeDiceRollForSecurityAwarenessTrainingEarnings:
    definition tax equals if
    dice_thrown_for_taxable_chimera_circus_profits = number_of_dice_allocated_for_student_loan_interest
    then $0
    else $1000

declaration scope ComputeDiceRollForCyberInsuranceNYC:
    input flag content list of C
    output out content integer

scope ComputeTaxableDiceRollForOnlineCrapsGameEarnings:
    definition tax equals if
    quantity_of_pips_claimed = dice_roll_for_income
    then $0
    else $1000

scope ComputeTaxableDiceRollForSecurityRiskAssessmentProfits:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 22 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 12 }.val

declaration scope ComputeTaxableFengShuiDragonAdviceFees:
    input flag content list of C
    output out content integer

declaration scope ComputeStudentLoanInterest:
    input flag content list of C
    output out content integer

scope ComputeTaxableDiceRollForOnlineHorseRacingWinnings:
    exception
    definition dice_roll_for_moving_expenses under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 0 }).val) }.out
    consequence equals quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales + dice_thrown_for_disaster_losses

scope ComputeDiceRollForQuantumEncryptionNYC:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 1 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 10 }.val

scope ComputeCharitableContributions:
    definition out equals largest_dice_roll_for_employer_provided_benefits * dice_roll_for_social_security_benefits

scope ComputeHomeOfficeDeduction:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 5 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 10 }.val

scope ComputeDiceForSecurityAuditNYC:
    definition out equals number_of_dice_for_taxable_unicorn_riding_fees - number_of_dependents_dice_claimed

scope ComputeDiceRollForIdentityAccessManagementIncome:
    definition out equals output of Dicer2 with { --flag: flag --index: 12 }.val

scope ComputeDiceRollForNYCStartupInvestment:
    exception
    definition quantity_of_pips_claimed_for_farm_income under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 28 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForSecurityRiskAssessmentProfits with { --flag: flag }.out

scope ComputeTaxableDiceRollForNetworkSecurityProfits:
    definition largest_dice_roll_for_tax_exempt_yeti_tourism_income equals output of ComputeDiceRollForBlockchainSecurityConsultingEarnings with { --flag: flag }.out

declaration scope ComputeNYCDigitalForensics:
    input flag content list of C
    output out content integer

scope ComputeTaxableDiceRollForMalwareRemovalServices:
    exception
    definition dice_roll_for_tax_prep_fees under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 12 }).val) }.out
    consequence equals output of ComputeNYCDiceRollForSecurityAwareness with { --flag: flag }.out

scope ComputeTaxableTimeMachineRentalIncome:
    definition dice_roll_for_tax_exempt_mermaid_song_royalties equals dice_thrown_for_taxable_chimera_circus_profits + largest_dice_used_for_capital_gains

scope ComputeTaxableDiceRollForEndpointSecurityIncome:
    definition quantity_of_pips_claimed_for_taxable_chupacabra_pest_control equals number_of_dice_for_earned_income_tax_credit + number_of_dice_used_for_tax_credits

scope ComputeMovingExpenses:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 18 }).val) }.out
    consequence equals largest_dice_roll_for_depletion_deduction + dice_roll_for_real_estate_taxes

scope ComputeTaxableDragonSlayingEarnings:
    definition quantity_of_pips_withheld_for_taxes equals dice_roll_for_taxable_philosopher_stone_sales * number_of_dice_thrown_for_retirement_contributions

scope ComputeDiceRollForSecurityTokenOfferingConsultingEarnings:
    definition dice_roll_for_volunteer_firefighter_credit equals output of ComputeNYCVulnerabilityAssessment with { --flag: flag }.out

scope ComputeNYCDiceRollForIndustrialControlSystemSecurity:
    definition largest_dice_amount_exempted equals output of ComputeTaxableCryptocurrencySecurityProfits with { --flag: flag }.out

scope ComputeGamblingLosses:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 28 }).val) }.out
    consequence equals dice_thrown_for_taxable_ghost_hunting_rewards * quantity_of_pips_deducted_for_home_office

scope ComputeDiceRollForSportsBettingGains:
    definition tax equals if
    largest_dice_amount_for_educational_expenses = dice_roll_for_tax_exempt_fairy_dust_trade_incomes
    then $0
    else $1000

scope ComputeTaxableNymphLandscapingProfits:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 26 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 11 }.val

scope ComputeMovingExpenses:
    definition dice_roll_for_real_estate_taxes equals output of ComputeDiceRollForQuantumKeyDistributionConsultingFees with { --flag: flag }.out

scope ComputeTaxableDiceRollForOnlineCrapsGameEarnings:
    definition quantity_of_pips_claimed equals quantity_of_pips_claimed_for_taxable_unicorn_breeding + quantity_of_pips_deducted_for_mortgage_interest

scope ComputeNYCAutonomousVehicleSecurity:
    definition tax equals if
    number_of_dependents_dice_claimed = largest_dice_roll_for_taxable_superhero_salaries
    then $0
    else $1000

scope ComputeDiceRollForSecurityPolicyConsultingFees:
    definition quantity_of_pips_claimed equals output of ComputeTaxableNymphLandscapingProfits with { --flag: flag }.out

scope ComputeTaxableGhostWritingRevenue:
    definition out equals dice_thrown_for_homeownership_credits * dice_thrown_for_gambling_winnings

declaration scope ComputeAlimonyPayments:
    input flag content list of C
    context number_of_dice_thrown_for_retirement_contributions content integer
    context largest_dice_roll_for_taxable_treasure_findings content integer
    output out content integer

scope ComputeDiceRollForSecurityAuditFees:
    exception
    definition dice_roll_for_income under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 25 }).val) }.out
    consequence equals quantity_of_pips_for_tax_exempt_interest - dice_roll_for_homebuyer_credit

scope ComputeNYCCryptocurrencyProfits:
    definition number_of_dependents_dice equals output of ComputeDiceRollForIdentityAccessManagementIncome with { --flag: flag }.out

scope ComputeTaxableDiceRollForGameShowWinnings:
    definition number_of_dice_used_for_tax_exempt_sorcerer_spell_casting_fees equals output of ComputeDiceRollForNYCStartupInvestment with { --flag: flag }.out

scope ComputeGamblingDebtInterest:
    definition dice_roll_for_tax_exempt_time_machine_rental_income equals number_of_dice_for_taxable_fishing_incomes * dice_roll_for_charitable_mileage_deduction

scope ComputeDiceRollForQuantumKeyDistributionNYC:
    exception
    definition quantity_of_pips_deducted_for_home_office under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 24 }).val) }.out
    consequence equals 9993

scope ComputeNYCCalcDiceRollForSecurityRiskAssessment:
    definition out equals largest_dice_roll_for_interest_income + number_of_dice_for_taxable_unicorn_riding_fees

scope ComputeDiceRollForQuantumKeyDistributionNYC:
    definition tax equals if
    number_of_dice_for_earned_income_tax_credit = quantity_of_pips_deducted_for_home_office
    then $0
    else $1000

declaration scope ComputeTaxableCryptocurrencySecurityProfits:
    input flag content list of C
    context dice_roll_for_tax_exempt_fairy_dust_trade_incomes content integer
    context quantity_of_pips_claimed_for_dependent_care_credit content integer
    output out content integer

scope ComputeTaxableFairyDustTradeIncomes:
    definition out equals quantity_of_pips_deducted_for_mortgage_interest - largest_dice_amount_exempted

scope ComputeGamblingAddictionTherapyExpenses:
    exception
    definition dice_thrown_for_taxable_ghost_hunting_rewards under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 9 }).val) }.out
    consequence equals 12218

scope ComputeDiceRollForSecurityAuditFees:
    exception
    definition quantity_of_pips_for_tax_exempt_interest under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 7 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForVulnerabilityAssessmentProfits with { --flag: flag }.out

scope ComputeTaxableDiceRollForOnlineCrapsGameEarnings:
    definition quantity_of_pips_claimed_for_taxable_unicorn_breeding equals output of ComputeTaxableDiceRollIncome with { --flag: flag }.out

scope ComputeNYCNetworkSecurityProfits:
    definition dice_roll_for_income equals output of ComputeTaxableNymphLandscapingProfits with { --flag: flag }.out

scope ComputeTaxableDiceRollForOnlineCrapsGameEarnings:
    definition dice_roll_for_income equals -5624

scope ComputeAlimonyPayments:
    exception
    definition largest_dice_roll_for_taxable_treasure_findings under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 27 }).val) }.out
    consequence equals output of ComputeDiceRollForInternetOfThingsSecurityConsultingFees with { --flag: flag }.out

scope ComputeDiceRollForPhysicalSecuritySystemConsultingIncome:
    definition tax equals if
    dice_thrown_for_disaster_losses = dice_roll_for_taxable_gremlin_technology_sales
    then $0
    else $1000

scope ComputeNYCGamblingWinnings:
    definition dice_roll_for_tax_exempt_time_machine_rental_income equals 13621

scope ComputeDiceRollForSecureSoftwareDevelopmentIncome:
    exception
    definition quantity_of_pips_claimed_for_dependent_care_credit under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 23 }).val) }.out
    consequence equals output of ComputeTaxableFairyDustTradeIncomes with { --flag: flag }.out

declaration scope ComputeDiceRollForIncidentResponseServices:
    input flag content list of C
    context quantity_of_pips_claimed_for_taxable_unicorn_breeding content integer
    context number_of_dice_used_for_tax_credits content integer
    output out content integer

scope ComputeNYCDiceRollForIndustrialControlSystemSecurity:
    exception
    definition number_of_dice_for_taxable_fishing_incomes under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 21 }).val) }.out
    consequence equals output of ComputeDiceRollForNYCStartupInvestment with { --flag: flag }.out

scope ComputeNYCGamblingWinnings:
    definition tax equals if
    dice_roll_for_taxable_gremlin_technology_sales = dice_roll_for_tax_exempt_time_machine_rental_income
    then $0
    else $1000

scope ComputeEarnedIncomeCredit:
    exception
    definition number_of_exemptions_rolled under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 18 }).val) }.out
    consequence equals output of ComputeTaxExemptDwarfGemMiningProfits with { --flag: flag }.out

scope ComputeNYCAutonomousVehicleSecurity:
    definition dice_roll_for_taxable_oil_and_gas_income equals output of ComputeDiceRelatedBusinessExpenses with { --flag: flag }.out

scope ComputeCapitalGains:
    definition number_of_dice_used_for_vehicle_expenses equals output of ComputeTaxableDiceRollForDarkWebMonitoringProfits with { --flag: flag }.out

scope ComputeTaxableRouletteWinnings:
    exception
    definition quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 11 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForSecurityRiskAssessmentProfits with { --flag: flag }.out

scope ComputeDiceForNYCIdentityAccessManagement:
    definition out equals dice_roll_for_state_and_local_taxes * number_of_dependents_dice_claimed

scope ComputeNYCTaxableIncome:
    exception
    definition largest_dice_roll_for_foreign_income under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 31 }).val) }.out
    consequence equals output of ComputeNYCFirewallUpgradeIncome with { --flag: flag }.out

declaration scope ComputeTaxableDiceRollForSecurityTrainingFees:
    input flag content list of C
    context quantity_of_pips_claimed_for_taxable_elf_crafting_profits content integer
    context number_of_dice_thrown_for_retirement_contributions content integer
    output out content integer

scope ComputeNYCCalcDiceRollForSecurityRiskAssessment:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals largest_dice_roll_for_interest_income * number_of_dice_for_taxable_unicorn_riding_fees

declaration scope ComputeTaxExemptSphinxRiddleSolutionFees:
    input flag content list of C
    context dice_roll_for_tax_exempt_fairy_tale_royalties content integer
    context dice_roll_for_volunteer_firefighter_credit content integer
    context largest_dice_roll_for_taxable_superhero_salaries content integer
    context number_of_dice_used_for_foreign_tax_credit content integer
    output tax content money

scope ComputeCharitableContributions:
    definition dice_roll_for_social_security_benefits equals output of ComputeNYCDiceRollForSecurityAwareness with { --flag: flag }.out

scope ComputeDependentCareCredit:
    definition number_of_dice_allocated_for_student_loan_interest equals quantity_of_pips_deducted_for_historic_rehabilitation_credit - largest_dice_roll_for_taxable_pegasus_air_travel_revenues

scope ComputeForeignIncome:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 11 }).val) }.out
    consequence equals dice_roll_for_tax_exempt_luck_dragon_treasure_location_services + dice_thrown_for_taxable_intergalactic_trade_profits

scope ComputeCybersecurityConsultingFees:
    definition dice_roll_for_social_security_benefits equals output of ComputeTaxExemptSorcererSpellCastingFees with { --flag: flag }.out

scope ComputeTaxableDiceRollForOnlineGameShowWinnings:
    definition out equals number_of_dice_used_for_tax_credits * dice_thrown_for_taxable_minotaur_labyrinth_tour_earnings

scope ComputeDiceRollForSecurityAwarenessTrainingEarnings:
    definition number_of_dice_allocated_for_student_loan_interest equals 6104

scope ComputeTaxableFairyTaleRoyalties:
    exception
    definition quantity_of_pips_claimed_for_taxable_unicorn_breeding under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 17 }).val) }.out
    consequence equals output of ComputeTaxablePokerTournamentWinnings with { --flag: flag }.out

scope ComputeDiceRollForLotteryWinnings:
    exception
    definition dice_roll_for_tax_exempt_fairy_tale_royalties under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 18 }).val) }.out
    consequence equals output of ComputeTaxableFairyDustTradeIncomes with { --flag: flag }.out

scope ComputeGamblingAddictionTherapyExpenses:
    definition quantity_of_pips_claimed_for_taxable_chupacabra_pest_control equals dice_roll_for_tax_prep_fees - number_of_dice_used_for_tax_credits

scope ComputeTaxableDiceGameRoyalties:
    exception
    definition dice_roll_for_tax_exempt_fairy_tale_royalties under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 15 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForOnlineSportsBettingGains with { --flag: flag }.out

scope ComputeTaxableDiceRollForEndpointSecurityIncome:
    exception
    definition quantity_of_pips_claimed_for_taxable_chupacabra_pest_control under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 29 }).val) }.out
    consequence equals number_of_dice_for_earned_income_tax_credit - number_of_dice_used_for_tax_credits

scope ComputeDiceForNYCSecurityTraining:
    definition quantity_of_pips_deducted_for_home_office equals 178

scope ComputeTaxableDiceRollForHackerBountyRewards:
    definition dice_roll_for_tax_exempt_fairy_dust_trade_incomes equals quantity_of_pips_claimed * quantity_of_pips_for_taxable_gifts

scope ComputeDiceForSecurityComplianceAuditNYC:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 9 }).val) }.out
    consequence equals largest_dice_roll_for_employer_provided_benefits + number_of_dice_for_taxable_fishing_incomes

scope ComputeTaxableDiceRollForEncryptionConsultingIncome:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 31 }).val) }.out
    consequence equals largest_dice_roll_for_tax_exempt_sphinx_riddle_solution_fees - dice_roll_for_tax_exempt_fairy_tale_royalties

scope ComputeDiceRollForSecurityComplianceAuditFees:
    definition dice_roll_for_real_estate_taxes equals output of ComputeDiceRollForQuantumEncryptionNYC with { --flag: flag }.out

scope ComputeGamblingAddictionTherapyExpenses:
    definition number_of_dice_used_for_tax_credits equals output of ComputeNYCCryptocurrencyProfits with { --flag: flag }.out

scope ComputeDiceRollForPhysicalSecuritySystemConsultingIncome:
    exception
    definition number_of_dice_used_for_tax_credits under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 13 }).val) }.out
    consequence equals output of ComputeAlimonyPayments with { --flag: flag }.out

declaration scope ComputeStandardDeduction:
    input flag content list of C
    output out content integer

scope ComputeSelfEmploymentIncome:
    definition out equals output of Dicer2 with { --flag: flag --index: 6 }.val

scope ComputeAdoptionExpenses:
    definition dice_thrown_for_taxable_ghost_hunting_rewards equals output of ComputeDiceForIncidentResponseNYC with { --flag: flag }.out

scope ComputeDiceRollForSportsBettingGains:
    exception
    definition dice_roll_for_tax_exempt_fairy_dust_trade_incomes under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 28 }).val) }.out
    consequence equals -69

declaration scope ComputeTaxExemptSorcererSpellCastingFees:
    input flag content list of C
    context dice_roll_for_business_expenses content integer
    context dice_roll_for_tax_exempt_fairy_dust_trade_incomes content integer
    output out content integer

scope ComputeDiceRollForLotteryWinnings:
    definition largest_dice_roll_for_interest_income equals 5738

declaration scope ComputeDiceRollForSecurityAuditFees:
    input flag content list of C
    context quantity_of_pips_for_tax_exempt_interest content integer
    context dice_roll_for_homebuyer_credit content integer
    context dice_roll_for_income content integer
    context number_of_dice_thrown_for_disability_deductions content integer
    output tax content money

scope ComputeCapitalGains:
    definition out equals largest_dice_amount_exempted * number_of_dice_used_for_vehicle_expenses

scope ComputeMortgageInterest:
    definition largest_dice_roll_for_taxable_superhero_salaries equals output of ComputeDiceForNYCBusinessExpenses with { --flag: flag }.out

scope ComputeStateAndLocalTaxes:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 29 }).val) }.out
    consequence equals number_of_dice_used_for_foreign_tax_credit - total_dice_investment_losses

scope ComputeTaxableDiceRollForOnlinePokerIncome:
    definition largest_dice_amount_exempted equals output of ComputeStandardDeduction with { --flag: flag }.out

scope ComputeTaxableDiceRollForDigitalForensicsIncome:
    exception
    definition dice_thrown_for_taxable_ghost_hunting_rewards under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 19 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForDarkWebMonitoringProfits with { --flag: flag }.out

scope ComputeNYCDiceRollForBiometricSecurity:
    definition dice_roll_for_tax_exempt_fairy_tale_royalties equals output of ComputeNYCDigitalSecurityIncome with { --flag: flag }.out

scope ComputeTaxableGriffinDeliveryServices:
    definition quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues equals output of ComputeDiceRollForIndustrialControlSystemSecurityIncome with { --flag: flag }.out

scope ComputeDiceRollForOnlineRouletteWinnings:
    definition largest_dice_used_for_capital_gains equals 109

scope ComputeNYCNetworkSecurityProfits:
    definition out equals dice_roll_for_state_and_local_taxes * dice_roll_for_income

scope ComputeEducationExpenses:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 23 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 4 }.val

scope ComputeDiceRollForInternetOfThingsSecurityConsultingFees:
    definition out equals output of Dicer2 with { --flag: flag --index: 1 }.val

scope ComputeTaxExemptYetiTourismIncome:
    exception
    definition number_of_dice_thrown_for_disability_deductions under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 6 }).val) }.out
    consequence equals output of ComputeDisasterLosses with { --flag: flag }.out

scope ComputeDiceRollForQuantumKeyDistributionConsultingFees:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 27 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 31 }.val

declaration scope ComputeNYCEndpointSecurityIncome:
    input flag content list of C
    context largest_dice_roll_for_depletion_deduction content integer
    context quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales content integer
    output out content integer

scope ComputeTaxableDiceRollForOnlineFantasySportsPrizes:
    exception
    definition largest_dice_roll_for_tax_exempt_yeti_tourism_income under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 31 }).val) }.out
    consequence equals output of ComputeNYCDiceRollForPhysicalSecuritySystem with { --flag: flag }.out

scope ComputeTaxableDiceRollForHackerBountyRewards:
    definition quantity_of_pips_for_taxable_gifts equals output of ComputeGamblingWinnings with { --flag: flag }.out

scope ComputeTaxableDiceRollForSecureCodeReviewProfits:
    exception
    definition dice_thrown_for_taxable_fringe_benefits under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 13 }).val) }.out
    consequence equals output of ComputeDiceRollForQuantumEncryptionNYC with { --flag: flag }.out

scope ComputeNYCDiceRollForCloudSecurity:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 21 }).val) }.out
    consequence equals number_of_dice_for_health_savings_account_contributions * largest_dice_roll_for_foreign_income

scope ComputeTaxExemptSphinxRiddleSolutionFees:
    exception
    definition dice_roll_for_volunteer_firefighter_credit under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 21 }).val) }.out
    consequence equals output of ComputeCharitableContributions with { --flag: flag }.out

scope ComputeNYCCryptocurrencyProfits:
    exception
    definition dice_thrown_for_taxable_chimera_circus_profits under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 7 }).val) }.out
    consequence equals output of ComputeNYCDiceRollForSecurityAwareness with { --flag: flag }.out

scope ComputeDiceRollForNYCSecurityTokenOffering:
    definition largest_dice_roll_for_interest_income equals -91873

scope ComputeTaxableDiceRollForDigitalForensicsIncome:
    definition out equals dice_thrown_for_taxable_ghost_hunting_rewards * largest_dice_roll_for_tax_exempt_sphinx_riddle_solution_fees

scope ComputeDiceRollForSecurityTokenOfferingConsultingEarnings:
    definition dice_roll_for_tax_exempt_ghost_writing_revenue equals 10534

scope ComputeTaxableDiceRollIncome:
    exception
    definition quantity_of_pips_claimed_for_taxable_chupacabra_pest_control under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 25 }).val) }.out
    consequence equals output of ComputeStandardDeduction with { --flag: flag }.out

scope ComputeGamblingWinnings:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 25 }).val) }.out
    consequence equals number_of_dice_thrown_for_taxable_kraken_escort_services - number_of_exemptions_rolled

scope ComputeTaxableDiceRollForCybersecurityStartupInvestmentProfits:
    exception
    definition largest_dice_roll_for_employer_provided_benefits under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 22 }).val) }.out
    consequence equals output of ComputeEnergyEfficiencyCredits with { --flag: flag }.out

scope ComputeTaxExemptSphinxRiddleSolutionFees:
    definition number_of_dice_used_for_foreign_tax_credit equals 158

scope ComputeTaxableDiceRollForCybersecurityStartupInvestmentProfits:
    definition largest_dice_roll_for_employer_provided_benefits equals output of ComputeGamblingExciseTax with { --flag: flag }.out

declaration scope ComputeTaxableDiceRollForEndpointSecurityIncome:
    input flag content list of C
    context number_of_dice_for_earned_income_tax_credit content integer
    context number_of_dice_used_for_tax_credits content integer
    context quantity_of_pips_claimed_for_taxable_chupacabra_pest_control content integer
    context number_of_dice_thrown_for_taxable_ogre_consulting_fees content integer
    output tax content money

declaration scope ComputeDiceRollForSlotMachinePayouts:
    input flag content list of C
    context quantity_of_pips_for_healthcare_deductions content integer
    context number_of_dice_used_for_taxable_robotic_inventions content integer
    context dice_thrown_for_taxable_ghost_hunting_rewards content integer
    context dice_roll_for_tax_exempt_bond_interest content integer
    output tax content money

scope ComputeTaxableDiceRollForOnlineRouletteWinnings:
    exception
    definition dice_roll_for_tax_exempt_fairy_tale_royalties under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 3 }).val) }.out
    consequence equals output of ComputeTaxableNymphLandscapingProfits with { --flag: flag }.out

scope ComputeDiceRollForSportsBettingGains:
    definition largest_dice_amount_for_educational_expenses equals dice_roll_for_energy_efficiency_credits + largest_dice_roll_for_roth_ira_contributions

scope ComputeCybersecurityConsultingFees:
    definition quantity_of_pips_claimed_for_taxable_chupacabra_pest_control equals dice_thrown_for_taxable_minotaur_labyrinth_tour_earnings - dice_roll_for_social_security_benefits

scope ComputeTaxableTimeMachineRentalIncome:
    exception
    definition dice_roll_for_tax_exempt_mermaid_song_royalties under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 21 }).val) }.out
    consequence equals dice_thrown_for_taxable_chimera_circus_profits - largest_dice_used_for_capital_gains

scope ComputeDiceRollForFantasySportsPrizes:
    exception
    definition dice_thrown_for_disaster_losses under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 0 }).val) }.out
    consequence equals output of ComputeDiceRollForIndustrialControlSystemSecurityIncome with { --flag: flag }.out

scope ComputeTaxableCryptocurrencySecurityProfits:
    definition out equals dice_roll_for_tax_exempt_fairy_dust_trade_incomes - quantity_of_pips_claimed_for_dependent_care_credit

declaration scope ComputeDiceRollForOnlineRouletteWinnings:
    input flag content list of C
    context number_of_dice_used_for_vehicle_expenses content integer
    context dice_roll_for_taxable_philosopher_stone_sales content integer
    context dice_roll_for_dice_related_business_expenses content integer
    context largest_dice_used_for_capital_gains content integer
    output tax content money

scope ComputeTaxableGremlinTechnologySales:
    exception
    definition dice_roll_for_taxable_gremlin_technology_sales under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForArtificialIntelligenceSecurityIncome with { --flag: flag }.out

scope ComputeNYCNetworkSecurityProfits:
    exception
    definition dice_roll_for_state_and_local_taxes under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 6 }).val) }.out
    consequence equals output of ComputeEducationExpenses with { --flag: flag }.out

scope ComputeDependentCareCredit:
    exception
    definition number_of_dice_allocated_for_student_loan_interest under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 0 }).val) }.out
    consequence equals quantity_of_pips_deducted_for_historic_rehabilitation_credit * largest_dice_roll_for_taxable_pegasus_air_travel_revenues

scope ComputeNYCEndpointSecurityIncome:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 8 }).val) }.out
    consequence equals largest_dice_roll_for_depletion_deduction + quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales

scope ComputeDiceForNYCMalwareRemoval:
    definition out equals largest_dice_roll_for_tax_exempt_leprechaun_gifts - dice_roll_for_dice_related_business_expenses

scope ComputeTaxableDiceRollForSecurityTrainingFees:
    definition quantity_of_pips_claimed_for_taxable_elf_crafting_profits equals output of ComputeDiceRollForIndustrialControlSystemSecurityIncome with { --flag: flag }.out

scope ComputeDiceRollForSecurityComplianceAuditFees:
    exception
    definition dice_roll_for_real_estate_taxes under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 27 }).val) }.out
    consequence equals output of ComputeDiceForNYCBusinessExpenses with { --flag: flag }.out

scope ComputeNYCCalcDiceRollForSecurityRiskAssessment:
    exception
    definition number_of_dice_for_taxable_unicorn_riding_fees under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 25 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForDarkWebMonitoringProfits with { --flag: flag }.out

scope ComputeMovingExpenses:
    definition out equals largest_dice_roll_for_depletion_deduction * dice_roll_for_real_estate_taxes

scope ComputeGamblingDebtInterest:
    exception
    definition quantity_of_pips_deducted_for_mortgage_interest under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 3 }).val) }.out
    consequence equals 62985000

scope ComputeDiceForNYCEncryptionConsulting:
    exception
    definition dice_thrown_for_taxable_lottery_winnings under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals output of ComputeNYCDiceRollForPhysicalSecuritySystem with { --flag: flag }.out

scope ComputeNYCCryptocurrencyProfits:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 7 }).val) }.out
    consequence equals number_of_dependents_dice * dice_thrown_for_taxable_chimera_circus_profits

scope ComputeDiceRollForFantasySportsPrizes:
    definition quantity_of_pips_claimed_for_taxable_chupacabra_pest_control equals output of ComputeTaxableNymphLandscapingProfits with { --flag: flag }.out

declaration scope ComputeTaxableOgreConsultingFees:
    input flag content list of C
    context number_of_dice_thrown_for_military_service_deductions content integer
    context quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales content integer
    output out content integer

scope ComputeDiceForNYCSecurityTraining:
    exception
    definition quantity_of_pips_deducted_for_home_office under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 17 }).val) }.out
    consequence equals 177

declaration scope ComputeNYCDistributedDenialOfService:
    input flag content list of C
    context number_of_dice_for_taxable_fishing_incomes content integer
    context largest_dice_roll_for_tax_exempt_leprechaun_gifts content integer
    output out content integer

scope ComputeNYCCalcDiceRollForSecurityRiskAssessment:
    definition number_of_dice_for_taxable_unicorn_riding_fees equals output of ComputeDiceRollForQuantumEncryptionNYC with { --flag: flag }.out

declaration scope ComputeDiceRollForIdentityAccessManagementIncome:
    input flag content list of C
    output out content integer

scope ComputeTaxableDiceRollForOnlineSportsBettingGains:
    definition quantity_of_pips_withheld_for_taxes equals output of ComputeDiceRollForIndustrialControlSystemSecurityIncome with { --flag: flag }.out

scope ComputeNYCVulnerabilityAssessment:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 10 }).val) }.out
    consequence equals quantity_of_pips_for_dividend_income - dice_roll_for_tax_exempt_bond_interest

scope ComputeNYCArtificialIntelligenceSecurity:
    definition dice_roll_for_tax_exempt_time_machine_rental_income equals output of ComputeTaxableDiceRollForCriticalInfrastructureProtectionProfits with { --flag: flag }.out

scope ComputeTaxableDiceRollForQuantumEncryptionProfits:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 13 }).val) }.out
    consequence equals largest_dice_roll_for_taxable_nymph_landscaping_profits - quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues

scope ComputeGamblingDebtInterest:
    exception
    definition dice_roll_for_tax_exempt_time_machine_rental_income under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 12 }).val) }.out
    consequence equals number_of_dice_for_taxable_fishing_incomes - dice_roll_for_charitable_mileage_deduction

scope ComputeDiceRollForQuantumKeyDistributionNYC:
    exception
    definition dice_roll_for_tax_exempt_alien_income under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 31 }).val) }.out
    consequence equals output of ComputeBusinessExpenses with { --flag: flag }.out

scope ComputeHSAContributions:
    exception
    definition number_of_dice_used_for_tax_exempt_sorcerer_spell_casting_fees under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 2 }).val) }.out
    consequence equals output of ComputeNYCDiceRollForSecurityAwareness with { --flag: flag }.out

scope ComputeTaxableDiceRollForOnlinePokerIncome:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 19 }).val) }.out
    consequence equals number_of_dice_thrown_for_taxable_dragonslaying_earnings - largest_dice_amount_exempted

scope ComputeStudentLoanInterest:
    definition out equals output of Dicer2 with { --flag: flag --index: 19 }.val

scope ComputeTaxableDiceRollForOnlineFantasySportsPrizes:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 12 }).val) }.out
    consequence equals largest_dice_roll_for_tax_exempt_yeti_tourism_income + dice_roll_for_tax_exempt_time_machine_rental_income

scope ComputeGamblingWinnings:
    definition number_of_dice_thrown_for_taxable_kraken_escort_services equals output of ComputeNYCFirewallUpgradeIncome with { --flag: flag }.out

scope ComputeNYCVulnerabilityAssessment:
    definition out equals quantity_of_pips_for_dividend_income * dice_roll_for_tax_exempt_bond_interest

scope ComputeTaxableBingoPrizes:
    exception
    definition number_of_dice_used_for_taxable_robotic_inventions under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 18 }).val) }.out
    consequence equals output of ComputeNYCDiceRollForSecurityAwareness with { --flag: flag }.out

scope ComputeForeignIncome:
    definition dice_roll_for_tax_exempt_luck_dragon_treasure_location_services equals output of ComputeGamblingExciseTax with { --flag: flag }.out

scope ComputeNYCDigitalSecurityIncome:
    exception
    definition number_of_dice_used_for_tax_exempt_sorcerer_spell_casting_fees under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 12 }).val) }.out
    consequence equals output of ComputeTaxableNymphLandscapingProfits with { --flag: flag }.out

declaration scope ComputeDiceRollForBlockchainSecurityConsultingEarnings:
    input flag content list of C
    output out content integer

scope ComputeTaxableDiceRollForNetworkSecurityProfits:
    definition out equals largest_dice_roll_for_tax_exempt_yeti_tourism_income + dice_roll_for_taxable_philosopher_stone_sales

scope ComputeDiceForNYCEncryptionConsulting:
    definition out equals dice_roll_for_homebuyer_credit - dice_thrown_for_taxable_lottery_winnings

scope ComputeDiceRelatedBusinessExpenses:
    definition quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues equals output of ComputeDiceRollForThreatIntelligenceServicesIncome with { --flag: flag }.out

scope ComputeTaxableDiceRollForOnlineFantasySportsPrizes:
    exception
    definition dice_roll_for_tax_exempt_time_machine_rental_income under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 30 }).val) }.out
    consequence equals output of ComputeDiceRollForInternetOfThingsSecurityConsultingFees with { --flag: flag }.out

scope ComputeNYCArtificialIntelligenceSecurity:
    definition out equals dice_roll_for_tax_exempt_time_machine_rental_income * largest_dice_roll_for_foreign_income

scope ComputeTaxableDiceRollIncome:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 23 }).val) }.out
    consequence equals quantity_of_pips_claimed_for_taxable_chupacabra_pest_control + dice_roll_for_tax_exempt_fairy_tale_royalties

scope ComputeNYCAutonomousVehicleSecurity:
    exception
    definition dice_roll_for_taxable_oil_and_gas_income under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 26 }).val) }.out
    consequence equals output of ComputeFringeBenefits with { --flag: flag }.out

declaration scope ComputeTaxableDiceRollForDistributedDenialOfServiceProtectionFees:
    input flag content list of C
    context largest_dice_roll_for_taxable_superhero_salaries content integer
    context dice_roll_for_state_and_local_taxes content integer
    output out content integer

scope ComputeGamblingLosses:
    definition quantity_of_pips_deducted_for_home_office equals output of ComputeDiceRollForQuantumKeyDistributionConsultingFees with { --flag: flag }.out

scope ComputeHealthcareDeductions:
    definition largest_dice_roll_for_tax_exempt_leprechaun_gifts equals output of ComputeNYCDiceRollForSecurityAwareness with { --flag: flag }.out

declaration scope ComputeTaxableCrapsGameEarnings:
    input flag content list of C
    context quantity_of_pips_for_tax_exempt_interest content integer
    context largest_dice_roll_for_depletion_deduction content integer
    output out content integer

scope ComputeDiceRollForSlotMachinePayouts:
    exception
    definition dice_thrown_for_taxable_ghost_hunting_rewards under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 31 }).val) }.out
    consequence equals quantity_of_pips_for_healthcare_deductions + number_of_dice_used_for_taxable_robotic_inventions

scope ComputeDiceRelatedBusinessExpenses:
    exception
    definition quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 28 }).val) }.out
    consequence equals output of ComputeTaxableNymphLandscapingProfits with { --flag: flag }.out

scope ComputeDiceForSecurityAuditNYC:
    definition number_of_dice_for_taxable_unicorn_riding_fees equals output of ComputeItemizedDeductions with { --flag: flag }.out

scope ComputeTaxablePokerTournamentWinnings:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 12 }).val) }.out
    consequence equals quantity_of_pips_claimed_for_taxable_unicorn_breeding * number_of_dice_used_for_vehicle_expenses

declaration scope ComputeDiceForIncidentResponseNYC:
    input flag content list of C
    context quantity_of_pips_claimed_for_tax_exempt_dwarf_gem_mining_profits content integer
    context total_dice_investment_losses content integer
    output out content integer

scope ComputeTaxableDiceRollForSecureCodeReviewProfits:
    definition dice_roll_for_tax_exempt_alien_income equals output of ComputeNYCDigitalForensics with { --flag: flag }.out

scope ComputeTaxableDiceRollForOnlineSportsBettingGains:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 26 }).val) }.out
    consequence equals dice_roll_for_cryptocurrency_transactions * quantity_of_pips_withheld_for_taxes

scope ComputeTaxableFairyTaleRoyalties:
    exception
    definition quantity_of_pips_claimed_for_taxable_chupacabra_pest_control under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 27 }).val) }.out
    consequence equals 1263599

scope ComputeGamblingDebtInterest:
    exception
    definition dice_roll_for_charitable_mileage_deduction under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals output of ComputeTaxableCardGameProfits with { --flag: flag }.out

scope ComputeTaxableGriffinDeliveryServices:
    exception
    definition largest_dice_roll_for_taxable_pegasus_air_travel_revenues under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 4 }).val) }.out
    consequence equals output of ComputeEnergyEfficiencyCredits with { --flag: flag }.out

declaration scope ComputeTaxableDiceRollForOnlineHorseRacingWinnings:
    input flag content list of C
    context quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales content integer
    context dice_thrown_for_disaster_losses content integer
    context dice_roll_for_moving_expenses content integer
    context number_of_dice_used_for_tax_exempt_werewolf_security_services content integer
    output tax content money

scope ComputeInvestmentIncome:
    definition quantity_of_pips_for_healthcare_deductions equals output of ComputeDiceRelatedBusinessExpenses with { --flag: flag }.out

scope ComputeDiceRollForCasinoEarnings:
    exception
    definition dice_roll_for_real_estate_taxes under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 24 }).val) }.out
    consequence equals number_of_dice_for_taxable_fishing_incomes + dice_roll_for_charitable_mileage_deduction

scope ComputeTaxableDiceRollForOnlineHorseRacingWinnings:
    definition number_of_dice_used_for_tax_exempt_werewolf_security_services equals -10270

scope ComputeDiceRollForPenetrationTestingEarnings:
    exception
    definition dice_roll_for_business_expenses under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 17 }).val) }.out
    consequence equals output of ComputeTaxableFengShuiDragonAdviceFees with { --flag: flag }.out

scope ComputeTaxableDiceRollForMalwareRemovalServices:
    exception
    definition number_of_dice_thrown_for_taxable_dragonslaying_earnings under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 31 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForSecurityRiskAssessmentProfits with { --flag: flag }.out

scope ComputeDiceRollForSlotMachinePayouts:
    definition dice_thrown_for_taxable_ghost_hunting_rewards equals quantity_of_pips_for_healthcare_deductions - number_of_dice_used_for_taxable_robotic_inventions

scope ComputeDiceRollForHorseRacingWinnings:
    definition quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales equals output of ComputeTaxExemptLeprechaunGifts with { --flag: flag }.out

scope ComputeAlimonyPayments:
    definition out equals number_of_dice_thrown_for_retirement_contributions - largest_dice_roll_for_taxable_treasure_findings

scope ComputeForeignIncome:
    exception
    definition dice_roll_for_tax_exempt_luck_dragon_treasure_location_services under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 19 }).val) }.out
    consequence equals output of ComputeDiceRollForQuantumEncryptionNYC with { --flag: flag }.out

scope ComputeTaxableCrapsGameEarnings:
    definition quantity_of_pips_for_tax_exempt_interest equals output of ComputeTaxableDiceRollForSecurityRiskAssessmentProfits with { --flag: flag }.out

scope ComputeCybersecurityConsultingFees:
    exception
    definition quantity_of_pips_claimed_for_taxable_chupacabra_pest_control under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 12 }).val) }.out
    consequence equals dice_thrown_for_taxable_minotaur_labyrinth_tour_earnings * dice_roll_for_social_security_benefits

scope ComputeTaxableDiceRollForGameShowWinnings:
    definition largest_dice_roll_for_taxable_superhero_salaries equals number_of_dice_used_for_tax_exempt_sorcerer_spell_casting_fees + dice_thrown_for_taxable_assets

declaration scope ComputeDiceRollForPhysicalSecuritySystemConsultingIncome:
    input flag content list of C
    context largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings content integer
    context number_of_dice_used_for_tax_credits content integer
    context dice_thrown_for_disaster_losses content integer
    context dice_roll_for_taxable_gremlin_technology_sales content integer
    output tax content money

scope ComputeDiceForIoTSecurityConsultingNYC:
    exception
    definition largest_dice_roll_for_taxable_superhero_salaries under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 18 }).val) }.out
    consequence equals dice_roll_for_tax_exempt_mermaid_song_royalties * largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings

scope ComputeNYCVulnerabilityAssessment:
    exception
    definition quantity_of_pips_for_dividend_income under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 21 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForSecurityRiskAssessmentProfits with { --flag: flag }.out

scope ComputeTaxableTimeMachineRentalIncome:
    exception
    definition dice_thrown_for_taxable_chimera_circus_profits under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 18 }).val) }.out
    consequence equals output of ComputeNYCDiceRollForBlockchainSecurity with { --flag: flag }.out

scope ComputeDiceRollForSecurityComplianceAuditFees:
    definition largest_dice_roll_for_alimony_payments equals output of ComputeTaxableDiceRollForOnlineSlotMachinePayouts with { --flag: flag }.out

scope ComputeNYCDigitalSecurityIncome:
    definition largest_dice_roll_for_employer_provided_benefits equals output of ComputeNYCFirewallUpgradeIncome with { --flag: flag }.out

scope ComputeStateAndLocalTaxes:
    exception
    definition total_dice_investment_losses under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 9 }).val) }.out
    consequence equals output of ComputeDiceRollForBlockchainSecurityConsultingEarnings with { --flag: flag }.out

scope ComputeNYCDigitalSecurityIncome:
    definition out equals largest_dice_roll_for_employer_provided_benefits * number_of_dice_used_for_tax_exempt_sorcerer_spell_casting_fees

scope ComputeTaxableDiceRollForOnlineGameShowWinnings:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 19 }).val) }.out
    consequence equals number_of_dice_used_for_tax_credits + dice_thrown_for_taxable_minotaur_labyrinth_tour_earnings

scope ComputeGamblingDebtInterest:
    definition dice_roll_for_charitable_mileage_deduction equals output of ComputeForeignIncome with { --flag: flag }.out

scope ComputeRetirementContributions:
    exception
    definition number_of_dice_used_for_tax_credits under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 24 }).val) }.out
    consequence equals 13354

declaration scope ComputeTaxableGhostHuntingRewards:
    input flag content list of C
    context number_of_dependents_dice content integer
    context dice_roll_for_tax_exempt_alien_income content integer
    output out content integer

scope ComputeTaxableDiceRollForOnlineSportsBettingGains:
    exception
    definition dice_roll_for_cryptocurrency_transactions under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 29 }).val) }.out
    consequence equals output of ComputeEnergyEfficiencyCredits with { --flag: flag }.out

scope ComputeTaxableDiceRollForDarkWebMonitoringProfits:
    definition out equals output of Dicer2 with { --flag: flag --index: 23 }.val

scope ComputeHSAContributions:
    definition number_of_dice_used_for_tax_exempt_sorcerer_spell_casting_fees equals output of ComputeGamblingExciseTax with { --flag: flag }.out

scope ComputeTaxableDragonSlayingEarnings:
    exception
    definition dice_roll_for_taxable_philosopher_stone_sales under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 11 }).val) }.out
    consequence equals output of ComputeHSAContributions with { --flag: flag }.out

scope ComputeTaxableDiceRollForOnlineCrapsGameEarnings:
    exception
    definition dice_roll_for_income under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 7 }).val) }.out
    consequence equals -5625

declaration scope ComputeNYCDigitalSecurityIncome:
    input flag content list of C
    context largest_dice_roll_for_employer_provided_benefits content integer
    context number_of_dice_used_for_tax_exempt_sorcerer_spell_casting_fees content integer
    output out content integer

scope ComputeDiceRollForOnlineGamblingProfits:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 21 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 17 }.val

scope ComputeDiceForNYCIdentityAccessManagement:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 1 }).val) }.out
    consequence equals dice_roll_for_state_and_local_taxes + number_of_dependents_dice_claimed

scope ComputeTaxableDiceRollForHackerBountyRewards:
    definition quantity_of_pips_claimed equals output of ComputeTaxableFairyDustTradeIncomes with { --flag: flag }.out

declaration scope ComputeCharitableContributions:
    input flag content list of C
    context largest_dice_roll_for_employer_provided_benefits content integer
    context dice_roll_for_social_security_benefits content integer
    output out content integer

scope ComputeDiceRollForSecurityTokenOfferingConsultingEarnings:
    exception
    definition number_of_dice_for_taxable_unicorn_riding_fees under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 4 }).val) }.out
    consequence equals output of ComputeFringeBenefits with { --flag: flag }.out

declaration scope ComputeSelfEmploymentIncome:
    input flag content list of C
    output out content integer

scope ComputeTaxableDiceRollForOnlineCrapsGameEarnings:
    exception
    definition quantity_of_pips_claimed under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 10 }).val) }.out
    consequence equals quantity_of_pips_claimed_for_taxable_unicorn_breeding - quantity_of_pips_deducted_for_mortgage_interest

scope ComputeTaxExemptInterest:
    definition number_of_dice_used_for_tax_exempt_werewolf_security_services equals output of ComputeGamblingExciseTax with { --flag: flag }.out

scope ComputeDiceRollForSecurityComplianceAuditFees:
    definition out equals largest_dice_roll_for_alimony_payments * dice_roll_for_real_estate_taxes

scope ComputeNYCArtificialIntelligenceSecurity:
    exception
    definition dice_roll_for_tax_exempt_time_machine_rental_income under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 2 }).val) }.out
    consequence equals output of ComputeItemizedDeductions with { --flag: flag }.out

declaration scope ComputeRetirementContributions:
    input flag content list of C
    context dice_roll_for_tax_exempt_alien_income content integer
    context quantity_of_pips_for_healthcare_deductions content integer
    context dice_roll_for_homebuyer_credit content integer
    context number_of_dice_used_for_tax_credits content integer
    output tax content money

scope ComputeTaxableDiceRollForHackerBountyRewards:
    definition dice_roll_for_homebuyer_credit equals 211

scope ComputeTaxableDiceRollForOnlineRouletteWinnings:
    exception
    definition number_of_dice_for_taxable_unicorn_riding_fees under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 1 }).val) }.out
    consequence equals output of ComputeStandardDeduction with { --flag: flag }.out

scope ComputeDependentCareCredit:
    definition number_of_dice_for_health_savings_account_contributions equals 280908

scope ComputeNYCDiceRollForIndustrialControlSystemSecurity:
    definition tax equals if
    dice_roll_for_tax_exempt_bond_interest = dice_thrown_for_tax_exempt_time_travel_reimbursements
    then $0
    else $1000

scope ComputeDiceRollForOnlineGamblingProfits:
    definition out equals output of Dicer2 with { --flag: flag --index: 30 }.val

scope ComputeNYCTaxableIncome:
    exception
    definition number_of_dice_thrown_for_military_service_deductions under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 2 }).val) }.out
    consequence equals output of ComputeSelfEmploymentIncome with { --flag: flag }.out

declaration scope ComputeDiceForNYCMalwareRemoval:
    input flag content list of C
    context largest_dice_roll_for_tax_exempt_leprechaun_gifts content integer
    context dice_roll_for_dice_related_business_expenses content integer
    output out content integer

scope ComputeTaxExemptSorcererSpellCastingFees:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 29 }).val) }.out
    consequence equals dice_roll_for_business_expenses - dice_roll_for_tax_exempt_fairy_dust_trade_incomes

scope ComputeNYCDistributedDenialOfService:
    definition largest_dice_roll_for_tax_exempt_leprechaun_gifts equals output of ComputeEducationExpenses with { --flag: flag }.out

scope ComputeTaxableDiceRollForDigitalForensicsIncome:
    exception
    definition largest_dice_roll_for_tax_exempt_sphinx_riddle_solution_fees under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 17 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForSecurityRiskAssessmentProfits with { --flag: flag }.out

scope ComputeTaxableDiceRollForOnlineCrapsGameEarnings:
    exception
    definition quantity_of_pips_claimed_for_taxable_unicorn_breeding under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 6 }).val) }.out
    consequence equals output of ComputeNYCCryptocurrencyProfits with { --flag: flag }.out

scope ComputeDiceRollForLotteryWinnings:
    definition quantity_of_pips_for_taxable_gifts equals dice_roll_for_tax_exempt_fairy_tale_royalties + dice_roll_for_tax_exempt_feng_shui_dragon_advice_fees

scope ComputeDiceRollForSecurityAwarenessTrainingEarnings:
    definition dice_roll_for_homebuyer_credit equals output of ComputeTaxableDiceRollForOnlineSportsBettingGains with { --flag: flag }.out

scope ComputeDiceRollForIncidentResponseServices:
    exception
    definition quantity_of_pips_claimed_for_taxable_unicorn_breeding under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 2 }).val) }.out
    consequence equals output of ComputeDiceRollForQuantumEncryptionNYC with { --flag: flag }.out

declaration scope ComputeTaxableDiceRollIncome:
    input flag content list of C
    context quantity_of_pips_claimed_for_taxable_chupacabra_pest_control content integer
    context dice_roll_for_tax_exempt_fairy_tale_royalties content integer
    output out content integer

scope ComputeTaxableDiceRollForEncryptionConsultingIncome:
    exception
    definition dice_roll_for_tax_exempt_fairy_tale_royalties under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 13 }).val) }.out
    consequence equals output of ComputeDiceRollForIndustrialControlSystemSecurityIncome with { --flag: flag }.out

scope ComputeStateAndLocalTaxes:
    definition out equals number_of_dice_used_for_foreign_tax_credit * total_dice_investment_losses

scope ComputeDiceRollForSlotMachinePayouts:
    definition dice_roll_for_tax_exempt_bond_interest equals 139

scope ComputeNYCDiceRollForCloudSecurity:
    definition out equals number_of_dice_for_health_savings_account_contributions - largest_dice_roll_for_foreign_income

scope ComputeNYCCryptocurrencyProfits:
    definition dice_thrown_for_taxable_chimera_circus_profits equals output of ComputeTaxableDiceRollForCriticalInfrastructureProtectionProfits with { --flag: flag }.out

scope ComputeMortgageInterest:
    definition dice_thrown_for_gambling_winnings equals output of ComputeTaxableDiceRollForCriticalInfrastructureProtectionProfits with { --flag: flag }.out

scope ComputeDiceRollForPhysicalSecuritySystemConsultingIncome:
    exception
    definition largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 3 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForNetworkSecurityProfits with { --flag: flag }.out

scope ComputeCybersecurityConsultingFees:
    definition dice_thrown_for_taxable_minotaur_labyrinth_tour_earnings equals output of ComputeDiceRollForFantasySportsPrizes with { --flag: flag }.out

scope ComputeTaxableCardGameProfits:
    definition number_of_dice_thrown_for_taxable_ogre_consulting_fees equals output of ComputeNYCDigitalForensics with { --flag: flag }.out

declaration scope ComputeDiceRollForSecurityComplianceAuditFees:
    input flag content list of C
    context largest_dice_roll_for_alimony_payments content integer
    context dice_roll_for_real_estate_taxes content integer
    output out content integer

declaration scope ComputeHSAContributions:
    input flag content list of C
    context largest_dice_roll_for_depletion_deduction content integer
    context number_of_dice_used_for_tax_exempt_sorcerer_spell_casting_fees content integer
    output out content integer

declaration scope ComputeTaxableDiceRollForOnlineCrapsGameEarnings:
    input flag content list of C
    context quantity_of_pips_claimed_for_taxable_unicorn_breeding content integer
    context quantity_of_pips_deducted_for_mortgage_interest content integer
    context quantity_of_pips_claimed content integer
    context dice_roll_for_income content integer
    output tax content money

declaration scope ComputeTaxableDiceRollForOnlineRouletteWinnings:
    input flag content list of C
    context number_of_dice_for_taxable_unicorn_riding_fees content integer
    context dice_roll_for_tax_exempt_fairy_tale_royalties content integer
    output out content integer

declaration scope ComputeTaxableIncome:
    input flag content list of C
    context dice_roll_for_tax_exempt_mermaid_song_royalties content integer
    context quantity_of_pips_claimed_for_taxable_unicorn_breeding content integer
    context dice_roll_for_volunteer_firefighter_credit content integer
    context number_of_dice_thrown_for_taxable_ogre_consulting_fees content integer
    output tax content money

scope ComputeTaxableCrapsGameEarnings:
    definition largest_dice_roll_for_depletion_deduction equals output of ComputeEnergyEfficiencyCredits with { --flag: flag }.out

declaration scope ComputeTaxableDiceRollForSecurityRiskAssessmentProfits:
    input flag content list of C
    output out content integer

scope ComputeDiceRollForIncidentResponseServices:
    exception
    definition number_of_dice_used_for_tax_credits under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 1 }).val) }.out
    consequence equals output of ComputeDiceForNYCBusinessExpenses with { --flag: flag }.out

scope ComputeGamblingWinnings:
    definition out equals number_of_dice_thrown_for_taxable_kraken_escort_services + number_of_exemptions_rolled

scope ComputeDiceForIoTSecurityConsultingNYC:
    definition dice_roll_for_tax_exempt_mermaid_song_royalties equals output of ComputeDiceRelatedBusinessExpenses with { --flag: flag }.out

scope ComputeDiceForNYCIdentityAccessManagement:
    exception
    definition number_of_dependents_dice_claimed under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 25 }).val) }.out
    consequence equals output of ComputeDiceRollForIndustrialControlSystemSecurityIncome with { --flag: flag }.out

scope ComputeTaxableDiceRollForGameShowWinnings:
    definition largest_dice_roll_for_roth_ira_contributions equals 24421

scope ComputeDiceRollForOnlineRouletteWinnings:
    exception
    definition dice_roll_for_taxable_philosopher_stone_sales under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 12 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForOnlineFantasySportsPrizes with { --flag: flag }.out

scope ComputeHomeOfficeDeduction:
    definition out equals output of Dicer2 with { --flag: flag --index: 21 }.val

declaration scope ComputeDiceRollForSportsBettingGains:
    input flag content list of C
    context dice_roll_for_energy_efficiency_credits content integer
    context largest_dice_roll_for_roth_ira_contributions content integer
    context largest_dice_amount_for_educational_expenses content integer
    context dice_roll_for_tax_exempt_fairy_dust_trade_incomes content integer
    output tax content money

declaration scope ComputeNYCArtificialIntelligenceSecurity:
    input flag content list of C
    context dice_roll_for_tax_exempt_time_machine_rental_income content integer
    context largest_dice_roll_for_foreign_income content integer
    output out content integer

scope ComputeDiceRollForOnlineRouletteWinnings:
    definition tax equals if
    dice_roll_for_dice_related_business_expenses = largest_dice_used_for_capital_gains
    then $0
    else $1000

scope ComputeTaxableGremlinTechnologySales:
    definition dice_roll_for_taxable_gremlin_technology_sales equals output of ComputeEnergyEfficiencyCredits with { --flag: flag }.out

scope ComputeNYCDigitalSecurityIncome:
    definition number_of_dice_used_for_tax_exempt_sorcerer_spell_casting_fees equals output of ComputeStudentLoanInterest with { --flag: flag }.out

declaration scope ComputeNYCDiceRollForSecurityAwareness:
    input flag content list of C
    output out content integer

scope ComputeTaxExemptSorcererSpellCastingFees:
    exception
    definition dice_roll_for_tax_exempt_fairy_dust_trade_incomes under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 2 }).val) }.out
    consequence equals output of ComputeDiceRollForQuantumKeyDistributionConsultingFees with { --flag: flag }.out

scope ComputeDiceRollForSecureSoftwareDevelopmentIncome:
    definition dice_roll_for_tax_exempt_time_machine_rental_income equals quantity_of_pips_for_taxable_gifts * quantity_of_pips_claimed_for_dependent_care_credit

scope ComputeNYCDiceRollForIndustrialControlSystemSecurity:
    definition dice_thrown_for_tax_exempt_time_travel_reimbursements equals 201

scope ComputeDiceForNYCThreatIntelligence:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 17 }).val) }.out
    consequence equals number_of_dice_used_for_tax_credits + number_of_dependents_dice_claimed

scope ComputeDiceForNYCEncryptionConsulting:
    definition dice_thrown_for_taxable_lottery_winnings equals output of ComputeNYCDigitalForensics with { --flag: flag }.out

scope ComputeTaxableDiceRollForNetworkSecurityProfits:
    exception
    definition largest_dice_roll_for_tax_exempt_yeti_tourism_income under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 18 }).val) }.out
    consequence equals output of ComputeTaxableFengShuiDragonAdviceFees with { --flag: flag }.out

scope ComputeInvestmentIncome:
    definition dice_roll_for_tax_exempt_ghost_writing_revenue equals -1232

scope ComputeTaxExemptLuckDragonTreasureLocationServices:
    definition quantity_of_pips_claimed_for_taxable_elf_crafting_profits equals output of ComputeEnergyEfficiencyCredits with { --flag: flag }.out

scope ComputeTaxableRouletteWinnings:
    definition dice_roll_for_tax_exempt_fairy_tale_royalties equals output of ComputeNYCDiceRollForPhysicalSecuritySystem with { --flag: flag }.out

scope ComputeTaxExemptInterest:
    exception
    definition number_of_dice_used_for_tax_exempt_werewolf_security_services under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 31 }).val) }.out
    consequence equals output of ComputeDiceForNYCBusinessExpenses with { --flag: flag }.out

scope ComputeTaxableDiceRollForOnlineFantasySportsPrizes:
    definition dice_roll_for_tax_exempt_time_machine_rental_income equals output of ComputeTaxableDiceRollForArtificialIntelligenceSecurityIncome with { --flag: flag }.out

scope ComputeDiceRollForQuantumKeyDistributionNYC:
    definition number_of_dice_thrown_for_military_service_deductions equals output of ComputeMortgageInterest with { --flag: flag }.out

scope ComputeTaxableDiceRollIncome:
    definition quantity_of_pips_claimed_for_taxable_chupacabra_pest_control equals output of ComputeTaxableDiceRollForOnlineSlotMachinePayouts with { --flag: flag }.out

scope ComputeNYCEndpointSecurityIncome:
    definition quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales equals output of ComputeDiceRollForCyberInsuranceNYC with { --flag: flag }.out

scope ComputeTaxableDiceRollForNetworkSecurityProfits:
    exception
    definition dice_roll_for_taxable_philosopher_stone_sales under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 11 }).val) }.out
    consequence equals output of ComputeDiceForNYCBusinessExpenses with { --flag: flag }.out

scope ComputeTaxableDiceRollForEncryptionConsultingIncome:
    definition largest_dice_roll_for_tax_exempt_sphinx_riddle_solution_fees equals output of ComputeTaxableNymphLandscapingProfits with { --flag: flag }.out

scope ComputeGamblingWinnings:
    exception
    definition number_of_dice_thrown_for_taxable_kraken_escort_services under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 13 }).val) }.out
    consequence equals output of ComputeDiceRollForIdentityAccessManagementIncome with { --flag: flag }.out

scope ComputeDiceRollForNYCStartupInvestment:
    definition out equals dice_thrown_for_homeownership_credits * quantity_of_pips_claimed_for_farm_income

scope ComputeNYCCryptocurrencyProfits:
    definition out equals number_of_dependents_dice + dice_thrown_for_taxable_chimera_circus_profits

scope ComputeTaxableDiceRollForCloudSecurityConsultingFees:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 21 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 0 }.val

declaration scope ComputeTaxableFairyDustTradeIncomes:
    input flag content list of C
    context quantity_of_pips_deducted_for_mortgage_interest content integer
    context largest_dice_amount_exempted content integer
    output out content integer

scope ComputeDiceRollForSecurityTokenOfferingConsultingEarnings:
    exception
    definition dice_roll_for_volunteer_firefighter_credit under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 7 }).val) }.out
    consequence equals output of ComputeNYCDigitalSecurityIncome with { --flag: flag }.out

declaration scope ComputeDiceForNYCBusinessExpenses:
    input flag content list of C
    output out content integer

scope ComputeDiceRollForHorseRacingWinnings:
    definition dice_roll_for_income equals -8089

scope ComputeChildTaxCredit:
    definition dice_result_for_charitable_contributions equals output of ComputeTaxableDiceRollForSecurityTrainingFees with { --flag: flag }.out

scope ComputeTaxCredits:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 25 }).val) }.out
    consequence equals quantity_of_pips_deducted_for_home_office + quantity_of_pips_claimed_for_taxable_chupacabra_pest_control

scope ComputeNYCDiceRollForSecurityAwareness:
    definition out equals output of Dicer2 with { --flag: flag --index: 6 }.val

declaration scope ComputeTaxableDiceRollForCriticalInfrastructureProtectionProfits:
    input flag content list of C
    output out content integer

scope ComputeTaxableGriffinDeliveryServices:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 13 }).val) }.out
    consequence equals largest_dice_roll_for_taxable_pegasus_air_travel_revenues * quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues

scope ComputeTaxableDiceGameRoyalties:
    definition dice_roll_for_tax_exempt_fairy_tale_royalties equals output of ComputeTaxableDiceRollForQuantumEncryptionProfits with { --flag: flag }.out

scope ComputeDiceForIoTSecurityConsultingNYC:
    exception
    definition dice_roll_for_tax_exempt_mermaid_song_royalties under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 8 }).val) }.out
    consequence equals output of ComputeGamblingLosses with { --flag: flag }.out

scope ComputeNYCDiceRollForIndustrialControlSystemSecurity:
    definition number_of_dice_for_taxable_fishing_incomes equals output of ComputeDiceRollForPenetrationTestingEarnings with { --flag: flag }.out

scope ComputeTaxExemptDwarfGemMiningProfits:
    exception
    definition dice_roll_for_tax_exempt_fairy_tale_royalties under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 12 }).val) }.out
    consequence equals output of ComputeEnergyEfficiencyCredits with { --flag: flag }.out

scope ComputeTaxExemptSphinxRiddleSolutionFees:
    exception
    definition number_of_dice_used_for_foreign_tax_credit under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 1 }).val) }.out
    consequence equals 157

scope ComputeNYCDiceRollForBlockchainSecurity:
    exception
    definition quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 0 }).val) }.out
    consequence equals output of ComputeEducationExpenses with { --flag: flag }.out

declaration scope ComputeNYCDiceRollForCloudSecurity:
    input flag content list of C
    context number_of_dice_for_health_savings_account_contributions content integer
    context largest_dice_roll_for_foreign_income content integer
    output out content integer

scope ComputeVehicleExpenses:
    exception
    definition quantity_of_pips_for_tax_exempt_interest under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 15 }).val) }.out
    consequence equals output of ComputeDisasterLosses with { --flag: flag }.out

scope ComputeTaxExemptLeprechaunGifts:
    exception
    definition dice_roll_for_tax_exempt_luck_dragon_treasure_location_services under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 27 }).val) }.out
    consequence equals output of ComputeDiceRollForOnlineGamblingProfits with { --flag: flag }.out

declaration scope ComputeTaxableDiceRollForOnlineSlotMachinePayouts:
    input flag content list of C
    output out content integer

scope ComputeFringeBenefits:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 10 }).val) }.out
    consequence equals quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales - dice_roll_for_dice_related_business_expenses

declaration scope ComputeDiceRollForSecurityPolicyConsultingFees:
    input flag content list of C
    context dice_roll_for_moving_expenses content integer
    context quantity_of_pips_claimed content integer
    output out content integer

declaration scope ComputeDiceRollForCasinoEarnings:
    input flag content list of C
    context number_of_dice_for_taxable_fishing_incomes content integer
    context dice_roll_for_charitable_mileage_deduction content integer
    context dice_roll_for_real_estate_taxes content integer
    context largest_dice_roll_for_depletion_deduction content integer
    output tax content money

scope ComputeNYCDistributedDenialOfService:
    definition out equals number_of_dice_for_taxable_fishing_incomes + largest_dice_roll_for_tax_exempt_leprechaun_gifts

scope ComputeTaxableRouletteWinnings:
    definition quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues equals output of ComputeTaxableDiceRollForCloudSecurityConsultingFees with { --flag: flag }.out

scope ComputeDiceForNYCThreatIntelligence:
    definition number_of_dice_used_for_tax_credits equals output of ComputeTaxableFengShuiDragonAdviceFees with { --flag: flag }.out

scope ComputeDiceRollForBiometricSecurityConsultingEarnings:
    definition dice_roll_for_social_security_benefits equals output of ComputeTaxableDiceRollForCloudSecurityConsultingFees with { --flag: flag }.out

scope ComputeTaxableGremlinTechnologySales:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 17 }).val) }.out
    consequence equals dice_roll_for_taxable_gremlin_technology_sales * dice_roll_for_tax_prep_fees

scope ComputeStandardDeduction:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 31 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 24 }.val

scope ComputeTaxableDiceRollForEndpointSecurityIncome:
    exception
    definition number_of_dice_thrown_for_taxable_ogre_consulting_fees under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 9 }).val) }.out
    consequence equals -426

scope ComputeNYCDiceRollForPhysicalSecuritySystem:
    definition out equals output of Dicer2 with { --flag: flag --index: 16 }.val

scope ComputeDiceRollForSlotMachinePayouts:
    definition number_of_dice_used_for_taxable_robotic_inventions equals output of ComputeStateAndLocalTaxes with { --flag: flag }.out

scope ComputeEarnedIncomeCredit:
    exception
    definition quantity_of_pips_claimed_for_tax_exempt_troll_bridge_toll_revenues under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 7 }).val) }.out
    consequence equals output of ComputeDiceForNYCSecureSoftwareDevelopment with { --flag: flag }.out

scope ComputeNYCVulnerabilityAssessment:
    definition dice_roll_for_tax_exempt_bond_interest equals output of ComputeTaxableNymphLandscapingProfits with { --flag: flag }.out

scope ComputeTaxExemptDwarfGemMiningProfits:
    exception
    definition number_of_dice_for_taxable_unicorn_riding_fees under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 3 }).val) }.out
    consequence equals output of ComputeDiceRollForQuantumEncryptionNYC with { --flag: flag }.out

scope ComputeDiceForNYCSecureSoftwareDevelopment:
    definition out equals number_of_dice_used_for_tax_exempt_sorcerer_spell_casting_fees - number_of_dice_for_taxable_fishing_incomes

scope ComputeTaxCredits:
    exception
    definition quantity_of_pips_claimed_for_taxable_chupacabra_pest_control under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 31 }).val) }.out
    consequence equals output of ComputeDiceRollForThreatIntelligenceServicesIncome with { --flag: flag }.out

scope ComputeDiceRollForOnlineRouletteWinnings:
    definition dice_roll_for_dice_related_business_expenses equals number_of_dice_used_for_vehicle_expenses + dice_roll_for_taxable_philosopher_stone_sales

scope ComputeNYCDiceRollForBiometricSecurity:
    definition largest_dice_used_for_capital_gains equals 22286

scope ComputeNYCDistributedDenialOfService:
    exception
    definition largest_dice_roll_for_tax_exempt_leprechaun_gifts under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 10 }).val) }.out
    consequence equals output of ComputeNYCDiceRollForSecurityAwareness with { --flag: flag }.out

declaration scope ComputeDiceRollForNYCStartupInvestment:
    input flag content list of C
    context dice_thrown_for_homeownership_credits content integer
    context quantity_of_pips_claimed_for_farm_income content integer
    output out content integer

scope ComputeNYCEndpointSecurityIncome:
    exception
    definition quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 14 }).val) }.out
    consequence equals output of ComputeGamblingExciseTax with { --flag: flag }.out

declaration scope ComputeDiceRollForNYCSecurityTokenOffering:
    input flag content list of C
    context largest_dice_amount_for_educational_expenses content integer
    context number_of_dice_used_for_foreign_tax_credit content integer
    context dice_thrown_for_taxable_lottery_winnings content integer
    context largest_dice_roll_for_interest_income content integer
    output tax content money

declaration scope ComputeNYCCalcDiceRollForSecurityRiskAssessment:
    input flag content list of C
    context largest_dice_roll_for_interest_income content integer
    context number_of_dice_for_taxable_unicorn_riding_fees content integer
    output out content integer

scope ComputeDiceRollForSecurityPolicyConsultingFees:
    definition dice_roll_for_moving_expenses equals output of ComputeDiceForNYCBusinessExpenses with { --flag: flag }.out

declaration scope ComputeDiceForNYCThreatIntelligence:
    input flag content list of C
    context number_of_dice_used_for_tax_credits content integer
    context number_of_dependents_dice_claimed content integer
    output out content integer

scope ComputeDependentCareCredit:
    exception
    definition largest_dice_roll_for_taxable_pegasus_air_travel_revenues under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 8 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForEncryptionConsultingIncome with { --flag: flag }.out

scope ComputeTaxExemptLeprechaunGifts:
    definition largest_dice_deduction equals output of ComputeGamblingTaxCredit with { --flag: flag }.out

scope ComputeNYCDiceRollForBiometricSecurity:
    exception
    definition dice_roll_for_tax_exempt_fairy_tale_royalties under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 14 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForOnlinePokerIncome with { --flag: flag }.out

scope ComputeTaxableDiceRollForOnlineHorseRacingWinnings:
    exception
    definition dice_thrown_for_disaster_losses under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 10 }).val) }.out
    consequence equals output of ComputeTaxableGriffinDeliveryServices with { --flag: flag }.out

declaration scope ComputeGamblingAddictionTherapyExpenses:
    input flag content list of C
    context dice_roll_for_tax_prep_fees content integer
    context number_of_dice_used_for_tax_credits content integer
    context quantity_of_pips_claimed_for_taxable_chupacabra_pest_control content integer
    context dice_thrown_for_taxable_ghost_hunting_rewards content integer
    output tax content money

scope ComputeTaxableCryptocurrencySecurityProfits:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 9 }).val) }.out
    consequence equals dice_roll_for_tax_exempt_fairy_dust_trade_incomes * quantity_of_pips_claimed_for_dependent_care_credit

scope ComputeDiceRollForThreatIntelligenceServicesIncome:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 24 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 10 }.val

scope ComputeTaxableGremlinTechnologySales:
    definition out equals dice_roll_for_taxable_gremlin_technology_sales - dice_roll_for_tax_prep_fees

declaration scope ComputeNYCVulnerabilityAssessment:
    input flag content list of C
    context quantity_of_pips_for_dividend_income content integer
    context dice_roll_for_tax_exempt_bond_interest content integer
    output out content integer

scope ComputeTaxableRouletteWinnings:
    exception
    definition dice_roll_for_tax_exempt_fairy_tale_royalties under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 11 }).val) }.out
    consequence equals output of ComputeDiceRollForQuantumEncryptionNYC with { --flag: flag }.out

scope ComputeTaxableDiceRollForSecureCodeReviewProfits:
    definition out equals dice_roll_for_tax_exempt_alien_income + dice_thrown_for_taxable_fringe_benefits

scope ComputeFringeBenefits:
    definition out equals quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales * dice_roll_for_dice_related_business_expenses

scope ComputeTaxExemptMermaidSongRoyalties:
    exception
    definition dice_roll_for_tax_exempt_alien_income under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 25 }).val) }.out
    consequence equals 2516

scope ComputeTaxableTimeMachineRentalIncome:
    exception
    definition largest_dice_used_for_capital_gains under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 25 }).val) }.out
    consequence equals output of ComputeMortgageInterest with { --flag: flag }.out

scope ComputeTaxableDiceRollForSecurityTrainingFees:
    exception
    definition quantity_of_pips_claimed_for_taxable_elf_crafting_profits under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 28 }).val) }.out
    consequence equals output of ComputeNYCDiceRollForPhysicalSecuritySystem with { --flag: flag }.out

scope ComputeTaxablePokerTournamentWinnings:
    definition number_of_dice_used_for_vehicle_expenses equals output of ComputeDiceForNYCBusinessExpenses with { --flag: flag }.out

scope ComputeDiceRollForFantasySportsPrizes:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 19 }).val) }.out
    consequence equals quantity_of_pips_claimed_for_taxable_chupacabra_pest_control + dice_thrown_for_disaster_losses

declaration scope ComputeDiceRollForSecureSoftwareDevelopmentIncome:
    input flag content list of C
    context quantity_of_pips_for_taxable_gifts content integer
    context quantity_of_pips_claimed_for_dependent_care_credit content integer
    context dice_roll_for_tax_exempt_time_machine_rental_income content integer
    context dice_thrown_for_taxable_ghost_hunting_rewards content integer
    output tax content money

scope ComputeTaxExemptSphinxRiddleSolutionFees:
    definition dice_roll_for_volunteer_firefighter_credit equals output of ComputeTaxableDiceRollForFirewallUpgradeIncome with { --flag: flag }.out

scope ComputeAdoptionExpenses:
    exception
    definition dice_thrown_for_taxable_ghost_hunting_rewards under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 27 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForOnlineGameShowWinnings with { --flag: flag }.out

scope ComputeDiceRollForNYCSecurityTokenOffering:
    exception
    definition largest_dice_roll_for_interest_income under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 27 }).val) }.out
    consequence equals -91872

scope ComputeNYCDiceRollForIndustrialControlSystemSecurity:
    exception
    definition dice_roll_for_tax_exempt_bond_interest under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 30 }).val) }.out
    consequence equals number_of_dice_for_taxable_fishing_incomes - largest_dice_amount_exempted

declaration scope ComputeTaxableDiceRollForFirewallUpgradeIncome:
    input flag content list of C
    context number_of_dice_for_earned_income_tax_credit content integer
    context quantity_of_pips_claimed_for_taxable_griffin_delivery_services content integer
    output out content integer

declaration scope ComputeNYCCryptocurrencyProfits:
    input flag content list of C
    context number_of_dependents_dice content integer
    context dice_thrown_for_taxable_chimera_circus_profits content integer
    output out content integer

scope ComputeDiceRollForQuantumKeyDistributionNYC:
    exception
    definition number_of_dice_thrown_for_military_service_deductions under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 22 }).val) }.out
    consequence equals output of ComputeTaxableRouletteWinnings with { --flag: flag }.out

scope ComputeDiceRollForNYCStartupInvestment:
    definition dice_thrown_for_homeownership_credits equals output of ComputeDiceRollForThreatIntelligenceServicesIncome with { --flag: flag }.out

scope ComputeTaxableGriffinDeliveryServices:
    definition largest_dice_roll_for_taxable_pegasus_air_travel_revenues equals output of ComputeDiceRollForOnlineGamblingProfits with { --flag: flag }.out

scope ComputeChildTaxCredit:
    exception
    definition dice_roll_for_tax_exempt_time_machine_rental_income under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 28 }).val) }.out
    consequence equals output of ComputeDiceForNYCSecureSoftwareDevelopment with { --flag: flag }.out

scope ComputeTaxableDiceRollForEncryptionConsultingIncome:
    definition out equals largest_dice_roll_for_tax_exempt_sphinx_riddle_solution_fees * dice_roll_for_tax_exempt_fairy_tale_royalties

scope ComputeTaxableDiceRollForOnlinePokerIncome:
    exception
    definition number_of_dice_thrown_for_taxable_dragonslaying_earnings under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 23 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForCriticalInfrastructureProtectionProfits with { --flag: flag }.out

scope ComputeHSAContributions:
    definition largest_dice_roll_for_depletion_deduction equals output of ComputeDiceRollForQuantumKeyDistributionConsultingFees with { --flag: flag }.out

scope ComputeDiceRollForPhysicalSecuritySystemConsultingIncome:
    definition number_of_dice_used_for_tax_credits equals output of ComputeNYCDiceRollForBlockchainSecurity with { --flag: flag }.out

scope ComputeTaxableElfCraftingProfits:
    definition quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues equals output of ComputeGamblingExciseTax with { --flag: flag }.out

scope ComputeMortgageInterest:
    exception
    definition largest_dice_roll_for_taxable_superhero_salaries under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 22 }).val) }.out
    consequence equals output of ComputeItemizedDeductions with { --flag: flag }.out

scope ComputeDiceForNYCBusinessExpenses:
    definition out equals output of Dicer2 with { --flag: flag --index: 1 }.val

scope ComputeChildTaxCredit:
    exception
    definition dice_roll_for_dice_related_business_expenses under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 13 }).val) }.out
    consequence equals dice_roll_for_tax_exempt_time_machine_rental_income - dice_result_for_charitable_contributions

scope ComputeDiceRollForSlotMachinePayouts:
    definition tax equals if
    dice_thrown_for_taxable_ghost_hunting_rewards = dice_roll_for_tax_exempt_bond_interest
    then $0
    else $1000

scope ComputeTaxableIncome:
    exception
    definition number_of_dice_thrown_for_taxable_ogre_consulting_fees under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 7 }).val) }.out
    consequence equals 7904

declaration scope ComputeTaxableElfCraftingProfits:
    input flag content list of C
    context dice_thrown_for_homeownership_credits content integer
    context quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues content integer
    output out content integer

scope ComputeDiceRollForBlockchainSecurityConsultingEarnings:
    definition out equals output of Dicer2 with { --flag: flag --index: 22 }.val

scope ComputeDiceRollForCyberInsuranceNYC:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 8 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 18 }.val

scope ComputeDiceForIncidentResponseNYC:
    definition total_dice_investment_losses equals output of ComputeStudentLoanInterest with { --flag: flag }.out

scope ComputeTaxableFairyDustTradeIncomes:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 4 }).val) }.out
    consequence equals quantity_of_pips_deducted_for_mortgage_interest * largest_dice_amount_exempted

scope ComputeRetirementContributions:
    definition quantity_of_pips_for_healthcare_deductions equals output of ComputeDiceRollForBiometricSecurityConsultingEarnings with { --flag: flag }.out

scope ComputeDiceForIncidentResponseNYC:
    definition quantity_of_pips_claimed_for_tax_exempt_dwarf_gem_mining_profits equals output of ComputeNYCDigitalForensics with { --flag: flag }.out

scope ComputeGamblingDebtInterest:
    definition quantity_of_pips_deducted_for_mortgage_interest equals 62985001

scope ComputeTaxableBingoPrizes:
    definition out equals number_of_dice_used_for_taxable_robotic_inventions + dice_result_for_charitable_contributions

scope ComputeDiceRollForIncidentResponseServices:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 12 }).val) }.out
    consequence equals quantity_of_pips_claimed_for_taxable_unicorn_breeding + number_of_dice_used_for_tax_credits

scope ComputeNYCDiceRollForBiometricSecurity:
    definition dice_roll_for_moving_expenses equals output of ComputeTaxableDiceRollForVulnerabilityAssessmentProfits with { --flag: flag }.out

declaration scope ComputeTaxableDragonSlayingEarnings:
    input flag content list of C
    context dice_roll_for_taxable_philosopher_stone_sales content integer
    context number_of_dice_thrown_for_retirement_contributions content integer
    context quantity_of_pips_withheld_for_taxes content integer
    context largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings content integer
    output tax content money

declaration scope ComputeTaxableDiceRollForOnlineFantasySportsPrizes:
    input flag content list of C
    context largest_dice_roll_for_tax_exempt_yeti_tourism_income content integer
    context dice_roll_for_tax_exempt_time_machine_rental_income content integer
    output out content integer

scope ComputeTaxableCardGameProfits:
    exception
    definition dice_roll_for_taxable_wizard_consulting_fees under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 2 }).val) }.out
    consequence equals output of ComputeDiceRollForOnlineGamblingProfits with { --flag: flag }.out

scope ComputeDiceRollForBiometricSecurityConsultingEarnings:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 16 }).val) }.out
    consequence equals dice_result_for_charitable_contributions * dice_roll_for_social_security_benefits

declaration scope ComputeTaxCredits:
    input flag content list of C
    context quantity_of_pips_deducted_for_home_office content integer
    context quantity_of_pips_claimed_for_taxable_chupacabra_pest_control content integer
    output out content integer

scope ComputeTaxableGhostWritingRevenue:
    definition dice_thrown_for_homeownership_credits equals output of ComputeNYCDigitalForensics with { --flag: flag }.out

scope ComputeDiceRollForSportsBettingGains:
    exception
    definition largest_dice_roll_for_roth_ira_contributions under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 22 }).val) }.out
    consequence equals output of ComputeNYCEndpointSecurityIncome with { --flag: flag }.out

scope ComputeInvestmentIncome:
    definition dice_roll_for_homebuyer_credit equals output of ComputeDiceRollForBiometricSecurityConsultingEarnings with { --flag: flag }.out

scope ComputeChildTaxCredit:
    definition dice_roll_for_charitable_mileage_deduction equals 1342423

scope ComputeDiceRollForSecurityAuditFees:
    exception
    definition dice_roll_for_homebuyer_credit under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 5 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForOnlinePokerIncome with { --flag: flag }.out

scope ComputeTaxableGhostHuntingRewards:
    definition out equals number_of_dependents_dice * dice_roll_for_tax_exempt_alien_income

scope ComputeTaxableOgreConsultingFees:
    definition number_of_dice_thrown_for_military_service_deductions equals output of ComputeDiceRollForQuantumEncryptionNYC with { --flag: flag }.out

declaration scope ComputeEducationExpenses:
    input flag content list of C
    output out content integer

scope ComputeDiceForIncidentResponseNYC:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 11 }).val) }.out
    consequence equals quantity_of_pips_claimed_for_tax_exempt_dwarf_gem_mining_profits - total_dice_investment_losses

scope ComputeTaxableDiceRollForOnlineGameShowWinnings:
    definition dice_thrown_for_taxable_minotaur_labyrinth_tour_earnings equals output of ComputeTaxableDiceRollForCriticalInfrastructureProtectionProfits with { --flag: flag }.out

scope ComputeTaxableElfCraftingProfits:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 27 }).val) }.out
    consequence equals dice_thrown_for_homeownership_credits + quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues

scope ComputeTaxableFairyDustTradeIncomes:
    definition largest_dice_amount_exempted equals output of ComputeEducationExpenses with { --flag: flag }.out

scope ComputeTaxableDiceRollForFirewallUpgradeIncome:
    definition number_of_dice_for_earned_income_tax_credit equals output of ComputeTaxableDiceRollForDarkWebMonitoringProfits with { --flag: flag }.out

scope ComputeDiceRelatedBusinessExpenses:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 26 }).val) }.out
    consequence equals dice_roll_for_state_and_local_taxes + quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues

scope ComputeDiceRollForSportsBettingGains:
    definition dice_roll_for_tax_exempt_fairy_dust_trade_incomes equals -68

scope ComputeNYCDiceRollForBiometricSecurity:
    exception
    definition quantity_of_pips_claimed_for_taxable_gold_discoveries under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 7 }).val) }.out
    consequence equals dice_roll_for_moving_expenses - dice_roll_for_tax_exempt_fairy_tale_royalties

scope ComputeDiceRollForHorseRacingWinnings:
    definition dice_roll_for_tax_exempt_feng_shui_dragon_advice_fees equals quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales + dice_thrown_for_taxable_lottery_winnings

scope ComputeTaxExemptDwarfGemMiningProfits:
    definition dice_roll_for_tax_exempt_fairy_tale_royalties equals output of ComputeDiceRollForOnlineGamblingProfits with { --flag: flag }.out

scope ComputeAdoptionExpenses:
    definition tax equals if
    dice_roll_for_cryptocurrency_transactions = total_dice_investment_losses
    then $0
    else $1000

scope ComputeDiceRollForSecurityAwarenessTrainingEarnings:
    exception
    definition number_of_dice_allocated_for_student_loan_interest under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 5 }).val) }.out
    consequence equals 6103

scope ComputeAlimonyPayments:
    definition largest_dice_roll_for_taxable_treasure_findings equals output of ComputeDiceRollForIdentityAccessManagementIncome with { --flag: flag }.out

scope ComputeTaxableDiceRollForEndpointSecurityIncome:
    definition tax equals if
    quantity_of_pips_claimed_for_taxable_chupacabra_pest_control = number_of_dice_thrown_for_taxable_ogre_consulting_fees
    then $0
    else $1000

declaration scope ComputeNYCDiceRollForIndustrialControlSystemSecurity:
    input flag content list of C
    context number_of_dice_for_taxable_fishing_incomes content integer
    context largest_dice_amount_exempted content integer
    context dice_roll_for_tax_exempt_bond_interest content integer
    context dice_thrown_for_tax_exempt_time_travel_reimbursements content integer
    output tax content money

scope ComputeDiceForNYCSecureSoftwareDevelopment:
    exception
    definition number_of_dice_for_taxable_fishing_incomes under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 18 }).val) }.out
    consequence equals output of ComputeDiceForNYCBusinessExpenses with { --flag: flag }.out

scope ComputeTaxableOgreConsultingFees:
    definition out equals number_of_dice_thrown_for_military_service_deductions - quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales

scope ComputeTaxableCryptocurrencySecurityProfits:
    definition dice_roll_for_tax_exempt_fairy_dust_trade_incomes equals output of ComputeSelfEmploymentIncome with { --flag: flag }.out

scope ComputeDiceRollForSecureSoftwareDevelopmentIncome:
    definition dice_thrown_for_taxable_ghost_hunting_rewards equals 907919

scope ComputeDiceRollForNYCSecurityTokenOffering:
    definition largest_dice_amount_for_educational_expenses equals output of ComputeTaxableDiceRollForNetworkSecurityProfits with { --flag: flag }.out

scope ComputeNYCGamblingWinnings:
    definition dice_roll_for_taxable_gremlin_technology_sales equals quantity_of_pips_for_taxable_gifts + number_of_dice_thrown_for_taxable_kraken_escort_services

scope ComputeDiceForNYCThreatIntelligence:
    exception
    definition number_of_dependents_dice_claimed under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 22 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForSecurityRiskAssessmentProfits with { --flag: flag }.out

scope ComputeDiceRollForQuantumEncryptionNYC:
    definition out equals output of Dicer2 with { --flag: flag --index: 25 }.val

declaration scope ComputeTaxExemptLeprechaunGifts:
    input flag content list of C
    context dice_roll_for_tax_exempt_luck_dragon_treasure_location_services content integer
    context largest_dice_deduction content integer
    output out content integer

scope ComputeCapitalGains:
    exception
    definition number_of_dice_used_for_vehicle_expenses under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 24 }).val) }.out
    consequence equals output of ComputeDiceRollForCyberInsuranceNYC with { --flag: flag }.out

scope ComputeGamblingLosses:
    definition out equals dice_thrown_for_taxable_ghost_hunting_rewards - quantity_of_pips_deducted_for_home_office

scope ComputeDiceForNYCSecurityTraining:
    exception
    definition number_of_dice_used_for_vehicle_expenses under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 7 }).val) }.out
    consequence equals output of ComputeTaxableOgreConsultingFees with { --flag: flag }.out

scope ComputeDisasterLosses:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 14 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 8 }.val

scope ComputeTaxableDragonSlayingEarnings:
    definition tax equals if
    quantity_of_pips_withheld_for_taxes = largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings
    then $0
    else $1000

scope ComputeInvestmentIncome:
    exception
    definition dice_roll_for_tax_exempt_ghost_writing_revenue under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 8 }).val) }.out
    consequence equals -1231

declaration scope ComputeTaxExemptYetiTourismIncome:
    input flag content list of C
    context quantity_of_pips_claimed_for_taxable_gold_discoveries content integer
    context number_of_dice_thrown_for_disability_deductions content integer
    output out content integer

scope ComputeTaxableDiceRollForEndpointSecurityIncome:
    exception
    definition number_of_dice_for_earned_income_tax_credit under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 7 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForOnlineGameShowWinnings with { --flag: flag }.out

scope ComputeDiceRollForSecurityTokenOfferingConsultingEarnings:
    exception
    definition dice_roll_for_tax_exempt_ghost_writing_revenue under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 0 }).val) }.out
    consequence equals 10535

scope ComputeTaxableDiceRollForOnlineRouletteWinnings:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 21 }).val) }.out
    consequence equals number_of_dice_for_taxable_unicorn_riding_fees - dice_roll_for_tax_exempt_fairy_tale_royalties

scope ComputeVehicleExpenses:
    exception
    definition dice_roll_for_tax_exempt_fairy_dust_trade_incomes under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 5 }).val) }.out
    consequence equals output of ComputeSelfEmploymentIncome with { --flag: flag }.out

scope ComputeTaxableDiceRollForArtificialIntelligenceSecurityIncome:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 14 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 11 }.val

scope ComputeTaxableDiceRollForVulnerabilityAssessmentProfits:
    definition number_of_dice_used_for_taxable_robotic_inventions equals output of ComputeTaxableDiceRollForDarkWebMonitoringProfits with { --flag: flag }.out

scope ComputeDiceRollForOnlineRouletteWinnings:
    definition number_of_dice_used_for_vehicle_expenses equals output of ComputeDiceForNYCMalwareRemoval with { --flag: flag }.out

scope ComputeTaxExemptMermaidSongRoyalties:
    definition largest_dice_roll_for_foreign_income equals quantity_of_pips_deducted_for_historic_rehabilitation_credit * dice_roll_for_tax_exempt_fairy_dust_trade_incomes

scope ComputeDiceRollForSlotMachinePayouts:
    exception
    definition quantity_of_pips_for_healthcare_deductions under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 28 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForMalwareRemovalServices with { --flag: flag }.out

scope ComputeNYCDiceRollForSecurityAwareness:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 0 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 27 }.val

scope ComputeTaxableDiceRollForOnlineSportsBettingGains:
    exception
    definition quantity_of_pips_withheld_for_taxes under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 23 }).val) }.out
    consequence equals output of ComputeDisasterLosses with { --flag: flag }.out

scope ComputeTaxablePokerTournamentWinnings:
    definition quantity_of_pips_claimed_for_taxable_unicorn_breeding equals output of ComputeDisasterLosses with { --flag: flag }.out

scope ComputeTaxableDiceRollForCyberInsuranceConsultationProfits:
    exception
    definition dice_roll_for_tax_exempt_ghost_writing_revenue under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 24 }).val) }.out
    consequence equals output of ComputeTaxableFengShuiDragonAdviceFees with { --flag: flag }.out

declaration scope ComputeTaxableDiceRollForOnlineGameShowWinnings:
    input flag content list of C
    context number_of_dice_used_for_tax_credits content integer
    context dice_thrown_for_taxable_minotaur_labyrinth_tour_earnings content integer
    output out content integer

scope ComputeItemizedDeductions:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 14 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 22 }.val

scope ComputeTaxableIncome:
    definition number_of_dice_thrown_for_taxable_ogre_consulting_fees equals 7903

scope ComputeDiceForNYCBusinessExpenses:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 29 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 29 }.val

scope ComputeDiceForIoTSecurityConsultingNYC:
    definition largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings equals output of ComputeTaxExemptSorcererSpellCastingFees with { --flag: flag }.out

scope ComputeNYCDiceRollForBlockchainSecurity:
    definition quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues equals output of ComputeItemizedDeductions with { --flag: flag }.out

scope ComputeTaxableRouletteWinnings:
    definition out equals dice_roll_for_tax_exempt_fairy_tale_royalties - quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues

scope ComputeAdoptionExpenses:
    exception
    definition largest_dice_roll_for_taxable_pegasus_air_travel_revenues under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 8 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForMalwareRemovalServices with { --flag: flag }.out

declaration scope ComputeDiceForNYCIdentityAccessManagement:
    input flag content list of C
    context dice_roll_for_state_and_local_taxes content integer
    context number_of_dependents_dice_claimed content integer
    output out content integer

declaration scope ComputeTaxableDiceRollForVulnerabilityAssessmentProfits:
    input flag content list of C
    context number_of_dice_used_for_taxable_robotic_inventions content integer
    context number_of_dice_for_health_savings_account_contributions content integer
    output out content integer

scope ComputeTaxableDiceRollForOnlinePokerIncome:
    definition number_of_dice_thrown_for_taxable_dragonslaying_earnings equals output of ComputeHomeOfficeDeduction with { --flag: flag }.out

scope ComputeAdoptionExpenses:
    definition largest_dice_roll_for_taxable_pegasus_air_travel_revenues equals output of ComputeTaxableGremlinTechnologySales with { --flag: flag }.out

scope ComputeNYCTaxableIncome:
    definition number_of_dice_thrown_for_military_service_deductions equals output of ComputeTaxableFengShuiDragonAdviceFees with { --flag: flag }.out

scope ComputeDiceRollForHorseRacingWinnings:
    exception
    definition dice_roll_for_income under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 9 }).val) }.out
    consequence equals -8090

scope ComputeTaxableDiceRollForGameShowWinnings:
    exception
    definition largest_dice_roll_for_taxable_superhero_salaries under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 30 }).val) }.out
    consequence equals number_of_dice_used_for_tax_exempt_sorcerer_spell_casting_fees * dice_thrown_for_taxable_assets

scope ComputeDiceRollForSecurityComplianceAuditFees:
    exception
    definition largest_dice_roll_for_alimony_payments under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 21 }).val) }.out
    consequence equals output of ComputeNYCDigitalForensics with { --flag: flag }.out

scope ComputeInvestmentIncome:
    definition tax equals if
    largest_dice_used_for_adoption_expenses = dice_roll_for_tax_exempt_ghost_writing_revenue
    then $0
    else $1000

scope ComputeDiceRollForSecurityAwarenessTrainingEarnings:
    exception
    definition dice_thrown_for_taxable_chimera_circus_profits under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 3 }).val) }.out
    consequence equals number_of_exemptions_rolled + dice_roll_for_homebuyer_credit

scope ComputeTaxableDiceRollForSecurityTrainingFees:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 7 }).val) }.out
    consequence equals quantity_of_pips_claimed_for_taxable_elf_crafting_profits * number_of_dice_thrown_for_retirement_contributions

scope ComputeNYCDigitalForensics:
    definition out equals output of Dicer2 with { --flag: flag --index: 10 }.val

scope ComputeNYCArtificialIntelligenceSecurity:
    definition largest_dice_roll_for_foreign_income equals output of ComputeDiceRollForQuantumKeyDistributionConsultingFees with { --flag: flag }.out

scope ComputeTaxableCrapsGameEarnings:
    definition out equals quantity_of_pips_for_tax_exempt_interest * largest_dice_roll_for_depletion_deduction

declaration scope ComputeTaxableDiceRollForSecureCodeReviewProfits:
    input flag content list of C
    context dice_roll_for_tax_exempt_alien_income content integer
    context dice_thrown_for_taxable_fringe_benefits content integer
    output out content integer

declaration scope ComputeDiceRollForQuantumEncryptionNYC:
    input flag content list of C
    output out content integer

scope ComputeTaxableDiceRollForOnlineHorseRacingWinnings:
    definition dice_roll_for_moving_expenses equals quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales - dice_thrown_for_disaster_losses

declaration scope ComputeTaxableBingoPrizes:
    input flag content list of C
    context number_of_dice_used_for_taxable_robotic_inventions content integer
    context dice_result_for_charitable_contributions content integer
    output out content integer

scope ComputeBusinessExpenses:
    exception
    definition dice_roll_for_tax_exempt_fairy_dust_trade_incomes under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 11 }).val) }.out
    consequence equals output of ComputeNYCFirewallUpgradeIncome with { --flag: flag }.out

declaration scope ComputeTaxableDiceRollForGameShowWinnings:
    input flag content list of C
    context number_of_dice_used_for_tax_exempt_sorcerer_spell_casting_fees content integer
    context dice_thrown_for_taxable_assets content integer
    context largest_dice_roll_for_taxable_superhero_salaries content integer
    context largest_dice_roll_for_roth_ira_contributions content integer
    output tax content money

scope ComputeTaxableElfCraftingProfits:
    definition out equals dice_thrown_for_homeownership_credits * quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues

scope ComputeDiceRollForSecureSoftwareDevelopmentIncome:
    definition quantity_of_pips_claimed_for_dependent_care_credit equals output of ComputeHealthcareDeductions with { --flag: flag }.out

declaration scope ComputeDiceRollForFantasySportsPrizes:
    input flag content list of C
    context quantity_of_pips_claimed_for_taxable_chupacabra_pest_control content integer
    context dice_thrown_for_disaster_losses content integer
    output out content integer

scope ComputeTaxableDiceRollForDistributedDenialOfServiceProtectionFees:
    definition dice_roll_for_state_and_local_taxes equals output of ComputeDiceRollForThreatIntelligenceServicesIncome with { --flag: flag }.out

scope ComputeDiceRelatedBusinessExpenses:
    definition out equals dice_roll_for_state_and_local_taxes * quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues

declaration scope ComputeChildTaxCredit:
    input flag content list of C
    context dice_roll_for_tax_exempt_time_machine_rental_income content integer
    context dice_result_for_charitable_contributions content integer
    context dice_roll_for_dice_related_business_expenses content integer
    context dice_roll_for_charitable_mileage_deduction content integer
    output tax content money

scope ComputeTaxableDiceRollForFirewallUpgradeIncome:
    exception
    definition number_of_dice_for_earned_income_tax_credit under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 2 }).val) }.out
    consequence equals output of ComputeNYCFirewallUpgradeIncome with { --flag: flag }.out

declaration scope ComputeNYCFirewallUpgradeIncome:
    input flag content list of C
    output out content integer

scope ComputeTaxableDiceRollForCybersecurityStartupInvestmentProfits:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 6 }).val) }.out
    consequence equals largest_dice_roll_for_employer_provided_benefits + dice_roll_for_dice_related_business_expenses

scope ComputeNYCTaxableIncome:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 10 }).val) }.out
    consequence equals number_of_dice_thrown_for_military_service_deductions * largest_dice_roll_for_foreign_income

scope ComputeDiceRollForThreatIntelligenceServicesIncome:
    definition out equals output of Dicer2 with { --flag: flag --index: 9 }.val

scope ComputeDiceRollForLotteryWinnings:
    definition dice_roll_for_tax_exempt_fairy_tale_royalties equals output of ComputeDiceForNYCThreatIntelligence with { --flag: flag }.out

scope ComputeBusinessExpenses:
    definition dice_roll_for_tax_exempt_fairy_dust_trade_incomes equals output of ComputeStandardDeduction with { --flag: flag }.out

declaration scope ComputeTaxableDiceRollForCloudSecurityConsultingFees:
    input flag content list of C
    output out content integer

scope ComputeTaxableDiceRollForGameShowWinnings:
    exception
    definition number_of_dice_used_for_tax_exempt_sorcerer_spell_casting_fees under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 0 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForSecureCodeReviewProfits with { --flag: flag }.out

scope ComputeNYCDiceRollForCloudSecurity:
    exception
    definition number_of_dice_for_health_savings_account_contributions under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 14 }).val) }.out
    consequence equals output of ComputeDiceRollForQuantumEncryptionNYC with { --flag: flag }.out

scope ComputeDiceRelatedBusinessExpenses:
    exception
    definition dice_roll_for_state_and_local_taxes under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 18 }).val) }.out
    consequence equals output of ComputeDiceRollForBlockchainSecurityConsultingEarnings with { --flag: flag }.out

scope ComputeTaxableFairyTaleRoyalties:
    exception
    definition largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 10 }).val) }.out
    consequence equals output of ComputeDiceRollForIncidentResponseServices with { --flag: flag }.out

scope ComputeInvestmentIncome:
    exception
    definition largest_dice_used_for_adoption_expenses under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 18 }).val) }.out
    consequence equals dice_roll_for_homebuyer_credit * quantity_of_pips_for_healthcare_deductions

scope ComputeGamblingDebtInterest:
    exception
    definition number_of_dice_for_taxable_fishing_incomes under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 11 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForFirewallUpgradeIncome with { --flag: flag }.out

declaration scope ComputeDiceForNYCSecureSoftwareDevelopment:
    input flag content list of C
    context number_of_dice_used_for_tax_exempt_sorcerer_spell_casting_fees content integer
    context number_of_dice_for_taxable_fishing_incomes content integer
    output out content integer

scope ComputeTaxableDiceRollForVulnerabilityAssessmentProfits:
    exception
    definition number_of_dice_for_health_savings_account_contributions under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 31 }).val) }.out
    consequence equals output of ComputeDiceRollForBlockchainSecurityConsultingEarnings with { --flag: flag }.out

scope ComputeDiceRollForPhysicalSecuritySystemConsultingIncome:
    definition largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings equals output of ComputeTaxableFairyDustTradeIncomes with { --flag: flag }.out

scope ComputeDiceRollForSecurityComplianceAuditFees:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 10 }).val) }.out
    consequence equals largest_dice_roll_for_alimony_payments + dice_roll_for_real_estate_taxes

scope ComputeVehicleExpenses:
    definition quantity_of_pips_for_tax_exempt_interest equals output of ComputeGamblingExciseTax with { --flag: flag }.out

scope ComputeTaxableElfCraftingProfits:
    exception
    definition quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 12 }).val) }.out
    consequence equals output of ComputeNYCDiceRollForPhysicalSecuritySystem with { --flag: flag }.out

scope ComputeDiceForIncidentResponseNYC:
    definition out equals quantity_of_pips_claimed_for_tax_exempt_dwarf_gem_mining_profits + total_dice_investment_losses

scope ComputeTaxExemptMermaidSongRoyalties:
    definition quantity_of_pips_deducted_for_historic_rehabilitation_credit equals output of ComputeFringeBenefits with { --flag: flag }.out

scope ComputeDiceRollForSecurityAuditFees:
    definition tax equals if
    dice_roll_for_income = number_of_dice_thrown_for_disability_deductions
    then $0
    else $1000

scope ComputeTaxableDiceRollForOnlinePokerIncome:
    definition out equals number_of_dice_thrown_for_taxable_dragonslaying_earnings + largest_dice_amount_exempted

scope ComputeDiceForNYCSecurityTraining:
    exception
    definition quantity_of_pips_deducted_for_mortgage_interest under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 4 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForDistributedDenialOfServiceProtectionFees with { --flag: flag }.out

scope ComputeTaxableDiceRollForGameShowWinnings:
    exception
    definition dice_thrown_for_taxable_assets under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 18 }).val) }.out
    consequence equals output of ComputeNYCDiceRollForCloudSecurity with { --flag: flag }.out

scope ComputeTaxableDiceRollForSecurityTrainingFees:
    definition out equals quantity_of_pips_claimed_for_taxable_elf_crafting_profits - number_of_dice_thrown_for_retirement_contributions

scope ComputeHealthcareDeductions:
    definition quantity_of_pips_for_dividend_income equals output of ComputeDiceRollForBlockchainSecurityConsultingEarnings with { --flag: flag }.out

scope ComputeDiceRollForFantasySportsPrizes:
    definition dice_thrown_for_disaster_losses equals output of ComputeEnergyEfficiencyCredits with { --flag: flag }.out

scope ComputeEnergyEfficiencyCredits:
    definition out equals output of Dicer2 with { --flag: flag --index: 3 }.val

declaration scope ComputeDiceRollForQuantumKeyDistributionConsultingFees:
    input flag content list of C
    output out content integer

scope ComputeDiceRollForSecurityTokenOfferingConsultingEarnings:
    definition number_of_dice_used_for_vehicle_expenses equals dice_roll_for_volunteer_firefighter_credit * number_of_dice_for_taxable_unicorn_riding_fees

scope ComputeTaxableDiceRollForQuantumEncryptionProfits:
    definition largest_dice_roll_for_taxable_nymph_landscaping_profits equals output of ComputeDiceRollForIdentityAccessManagementIncome with { --flag: flag }.out

scope ComputeDiceForNYCEncryptionConsulting:
    exception
    definition dice_roll_for_homebuyer_credit under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 3 }).val) }.out
    consequence equals output of ComputeDiceRollForBlockchainSecurityConsultingEarnings with { --flag: flag }.out

scope ComputeTaxableDiceRollForOnlineRouletteWinnings:
    definition dice_roll_for_tax_exempt_fairy_tale_royalties equals output of ComputeNYCDiceRollForSecurityAwareness with { --flag: flag }.out

scope ComputeTaxExemptDwarfGemMiningProfits:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 21 }).val) }.out
    consequence equals number_of_dice_for_taxable_unicorn_riding_fees * dice_roll_for_tax_exempt_fairy_tale_royalties

scope ComputeDiceRollForSecurityTokenOfferingConsultingEarnings:
    exception
    definition number_of_dice_used_for_vehicle_expenses under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 15 }).val) }.out
    consequence equals dice_roll_for_volunteer_firefighter_credit + number_of_dice_for_taxable_unicorn_riding_fees

scope ComputeTaxableCardGameProfits:
    definition out equals number_of_dice_thrown_for_taxable_ogre_consulting_fees - dice_roll_for_taxable_wizard_consulting_fees

scope ComputeNYCDigitalForensics:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 13 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 17 }.val

scope ComputeDiceRollForNYCStartupInvestment:
    exception
    definition dice_thrown_for_homeownership_credits under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 26 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForOnlineSlotMachinePayouts with { --flag: flag }.out

scope ComputeDiceForNYCIdentityAccessManagement:
    exception
    definition dice_roll_for_state_and_local_taxes under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 15 }).val) }.out
    consequence equals output of ComputeNYCFirewallUpgradeIncome with { --flag: flag }.out

scope ComputeEarnedIncomeCredit:
    definition tax equals if
    largest_dice_amount_for_educational_expenses = number_of_dice_thrown_for_taxable_ogre_consulting_fees
    then $0
    else $1000

scope ComputeHealthcareDeductions:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 27 }).val) }.out
    consequence equals quantity_of_pips_for_dividend_income + largest_dice_roll_for_tax_exempt_leprechaun_gifts

scope ComputeCharitableContributions:
    definition largest_dice_roll_for_employer_provided_benefits equals output of ComputeDiceForNYCBusinessExpenses with { --flag: flag }.out

scope ComputeTaxableIncome:
    definition tax equals if
    dice_roll_for_volunteer_firefighter_credit = number_of_dice_thrown_for_taxable_ogre_consulting_fees
    then $0
    else $1000

scope ComputeDiceRollForOnlineRouletteWinnings:
    definition dice_roll_for_taxable_philosopher_stone_sales equals output of ComputeNYCDigitalSecurityIncome with { --flag: flag }.out

scope ComputeTaxableTimeMachineRentalIncome:
    exception
    definition largest_dice_used_for_adoption_expenses under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 29 }).val) }.out
    consequence equals 227

scope ComputeGamblingAddictionTherapyExpenses:
    exception
    definition number_of_dice_used_for_tax_credits under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 6 }).val) }.out
    consequence equals output of ComputeTaxableCryptocurrencySecurityProfits with { --flag: flag }.out

scope ComputeTaxableDiceRollForFirewallUpgradeIncome:
    definition out equals number_of_dice_for_earned_income_tax_credit + quantity_of_pips_claimed_for_taxable_griffin_delivery_services

declaration scope ComputeMovingExpenses:
    input flag content list of C
    context largest_dice_roll_for_depletion_deduction content integer
    context dice_roll_for_real_estate_taxes content integer
    output out content integer

scope ComputeHSAContributions:
    definition out equals largest_dice_roll_for_depletion_deduction * number_of_dice_used_for_tax_exempt_sorcerer_spell_casting_fees

declaration scope ComputeGamblingExciseTax:
    input flag content list of C
    output out content integer

scope ComputeTaxExemptMermaidSongRoyalties:
    definition dice_roll_for_tax_exempt_fairy_dust_trade_incomes equals output of ComputeDiceRollForBiometricSecurityConsultingEarnings with { --flag: flag }.out

scope ComputeTaxExemptSphinxRiddleSolutionFees:
    definition tax equals if
    largest_dice_roll_for_taxable_superhero_salaries = number_of_dice_used_for_foreign_tax_credit
    then $0
    else $1000

scope ComputeTaxableBingoPrizes:
    definition number_of_dice_used_for_taxable_robotic_inventions equals output of ComputeSelfEmploymentIncome with { --flag: flag }.out

scope ComputeTaxExemptMermaidSongRoyalties:
    definition tax equals if
    largest_dice_roll_for_foreign_income = dice_roll_for_tax_exempt_alien_income
    then $0
    else $1000

scope ComputeTaxableFairyTaleRoyalties:
    definition largest_dice_roll_for_taxable_pegasus_air_travel_revenues equals largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings - quantity_of_pips_claimed_for_taxable_unicorn_breeding

scope ComputeDiceRollForPhysicalSecuritySystemConsultingIncome:
    definition dice_thrown_for_disaster_losses equals largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings + number_of_dice_used_for_tax_credits

scope ComputeDiceRollForFantasySportsPrizes:
    definition out equals quantity_of_pips_claimed_for_taxable_chupacabra_pest_control - dice_thrown_for_disaster_losses

scope ComputeDiceRollForInternetOfThingsSecurityConsultingFees:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 12 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 19 }.val

declaration scope ComputeCybersecurityConsultingFees:
    input flag content list of C
    context dice_thrown_for_taxable_minotaur_labyrinth_tour_earnings content integer
    context dice_roll_for_social_security_benefits content integer
    context quantity_of_pips_claimed_for_taxable_chupacabra_pest_control content integer
    context number_of_dice_thrown_for_taxable_kraken_escort_services content integer
    output tax content money

scope ComputeDiceRollForBiometricSecurityConsultingEarnings:
    exception
    definition dice_roll_for_social_security_benefits under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 28 }).val) }.out
    consequence equals output of ComputeNYCFirewallUpgradeIncome with { --flag: flag }.out

scope ComputeDiceForNYCSecureSoftwareDevelopment:
    exception
    definition number_of_dice_used_for_tax_exempt_sorcerer_spell_casting_fees under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 23 }).val) }.out
    consequence equals output of ComputeNYCDiceRollForSecurityAwareness with { --flag: flag }.out

scope ComputeTaxableDragonSlayingEarnings:
    definition number_of_dice_thrown_for_retirement_contributions equals output of ComputeDiceForSecurityComplianceAuditNYC with { --flag: flag }.out

scope ComputeTaxableDiceRollForEndpointSecurityIncome:
    definition number_of_dice_for_earned_income_tax_credit equals output of ComputeTaxExemptLeprechaunGifts with { --flag: flag }.out

scope ComputeTaxableDiceRollForCyberInsuranceConsultationProfits:
    definition out equals dice_roll_for_tax_exempt_mermaid_song_royalties - dice_roll_for_tax_exempt_ghost_writing_revenue

scope ComputeChildTaxCredit:
    exception
    definition dice_roll_for_charitable_mileage_deduction under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 26 }).val) }.out
    consequence equals 1342422

scope ComputeTaxableTimeMachineRentalIncome:
    definition largest_dice_used_for_capital_gains equals output of ComputeDiceForSecurityAuditNYC with { --flag: flag }.out

scope ComputeTaxableOgreConsultingFees:
    definition quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales equals output of ComputeDiceRollForInternetOfThingsSecurityConsultingFees with { --flag: flag }.out

scope ComputeTaxableDragonSlayingEarnings:
    definition largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings equals 18453

scope ComputeNYCCalcDiceRollForSecurityRiskAssessment:
    exception
    definition largest_dice_roll_for_interest_income under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 11 }).val) }.out
    consequence equals output of ComputeDiceRollForCyberInsuranceNYC with { --flag: flag }.out

scope ComputeDiceForNYCEncryptionConsulting:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 26 }).val) }.out
    consequence equals dice_roll_for_homebuyer_credit + dice_thrown_for_taxable_lottery_winnings

scope ComputeMovingExpenses:
    exception
    definition dice_roll_for_real_estate_taxes under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 23 }).val) }.out
    consequence equals output of ComputeDiceRollForCyberInsuranceNYC with { --flag: flag }.out

scope ComputeNYCGamblingWinnings:
    exception
    definition number_of_dice_thrown_for_taxable_kraken_escort_services under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 16 }).val) }.out
    consequence equals output of ComputeTaxableBingoPrizes with { --flag: flag }.out

declaration scope ComputeInvestmentIncome:
    input flag content list of C
    context dice_roll_for_homebuyer_credit content integer
    context quantity_of_pips_for_healthcare_deductions content integer
    context largest_dice_used_for_adoption_expenses content integer
    context dice_roll_for_tax_exempt_ghost_writing_revenue content integer
    output tax content money

scope ComputeDiceRollForIdentityAccessManagementIncome:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 11 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 7 }.val

scope ComputeDiceRollForQuantumKeyDistributionNYC:
    definition dice_roll_for_tax_exempt_alien_income equals output of ComputeStateAndLocalTaxes with { --flag: flag }.out

scope ComputeDiceForIoTSecurityConsultingNYC:
    exception
    definition quantity_of_pips_claimed_for_taxable_griffin_delivery_services under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 1 }).val) }.out
    consequence equals -11594

scope ComputeTaxExemptSorcererSpellCastingFees:
    definition dice_roll_for_business_expenses equals output of ComputeDiceRollForCyberInsuranceNYC with { --flag: flag }.out

scope ComputeDiceRollForIncidentResponseServices:
    definition number_of_dice_used_for_tax_credits equals output of ComputeGamblingExciseTax with { --flag: flag }.out

scope ComputeNYCGamblingWinnings:
    definition number_of_dice_thrown_for_taxable_kraken_escort_services equals output of ComputeTaxExemptYetiTourismIncome with { --flag: flag }.out

scope ComputeTaxableFairyDustTradeIncomes:
    definition quantity_of_pips_deducted_for_mortgage_interest equals output of ComputeDiceRollForIdentityAccessManagementIncome with { --flag: flag }.out

scope ComputeTaxableDiceRollForOnlineHorseRacingWinnings:
    exception
    definition quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 9 }).val) }.out
    consequence equals output of ComputeTaxableCryptocurrencySecurityProfits with { --flag: flag }.out

scope FlagTax:
    definition compute_dice_for_n_y_c_security_training.flag equals flag
    definition compute_tax_exempt_mermaid_song_royalties.flag equals flag
    definition compute_retirement_contributions.flag equals flag
    definition compute_cybersecurity_consulting_fees.flag equals flag
    definition compute_dice_roll_for_sports_betting_gains.flag equals flag
    definition compute_gambling_debt_interest.flag equals flag
    definition compute_taxable_dice_roll_for_endpoint_security_income.flag equals flag
    definition compute_taxable_income.flag equals flag
    definition compute_adoption_expenses.flag equals flag
    definition compute_taxable_dice_roll_for_hacker_bounty_rewards.flag equals flag
    definition compute_dice_roll_for_secure_software_development_income.flag equals flag
    definition compute_dice_for_io_t_security_consulting_n_y_c.flag equals flag
    definition compute_n_y_c_dice_roll_for_industrial_control_system_security.flag equals flag
    definition compute_dice_roll_for_quantum_key_distribution_n_y_c.flag equals flag
    definition compute_dice_roll_for_lottery_winnings.flag equals flag
    definition compute_dice_roll_for_security_awareness_training_earnings.flag equals flag
    definition compute_dice_roll_for_online_roulette_winnings.flag equals flag
    definition compute_dice_roll_for_slot_machine_payouts.flag equals flag
    definition compute_taxable_dice_game_royalties.flag equals flag
    definition compute_dice_roll_for_physical_security_system_consulting_income.flag equals flag
    definition compute_taxable_dragon_slaying_earnings.flag equals flag
    definition compute_dice_roll_for_casino_earnings.flag equals flag
    definition compute_gambling_addiction_therapy_expenses.flag equals flag
    definition compute_dice_roll_for_n_y_c_security_token_offering.flag equals flag
    definition compute_earned_income_credit.flag equals flag
    definition compute_taxable_dice_roll_for_online_craps_game_earnings.flag equals flag
    definition compute_n_y_c_dice_roll_for_biometric_security.flag equals flag
    definition compute_n_y_c_gambling_winnings.flag equals flag
    definition compute_taxable_fairy_tale_royalties.flag equals flag
    definition compute_taxable_dice_roll_for_online_horse_racing_winnings.flag equals flag
    definition compute_dice_roll_for_horse_racing_winnings.flag equals flag
    definition compute_dependent_care_credit.flag equals flag
    definition compute_n_y_c_autonomous_vehicle_security.flag equals flag
    definition compute_child_tax_credit.flag equals flag
    definition compute_taxable_time_machine_rental_income.flag equals flag
    definition compute_investment_income.flag equals flag
    definition compute_dice_roll_for_security_token_offering_consulting_earnings.flag equals flag
    definition compute_taxable_dice_roll_for_game_show_winnings.flag equals flag
    definition compute_dice_roll_for_security_audit_fees.flag equals flag
    definition compute_tax_exempt_sphinx_riddle_solution_fees.flag equals flag
    definition tax equals compute_dice_for_n_y_c_security_training.tax + compute_tax_exempt_mermaid_song_royalties.tax + compute_retirement_contributions.tax + compute_cybersecurity_consulting_fees.tax + compute_dice_roll_for_sports_betting_gains.tax + compute_gambling_debt_interest.tax + compute_taxable_dice_roll_for_endpoint_security_income.tax + compute_taxable_income.tax + compute_adoption_expenses.tax + compute_taxable_dice_roll_for_hacker_bounty_rewards.tax + compute_dice_roll_for_secure_software_development_income.tax + compute_dice_for_io_t_security_consulting_n_y_c.tax + compute_n_y_c_dice_roll_for_industrial_control_system_security.tax + compute_dice_roll_for_quantum_key_distribution_n_y_c.tax + compute_dice_roll_for_lottery_winnings.tax + compute_dice_roll_for_security_awareness_training_earnings.tax + compute_dice_roll_for_online_roulette_winnings.tax + compute_dice_roll_for_slot_machine_payouts.tax + compute_taxable_dice_game_royalties.tax + compute_dice_roll_for_physical_security_system_consulting_income.tax + compute_taxable_dragon_slaying_earnings.tax + compute_dice_roll_for_casino_earnings.tax + compute_gambling_addiction_therapy_expenses.tax + compute_dice_roll_for_n_y_c_security_token_offering.tax + compute_earned_income_credit.tax + compute_taxable_dice_roll_for_online_craps_game_earnings.tax + compute_n_y_c_dice_roll_for_biometric_security.tax + compute_n_y_c_gambling_winnings.tax + compute_taxable_fairy_tale_royalties.tax + compute_taxable_dice_roll_for_online_horse_racing_winnings.tax + compute_dice_roll_for_horse_racing_winnings.tax + compute_dependent_care_credit.tax + compute_n_y_c_autonomous_vehicle_security.tax + compute_child_tax_credit.tax + compute_taxable_time_machine_rental_income.tax + compute_investment_income.tax + compute_dice_roll_for_security_token_offering_consulting_earnings.tax + compute_taxable_dice_roll_for_game_show_winnings.tax + compute_dice_roll_for_security_audit_fees.tax + compute_tax_exempt_sphinx_riddle_solution_fees.tax

scope ComputeCapitalGains:
    exception
    definition largest_dice_amount_exempted under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 22 }).val) }.out
    consequence equals output of ComputeDiceRollForCyberInsuranceNYC with { --flag: flag }.out

scope ComputeCapitalGains:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 2 }).val) }.out
    consequence equals largest_dice_amount_exempted + number_of_dice_used_for_vehicle_expenses

scope ComputeDiceRollForLotteryWinnings:
    exception
    definition quantity_of_pips_for_taxable_gifts under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals dice_roll_for_tax_exempt_fairy_tale_royalties * dice_roll_for_tax_exempt_feng_shui_dragon_advice_fees

scope ComputeGamblingTaxCredit:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 7 }.val

scope ComputeRetirementContributions:
    exception
    definition dice_roll_for_tax_exempt_alien_income under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 8 }).val) }.out
    consequence equals output of ComputeTaxExemptLuckDragonTreasureLocationServices with { --flag: flag }.out

declaration scope ComputeDiceRollForSecurityAwarenessTrainingEarnings:
    input flag content list of C
    context number_of_exemptions_rolled content integer
    context dice_roll_for_homebuyer_credit content integer
    context dice_thrown_for_taxable_chimera_circus_profits content integer
    context number_of_dice_allocated_for_student_loan_interest content integer
    output tax content money

scope ComputeDiceRollForHorseRacingWinnings:
    exception
    definition quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 12 }).val) }.out
    consequence equals output of ComputeNYCEndpointSecurityIncome with { --flag: flag }.out

scope ComputeTaxableDiceRollForGameShowWinnings:
    definition tax equals if
    largest_dice_roll_for_taxable_superhero_salaries = largest_dice_roll_for_roth_ira_contributions
    then $0
    else $1000

scope ComputeTaxableGhostHuntingRewards:
    definition dice_roll_for_tax_exempt_alien_income equals output of ComputeNYCDigitalForensics with { --flag: flag }.out

scope ComputeGamblingAddictionTherapyExpenses:
    exception
    definition quantity_of_pips_claimed_for_taxable_chupacabra_pest_control under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 9 }).val) }.out
    consequence equals dice_roll_for_tax_prep_fees + number_of_dice_used_for_tax_credits

scope ComputeNYCNetworkSecurityProfits:
    exception
    definition dice_roll_for_income under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 3 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForCloudSecurityConsultingFees with { --flag: flag }.out

scope ComputeEducationExpenses:
    definition out equals output of Dicer2 with { --flag: flag --index: 31 }.val

scope ComputeTaxableDiceRollForDarkWebMonitoringProfits:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 17 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 9 }.val

scope ComputeMortgageInterest:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 11 }).val) }.out
    consequence equals largest_dice_roll_for_taxable_superhero_salaries * dice_thrown_for_gambling_winnings

scope ComputeTaxableDiceRollForNetworkSecurityProfits:
    definition dice_roll_for_taxable_philosopher_stone_sales equals output of ComputeDiceRollForIndustrialControlSystemSecurityIncome with { --flag: flag }.out

scope ComputeTaxableDiceRollForCyberInsuranceConsultationProfits:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals dice_roll_for_tax_exempt_mermaid_song_royalties * dice_roll_for_tax_exempt_ghost_writing_revenue

scope ComputeDiceRollForCasinoEarnings:
    exception
    definition dice_roll_for_charitable_mileage_deduction under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 31 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForSecureCodeReviewProfits with { --flag: flag }.out

scope ComputeDiceForNYCMalwareRemoval:
    exception
    definition dice_roll_for_dice_related_business_expenses under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 23 }).val) }.out
    consequence equals output of ComputeEnergyEfficiencyCredits with { --flag: flag }.out

scope ComputeTaxableDiceRollForVulnerabilityAssessmentProfits:
    definition out equals number_of_dice_used_for_taxable_robotic_inventions + number_of_dice_for_health_savings_account_contributions

scope ComputeTaxableTimeMachineRentalIncome:
    definition tax equals if
    dice_roll_for_tax_exempt_mermaid_song_royalties = largest_dice_used_for_adoption_expenses
    then $0
    else $1000

scope ComputeTaxableDiceRollForOnlineGameShowWinnings:
    exception
    definition dice_thrown_for_taxable_minotaur_labyrinth_tour_earnings under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 30 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForOnlineSlotMachinePayouts with { --flag: flag }.out

declaration scope ComputeGamblingLosses:
    input flag content list of C
    context dice_thrown_for_taxable_ghost_hunting_rewards content integer
    context quantity_of_pips_deducted_for_home_office content integer
    output out content integer

scope ComputeDiceRollForSlotMachinePayouts:
    exception
    definition number_of_dice_used_for_taxable_robotic_inventions under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 19 }).val) }.out
    consequence equals output of ComputeHSAContributions with { --flag: flag }.out

scope ComputeStandardDeduction:
    definition out equals output of Dicer2 with { --flag: flag --index: 2 }.val

scope ComputeTaxableDiceRollForOnlineCrapsGameEarnings:
    exception
    definition quantity_of_pips_deducted_for_mortgage_interest under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 12 }).val) }.out
    consequence equals output of ComputeHSAContributions with { --flag: flag }.out

scope ComputeTaxableFairyTaleRoyalties:
    definition quantity_of_pips_claimed_for_taxable_chupacabra_pest_control equals 1263600

scope ComputeTaxablePokerTournamentWinnings:
    exception
    definition number_of_dice_used_for_vehicle_expenses under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 16 }).val) }.out
    consequence equals output of ComputeItemizedDeductions with { --flag: flag }.out

scope ComputeBusinessExpenses:
    exception
    definition number_of_dice_thrown_for_taxable_dragonslaying_earnings under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 26 }).val) }.out
    consequence equals output of ComputeNYCDiceRollForSecurityAwareness with { --flag: flag }.out

scope ComputeNYCDiceRollForCloudSecurity:
    exception
    definition largest_dice_roll_for_foreign_income under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 31 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForArtificialIntelligenceSecurityIncome with { --flag: flag }.out

scope ComputeTaxableDiceRollForVulnerabilityAssessmentProfits:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 17 }).val) }.out
    consequence equals number_of_dice_used_for_taxable_robotic_inventions - number_of_dice_for_health_savings_account_contributions

scope ComputeChildTaxCredit:
    definition tax equals if
    dice_roll_for_dice_related_business_expenses = dice_roll_for_charitable_mileage_deduction
    then $0
    else $1000

declaration scope ComputeTaxableDiceRollForCyberInsuranceConsultationProfits:
    input flag content list of C
    context dice_roll_for_tax_exempt_mermaid_song_royalties content integer
    context dice_roll_for_tax_exempt_ghost_writing_revenue content integer
    output out content integer

scope ComputeTaxExemptLuckDragonTreasureLocationServices:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 8 }).val) }.out
    consequence equals number_of_dice_for_health_savings_account_contributions * quantity_of_pips_claimed_for_taxable_elf_crafting_profits

scope ComputeDiceForNYCSecurityTraining:
    definition quantity_of_pips_deducted_for_mortgage_interest equals output of ComputeTaxableDiceRollForOnlineRouletteWinnings with { --flag: flag }.out

scope ComputeDependentCareCredit:
    definition largest_dice_roll_for_taxable_pegasus_air_travel_revenues equals output of ComputeTaxExemptSorcererSpellCastingFees with { --flag: flag }.out

scope ComputeHealthcareDeductions:
    definition out equals quantity_of_pips_for_dividend_income - largest_dice_roll_for_tax_exempt_leprechaun_gifts

scope ComputeGamblingAddictionTherapyExpenses:
    definition dice_thrown_for_taxable_ghost_hunting_rewards equals 12219

scope ComputeDiceRollForBiometricSecurityConsultingEarnings:
    exception
    definition dice_result_for_charitable_contributions under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 3 }).val) }.out
    consequence equals output of ComputeNYCDigitalForensics with { --flag: flag }.out

scope ComputeDiceRollForSportsBettingGains:
    definition dice_roll_for_energy_efficiency_credits equals output of ComputeTaxableDiceRollForOnlineRouletteWinnings with { --flag: flag }.out

scope ComputeDiceForNYCSecureSoftwareDevelopment:
    definition number_of_dice_used_for_tax_exempt_sorcerer_spell_casting_fees equals output of ComputeNYCFirewallUpgradeIncome with { --flag: flag }.out

scope ComputeItemizedDeductions:
    definition out equals output of Dicer2 with { --flag: flag --index: 15 }.val

declaration scope ComputeDiceForIoTSecurityConsultingNYC:
    input flag content list of C
    context dice_roll_for_tax_exempt_mermaid_song_royalties content integer
    context largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings content integer
    context largest_dice_roll_for_taxable_superhero_salaries content integer
    context quantity_of_pips_claimed_for_taxable_griffin_delivery_services content integer
    output tax content money

scope ComputeDiceRollForNYCSecurityTokenOffering:
    definition number_of_dice_used_for_foreign_tax_credit equals output of ComputeTaxExemptYetiTourismIncome with { --flag: flag }.out

scope ComputeBusinessExpenses:
    definition number_of_dice_thrown_for_taxable_dragonslaying_earnings equals output of ComputeStudentLoanInterest with { --flag: flag }.out

scope ComputeTaxableDiceRollForMalwareRemovalServices:
    definition out equals number_of_dice_thrown_for_taxable_dragonslaying_earnings * dice_roll_for_tax_prep_fees

scope ComputeDependentCareCredit:
    definition tax equals if
    number_of_dice_allocated_for_student_loan_interest = number_of_dice_for_health_savings_account_contributions
    then $0
    else $1000

scope ComputeTaxableDiceRollForGameShowWinnings:
    definition dice_thrown_for_taxable_assets equals output of ComputeCharitableContributions with { --flag: flag }.out

scope ComputeRetirementContributions:
    definition dice_roll_for_tax_exempt_alien_income equals output of ComputeTaxableDiceRollIncome with { --flag: flag }.out

declaration scope ComputeHealthcareDeductions:
    input flag content list of C
    context quantity_of_pips_for_dividend_income content integer
    context largest_dice_roll_for_tax_exempt_leprechaun_gifts content integer
    output out content integer

scope ComputeDiceForNYCSecurityTraining:
    definition tax equals if
    dice_roll_for_tax_exempt_bond_interest = quantity_of_pips_deducted_for_home_office
    then $0
    else $1000

scope ComputeTaxableDiceRollForOnlineFantasySportsPrizes:
    definition out equals largest_dice_roll_for_tax_exempt_yeti_tourism_income - dice_roll_for_tax_exempt_time_machine_rental_income

scope ComputeNYCGamblingWinnings:
    exception
    definition quantity_of_pips_for_taxable_gifts under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 12 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForEncryptionConsultingIncome with { --flag: flag }.out

scope ComputeTaxableDiceRollForDistributedDenialOfServiceProtectionFees:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 31 }).val) }.out
    consequence equals largest_dice_roll_for_taxable_superhero_salaries * dice_roll_for_state_and_local_taxes

scope ComputeDiceForNYCIdentityAccessManagement:
    definition number_of_dependents_dice_claimed equals output of ComputeStandardDeduction with { --flag: flag }.out

scope ComputeDiceRollForPhysicalSecuritySystemConsultingIncome:
    definition dice_roll_for_taxable_gremlin_technology_sales equals -29071

scope ComputeGamblingAddictionTherapyExpenses:
    exception
    definition dice_roll_for_tax_prep_fees under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 9 }).val) }.out
    consequence equals output of ComputeTaxableElfCraftingProfits with { --flag: flag }.out

scope ComputeHealthcareDeductions:
    exception
    definition quantity_of_pips_for_dividend_income under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 16 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForCloudSecurityConsultingFees with { --flag: flag }.out

scope ComputeDependentCareCredit:
    exception
    definition quantity_of_pips_deducted_for_historic_rehabilitation_credit under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 8 }).val) }.out
    consequence equals output of ComputeTaxExemptInterest with { --flag: flag }.out

scope ComputeNYCGamblingWinnings:
    definition quantity_of_pips_for_taxable_gifts equals output of ComputeVehicleExpenses with { --flag: flag }.out

scope ComputeNYCDiceRollForIndustrialControlSystemSecurity:
    definition dice_roll_for_tax_exempt_bond_interest equals number_of_dice_for_taxable_fishing_incomes + largest_dice_amount_exempted

scope ComputeTaxableGhostHuntingRewards:
    exception
    definition dice_roll_for_tax_exempt_alien_income under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 16 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForCloudSecurityConsultingFees with { --flag: flag }.out

scope ComputeTaxableDiceRollForOnlineSportsBettingGains:
    definition out equals dice_roll_for_cryptocurrency_transactions - quantity_of_pips_withheld_for_taxes

declaration scope ComputeForeignIncome:
    input flag content list of C
    context dice_roll_for_tax_exempt_luck_dragon_treasure_location_services content integer
    context dice_thrown_for_taxable_intergalactic_trade_profits content integer
    output out content integer

declaration scope ComputeGamblingDebtInterest:
    input flag content list of C
    context number_of_dice_for_taxable_fishing_incomes content integer
    context dice_roll_for_charitable_mileage_deduction content integer
    context dice_roll_for_tax_exempt_time_machine_rental_income content integer
    context quantity_of_pips_deducted_for_mortgage_interest content integer
    output tax content money

scope ComputeTaxExemptLeprechaunGifts:
    definition dice_roll_for_tax_exempt_luck_dragon_treasure_location_services equals output of ComputeNYCDiceRollForPhysicalSecuritySystem with { --flag: flag }.out

scope ComputeGamblingWinnings:
    definition number_of_exemptions_rolled equals output of ComputeGamblingTaxCredit with { --flag: flag }.out

declaration scope ComputeEnergyEfficiencyCredits:
    input flag content list of C
    output out content integer

declaration scope ComputeDiceRollForHorseRacingWinnings:
    input flag content list of C
    context quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales content integer
    context dice_thrown_for_taxable_lottery_winnings content integer
    context dice_roll_for_tax_exempt_feng_shui_dragon_advice_fees content integer
    context dice_roll_for_income content integer
    output tax content money

scope ComputeTaxExemptDwarfGemMiningProfits:
    definition number_of_dice_for_taxable_unicorn_riding_fees equals output of ComputeTaxableDiceRollForDarkWebMonitoringProfits with { --flag: flag }.out

scope ComputeTaxExemptLeprechaunGifts:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals dice_roll_for_tax_exempt_luck_dragon_treasure_location_services * largest_dice_deduction

scope ComputeTaxExemptInterest:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 15 }).val) }.out
    consequence equals number_of_dice_used_for_tax_exempt_werewolf_security_services * dice_roll_for_business_expenses

scope ComputeDiceRollForSecureSoftwareDevelopmentIncome:
    exception
    definition dice_roll_for_tax_exempt_time_machine_rental_income under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 28 }).val) }.out
    consequence equals quantity_of_pips_for_taxable_gifts - quantity_of_pips_claimed_for_dependent_care_credit

scope ComputeTaxableDiceRollForCyberInsuranceConsultationProfits:
    exception
    definition dice_roll_for_tax_exempt_mermaid_song_royalties under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 7 }).val) }.out
    consequence equals output of ComputeDisasterLosses with { --flag: flag }.out

scope ComputeDiceRollForFantasySportsPrizes:
    exception
    definition quantity_of_pips_claimed_for_taxable_chupacabra_pest_control under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 24 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForOnlineSlotMachinePayouts with { --flag: flag }.out

declaration scope ComputeDiceRollForSecurityTokenOfferingConsultingEarnings:
    input flag content list of C
    context dice_roll_for_volunteer_firefighter_credit content integer
    context number_of_dice_for_taxable_unicorn_riding_fees content integer
    context number_of_dice_used_for_vehicle_expenses content integer
    context dice_roll_for_tax_exempt_ghost_writing_revenue content integer
    output tax content money

scope ComputeHealthcareDeductions:
    exception
    definition largest_dice_roll_for_tax_exempt_leprechaun_gifts under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals output of ComputeDiceRollForIdentityAccessManagementIncome with { --flag: flag }.out

scope ComputeDiceRollForQuantumKeyDistributionConsultingFees:
    definition out equals output of Dicer2 with { --flag: flag --index: 28 }.val

scope ComputeTaxableDiceRollForCybersecurityStartupInvestmentProfits:
    definition out equals largest_dice_roll_for_employer_provided_benefits - dice_roll_for_dice_related_business_expenses

scope ComputeForeignIncome:
    definition out equals dice_roll_for_tax_exempt_luck_dragon_treasure_location_services * dice_thrown_for_taxable_intergalactic_trade_profits

scope ComputeTaxableDiceGameRoyalties:
    exception
    definition number_of_dice_thrown_for_military_service_deductions under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 2 }).val) }.out
    consequence equals output of ComputeNYCDiceRollForCloudSecurity with { --flag: flag }.out

scope ComputeDiceForNYCSecurityTraining:
    exception
    definition dice_roll_for_tax_exempt_bond_interest under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 17 }).val) }.out
    consequence equals number_of_dice_used_for_vehicle_expenses - quantity_of_pips_deducted_for_mortgage_interest

scope ComputeRetirementContributions:
    exception
    definition dice_roll_for_homebuyer_credit under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 24 }).val) }.out
    consequence equals dice_roll_for_tax_exempt_alien_income - quantity_of_pips_for_healthcare_deductions

scope ComputeTaxableFairyTaleRoyalties:
    definition tax equals if
    largest_dice_roll_for_taxable_pegasus_air_travel_revenues = quantity_of_pips_claimed_for_taxable_chupacabra_pest_control
    then $0
    else $1000

scope ComputeDiceForNYCIdentityAccessManagement:
    definition dice_roll_for_state_and_local_taxes equals output of ComputeDiceRollForIdentityAccessManagementIncome with { --flag: flag }.out

scope ComputeTaxableCrapsGameEarnings:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals quantity_of_pips_for_tax_exempt_interest + largest_dice_roll_for_depletion_deduction

scope ComputeNYCEndpointSecurityIncome:
    exception
    definition largest_dice_roll_for_depletion_deduction under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 4 }).val) }.out
    consequence equals output of ComputeEnergyEfficiencyCredits with { --flag: flag }.out

scope ComputeTaxExemptSphinxRiddleSolutionFees:
    definition largest_dice_roll_for_taxable_superhero_salaries equals dice_roll_for_tax_exempt_fairy_tale_royalties + dice_roll_for_volunteer_firefighter_credit

scope ComputeGamblingWinnings:
    exception
    definition number_of_exemptions_rolled under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 30 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForArtificialIntelligenceSecurityIncome with { --flag: flag }.out

scope ComputeDiceForNYCThreatIntelligence:
    definition out equals number_of_dice_used_for_tax_credits - number_of_dependents_dice_claimed

scope ComputeTaxableCryptocurrencySecurityProfits:
    exception
    definition dice_roll_for_tax_exempt_fairy_dust_trade_incomes under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 12 }).val) }.out
    consequence equals output of ComputeNYCDigitalForensics with { --flag: flag }.out

scope ComputeCapitalGains:
    definition largest_dice_amount_exempted equals output of ComputeSelfEmploymentIncome with { --flag: flag }.out

scope ComputeTaxExemptSorcererSpellCastingFees:
    definition out equals dice_roll_for_business_expenses * dice_roll_for_tax_exempt_fairy_dust_trade_incomes

scope ComputeCybersecurityConsultingFees:
    definition number_of_dice_thrown_for_taxable_kraken_escort_services equals 161080500

scope ComputeAlimonyPayments:
    definition number_of_dice_thrown_for_retirement_contributions equals output of ComputeSelfEmploymentIncome with { --flag: flag }.out

declaration scope ComputeDependentCareCredit:
    input flag content list of C
    context quantity_of_pips_deducted_for_historic_rehabilitation_credit content integer
    context largest_dice_roll_for_taxable_pegasus_air_travel_revenues content integer
    context number_of_dice_allocated_for_student_loan_interest content integer
    context number_of_dice_for_health_savings_account_contributions content integer
    output tax content money

scope ComputeForeignIncome:
    exception
    definition dice_thrown_for_taxable_intergalactic_trade_profits under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 5 }).val) }.out
    consequence equals output of ComputeItemizedDeductions with { --flag: flag }.out

scope ComputeDiceRollForSecurityAuditFees:
    definition dice_roll_for_income equals quantity_of_pips_for_tax_exempt_interest * dice_roll_for_homebuyer_credit

scope ComputeTaxableCryptocurrencySecurityProfits:
    exception
    definition quantity_of_pips_claimed_for_dependent_care_credit under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 25 }).val) }.out
    consequence equals output of ComputeDiceRollForBlockchainSecurityConsultingEarnings with { --flag: flag }.out

scope ComputeNYCAutonomousVehicleSecurity:
    exception
    definition number_of_dependents_dice_claimed under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals dice_roll_for_taxable_oil_and_gas_income - number_of_dice_used_for_tax_credits

scope ComputeDiceRollForSecureSoftwareDevelopmentIncome:
    definition tax equals if
    dice_roll_for_tax_exempt_time_machine_rental_income = dice_thrown_for_taxable_ghost_hunting_rewards
    then $0
    else $1000

scope ComputeAdoptionExpenses:
    definition dice_roll_for_cryptocurrency_transactions equals dice_thrown_for_taxable_ghost_hunting_rewards + largest_dice_roll_for_taxable_pegasus_air_travel_revenues

scope ComputeTaxableDiceRollForFirewallUpgradeIncome:
    definition quantity_of_pips_claimed_for_taxable_griffin_delivery_services equals output of ComputeTaxableFengShuiDragonAdviceFees with { --flag: flag }.out

scope ComputeDiceRollForPenetrationTestingEarnings:
    definition dice_roll_for_dice_related_business_expenses equals output of ComputeTaxableDiceRollForSecurityRiskAssessmentProfits with { --flag: flag }.out

scope ComputeTaxableGhostWritingRevenue:
    exception
    definition dice_thrown_for_homeownership_credits under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 18 }).val) }.out
    consequence equals output of ComputeDiceRollForThreatIntelligenceServicesIncome with { --flag: flag }.out

scope ComputeDiceRollForIncidentResponseServices:
    definition out equals quantity_of_pips_claimed_for_taxable_unicorn_breeding * number_of_dice_used_for_tax_credits

scope ComputeDiceRollForCasinoEarnings:
    definition largest_dice_roll_for_depletion_deduction equals 170

scope ComputeTaxExemptInterest:
    exception
    definition dice_roll_for_business_expenses under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 3 }).val) }.out
    consequence equals output of ComputeHomeOfficeDeduction with { --flag: flag }.out

scope ComputeTaxExemptSphinxRiddleSolutionFees:
    definition dice_roll_for_tax_exempt_fairy_tale_royalties equals output of ComputeTaxableDiceRollForSecureCodeReviewProfits with { --flag: flag }.out

scope ComputeTaxableTimeMachineRentalIncome:
    definition largest_dice_used_for_adoption_expenses equals 228

scope ComputeTaxableDiceRollForSecurityTrainingFees:
    definition number_of_dice_thrown_for_retirement_contributions equals output of ComputeTaxableFengShuiDragonAdviceFees with { --flag: flag }.out

scope ComputeBusinessExpenses:
    definition out equals number_of_dice_thrown_for_taxable_dragonslaying_earnings * dice_roll_for_tax_exempt_fairy_dust_trade_incomes

declaration scope ComputeDisasterLosses:
    input flag content list of C
    output out content integer

scope ComputeTaxableDiceRollForDistributedDenialOfServiceProtectionFees:
    exception
    definition largest_dice_roll_for_taxable_superhero_salaries under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 27 }).val) }.out
    consequence equals output of ComputeEducationExpenses with { --flag: flag }.out

declaration scope ComputeTaxExemptLuckDragonTreasureLocationServices:
    input flag content list of C
    context number_of_dice_for_health_savings_account_contributions content integer
    context quantity_of_pips_claimed_for_taxable_elf_crafting_profits content integer
    output out content integer

scope ComputeDiceForSecurityAuditNYC:
    exception
    definition number_of_dice_for_taxable_unicorn_riding_fees under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 29 }).val) }.out
    consequence equals output of ComputeGamblingExciseTax with { --flag: flag }.out

scope ComputeNYCVulnerabilityAssessment:
    exception
    definition dice_roll_for_tax_exempt_bond_interest under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 17 }).val) }.out
    consequence equals output of ComputeDiceForNYCBusinessExpenses with { --flag: flag }.out

scope ComputeDiceRollForLotteryWinnings:
    exception
    definition largest_dice_roll_for_interest_income under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals 5737

scope ComputeBusinessExpenses:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 30 }).val) }.out
    consequence equals number_of_dice_thrown_for_taxable_dragonslaying_earnings - dice_roll_for_tax_exempt_fairy_dust_trade_incomes

declaration scope ComputeAdoptionExpenses:
    input flag content list of C
    context dice_thrown_for_taxable_ghost_hunting_rewards content integer
    context largest_dice_roll_for_taxable_pegasus_air_travel_revenues content integer
    context dice_roll_for_cryptocurrency_transactions content integer
    context total_dice_investment_losses content integer
    output tax content money

scope ComputeTaxExemptMermaidSongRoyalties:
    definition dice_roll_for_tax_exempt_alien_income equals 2517

scope ComputeDiceForNYCEncryptionConsulting:
    definition dice_roll_for_homebuyer_credit equals output of ComputeItemizedDeductions with { --flag: flag }.out

scope ComputeTaxableDiceRollForQuantumEncryptionProfits:
    exception
    definition largest_dice_roll_for_taxable_nymph_landscaping_profits under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 5 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForDarkWebMonitoringProfits with { --flag: flag }.out

scope ComputeDiceRollForSecurityPolicyConsultingFees:
    exception
    definition dice_roll_for_moving_expenses under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 24 }).val) }.out
    consequence equals output of ComputeSelfEmploymentIncome with { --flag: flag }.out

scope ComputeDiceRollForCyberInsuranceNYC:
    definition out equals output of Dicer2 with { --flag: flag --index: 22 }.val

scope ComputeMortgageInterest:
    exception
    definition dice_thrown_for_gambling_winnings under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 2 }).val) }.out
    consequence equals output of ComputeDiceForNYCBusinessExpenses with { --flag: flag }.out

scope ComputeTaxableDiceRollForDistributedDenialOfServiceProtectionFees:
    exception
    definition dice_roll_for_state_and_local_taxes under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 4 }).val) }.out
    consequence equals output of ComputeNYCDigitalForensics with { --flag: flag }.out

scope ComputeFringeBenefits:
    definition quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales equals output of ComputeDiceRollForInternetOfThingsSecurityConsultingFees with { --flag: flag }.out

scope ComputeTaxableDiceRollForQuantumEncryptionProfits:
    exception
    definition quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 5 }).val) }.out
    consequence equals output of ComputeDiceRollForIdentityAccessManagementIncome with { --flag: flag }.out

scope ComputeDiceRollForSecureSoftwareDevelopmentIncome:
    definition quantity_of_pips_for_taxable_gifts equals output of ComputeTaxablePokerTournamentWinnings with { --flag: flag }.out

scope ComputeAdoptionExpenses:
    exception
    definition dice_roll_for_cryptocurrency_transactions under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 21 }).val) }.out
    consequence equals dice_thrown_for_taxable_ghost_hunting_rewards * largest_dice_roll_for_taxable_pegasus_air_travel_revenues

scope ComputeGamblingLosses:
    exception
    definition quantity_of_pips_deducted_for_home_office under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 2 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForOnlineSlotMachinePayouts with { --flag: flag }.out

scope ComputeStateAndLocalTaxes:
    definition number_of_dice_used_for_foreign_tax_credit equals output of ComputeDiceRollForBlockchainSecurityConsultingEarnings with { --flag: flag }.out

scope ComputeTaxableBingoPrizes:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals number_of_dice_used_for_taxable_robotic_inventions * dice_result_for_charitable_contributions

scope ComputeDiceForNYCThreatIntelligence:
    exception
    definition number_of_dice_used_for_tax_credits under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 11 }).val) }.out
    consequence equals output of ComputeSelfEmploymentIncome with { --flag: flag }.out

scope ComputeDiceRollForHorseRacingWinnings:
    exception
    definition dice_thrown_for_taxable_lottery_winnings under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 13 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForOnlineSportsBettingGains with { --flag: flag }.out

scope ComputeVehicleExpenses:
    definition dice_roll_for_tax_exempt_fairy_dust_trade_incomes equals output of ComputeDiceRollForQuantumKeyDistributionConsultingFees with { --flag: flag }.out

declaration scope ComputeNYCDiceRollForBiometricSecurity:
    input flag content list of C
    context dice_roll_for_moving_expenses content integer
    context dice_roll_for_tax_exempt_fairy_tale_royalties content integer
    context quantity_of_pips_claimed_for_taxable_gold_discoveries content integer
    context largest_dice_used_for_capital_gains content integer
    output tax content money

scope ComputeTaxableIncome:
    exception
    definition dice_roll_for_tax_exempt_mermaid_song_royalties under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 22 }).val) }.out
    consequence equals output of ComputeStateAndLocalTaxes with { --flag: flag }.out

scope ComputeDiceRollForSportsBettingGains:
    definition largest_dice_roll_for_roth_ira_contributions equals output of ComputeNYCTaxableIncome with { --flag: flag }.out

scope ComputeNYCTaxableIncome:
    definition largest_dice_roll_for_foreign_income equals output of ComputeTaxableDiceRollForCriticalInfrastructureProtectionProfits with { --flag: flag }.out

scope ComputeDiceForIncidentResponseNYC:
    exception
    definition total_dice_investment_losses under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 30 }).val) }.out
    consequence equals output of ComputeDiceRollForThreatIntelligenceServicesIncome with { --flag: flag }.out

scope ComputeTaxExemptInterest:
    definition out equals number_of_dice_used_for_tax_exempt_werewolf_security_services + dice_roll_for_business_expenses

scope ComputeInvestmentIncome:
    exception
    definition quantity_of_pips_for_healthcare_deductions under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 28 }).val) }.out
    consequence equals output of ComputeDiceRollForSecurityComplianceAuditFees with { --flag: flag }.out

scope ComputeGamblingAddictionTherapyExpenses:
    definition dice_roll_for_tax_prep_fees equals output of ComputeDiceForNYCIdentityAccessManagement with { --flag: flag }.out

scope ComputeChildTaxCredit:
    definition dice_roll_for_dice_related_business_expenses equals dice_roll_for_tax_exempt_time_machine_rental_income * dice_result_for_charitable_contributions

scope ComputeNYCDiceRollForIndustrialControlSystemSecurity:
    exception
    definition dice_thrown_for_tax_exempt_time_travel_reimbursements under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 18 }).val) }.out
    consequence equals 202

scope ComputeDiceForSecurityComplianceAuditNYC:
    definition number_of_dice_for_taxable_fishing_incomes equals output of ComputeStudentLoanInterest with { --flag: flag }.out

scope ComputeTaxableGhostWritingRevenue:
    exception
    definition dice_thrown_for_gambling_winnings under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 10 }).val) }.out
    consequence equals output of ComputeStandardDeduction with { --flag: flag }.out

scope ComputeAlimonyPayments:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 31 }).val) }.out
    consequence equals number_of_dice_thrown_for_retirement_contributions * largest_dice_roll_for_taxable_treasure_findings

declaration scope ComputeItemizedDeductions:
    input flag content list of C
    output out content integer

scope ComputeNYCCalcDiceRollForSecurityRiskAssessment:
    definition largest_dice_roll_for_interest_income equals output of ComputeGamblingTaxCredit with { --flag: flag }.out

scope ComputeTaxableDiceRollForOnlineHorseRacingWinnings:
    exception
    definition number_of_dice_used_for_tax_exempt_werewolf_security_services under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 13 }).val) }.out
    consequence equals -10271

scope ComputeCharitableContributions:
    exception
    definition largest_dice_roll_for_employer_provided_benefits under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals output of ComputeEducationExpenses with { --flag: flag }.out

scope ComputeTaxExemptLuckDragonTreasureLocationServices:
    exception
    definition number_of_dice_for_health_savings_account_contributions under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 3 }).val) }.out
    consequence equals output of ComputeDiceRollForInternetOfThingsSecurityConsultingFees with { --flag: flag }.out

scope ComputeNYCAutonomousVehicleSecurity:
    definition number_of_dice_used_for_tax_credits equals output of ComputeTaxableCardGameProfits with { --flag: flag }.out

scope ComputeDiceForNYCSecurityTraining:
    definition dice_roll_for_tax_exempt_bond_interest equals number_of_dice_used_for_vehicle_expenses + quantity_of_pips_deducted_for_mortgage_interest

scope ComputeDiceForNYCMalwareRemoval:
    exception
    definition largest_dice_roll_for_tax_exempt_leprechaun_gifts under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 11 }).val) }.out
    consequence equals output of ComputeDiceRollForQuantumEncryptionNYC with { --flag: flag }.out

scope ComputeTaxableDiceRollForCyberInsuranceConsultationProfits:
    definition dice_roll_for_tax_exempt_mermaid_song_royalties equals output of ComputeTaxableDiceRollForOnlineSlotMachinePayouts with { --flag: flag }.out

declaration scope ComputeDiceForSecurityComplianceAuditNYC:
    input flag content list of C
    context largest_dice_roll_for_employer_provided_benefits content integer
    context number_of_dice_for_taxable_fishing_incomes content integer
    output out content integer

scope ComputeTaxCredits:
    definition quantity_of_pips_claimed_for_taxable_chupacabra_pest_control equals output of ComputeTaxableDiceRollForOnlineSlotMachinePayouts with { --flag: flag }.out

scope ComputeStateAndLocalTaxes:
    definition total_dice_investment_losses equals output of ComputeNYCDiceRollForSecurityAwareness with { --flag: flag }.out

scope ComputeDiceRollForCasinoEarnings:
    definition tax equals if
    dice_roll_for_real_estate_taxes = largest_dice_roll_for_depletion_deduction
    then $0
    else $1000

scope ComputeGamblingLosses:
    definition dice_thrown_for_taxable_ghost_hunting_rewards equals output of ComputeSelfEmploymentIncome with { --flag: flag }.out

scope ComputeDiceForSecurityAuditNYC:
    exception
    definition number_of_dependents_dice_claimed under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForCriticalInfrastructureProtectionProfits with { --flag: flag }.out

scope ComputeEarnedIncomeCredit:
    exception
    definition largest_dice_amount_for_educational_expenses under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 10 }).val) }.out
    consequence equals number_of_exemptions_rolled + quantity_of_pips_claimed_for_tax_exempt_troll_bridge_toll_revenues

scope ComputeTaxableGremlinTechnologySales:
    exception
    definition dice_roll_for_tax_prep_fees under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 18 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForSecurityRiskAssessmentProfits with { --flag: flag }.out

scope ComputeTaxableDiceRollForSecureCodeReviewProfits:
    exception
    definition dice_roll_for_tax_exempt_alien_income under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals output of ComputeStandardDeduction with { --flag: flag }.out

declaration scope ComputeDiceRollForQuantumKeyDistributionNYC:
    input flag content list of C
    context number_of_dice_thrown_for_military_service_deductions content integer
    context dice_roll_for_tax_exempt_alien_income content integer
    context number_of_dice_for_earned_income_tax_credit content integer
    context quantity_of_pips_deducted_for_home_office content integer
    output tax content money

declaration scope ComputeTaxableNymphLandscapingProfits:
    input flag content list of C
    output out content integer

scope ComputeNYCDistributedDenialOfService:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 8 }).val) }.out
    consequence equals number_of_dice_for_taxable_fishing_incomes - largest_dice_roll_for_tax_exempt_leprechaun_gifts

declaration scope ComputeCapitalGains:
    input flag content list of C
    context largest_dice_amount_exempted content integer
    context number_of_dice_used_for_vehicle_expenses content integer
    output out content integer

scope ComputeCharitableContributions:
    exception
    definition dice_roll_for_social_security_benefits under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 26 }).val) }.out
    consequence equals output of ComputeTaxableFengShuiDragonAdviceFees with { --flag: flag }.out

scope ComputeDiceRollForQuantumKeyDistributionNYC:
    definition number_of_dice_for_earned_income_tax_credit equals number_of_dice_thrown_for_military_service_deductions * dice_roll_for_tax_exempt_alien_income

scope ComputeRetirementContributions:
    definition number_of_dice_used_for_tax_credits equals 13353

declaration scope ComputeVehicleExpenses:
    input flag content list of C
    context dice_roll_for_tax_exempt_fairy_dust_trade_incomes content integer
    context quantity_of_pips_for_tax_exempt_interest content integer
    output out content integer

scope ComputeCybersecurityConsultingFees:
    exception
    definition number_of_dice_thrown_for_taxable_kraken_escort_services under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 9 }).val) }.out
    consequence equals 161080501

scope ComputeTaxExemptSphinxRiddleSolutionFees:
    exception
    definition dice_roll_for_tax_exempt_fairy_tale_royalties under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 31 }).val) }.out
    consequence equals output of ComputeDiceRelatedBusinessExpenses with { --flag: flag }.out

scope ComputeTaxableIncome:
    definition dice_roll_for_tax_exempt_mermaid_song_royalties equals output of ComputeTaxableGhostHuntingRewards with { --flag: flag }.out

scope ComputeDiceRollForOnlineRouletteWinnings:
    exception
    definition largest_dice_used_for_capital_gains under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 22 }).val) }.out
    consequence equals 110

scope ComputeTaxableDiceRollForArtificialIntelligenceSecurityIncome:
    definition out equals output of Dicer2 with { --flag: flag --index: 9 }.val

scope ComputeTaxableDiceGameRoyalties:
    definition largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings equals 11421

scope ComputeNYCDigitalSecurityIncome:
    exception
    definition largest_dice_roll_for_employer_provided_benefits under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 23 }).val) }.out
    consequence equals output of ComputeDisasterLosses with { --flag: flag }.out

scope ComputeDiceRollForCasinoEarnings:
    definition dice_roll_for_real_estate_taxes equals number_of_dice_for_taxable_fishing_incomes * dice_roll_for_charitable_mileage_deduction

scope ComputeTaxableFairyTaleRoyalties:
    exception
    definition largest_dice_roll_for_taxable_pegasus_air_travel_revenues under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 23 }).val) }.out
    consequence equals largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings * quantity_of_pips_claimed_for_taxable_unicorn_breeding

declaration scope ComputeTaxableDiceRollForHackerBountyRewards:
    input flag content list of C
    context quantity_of_pips_claimed content integer
    context quantity_of_pips_for_taxable_gifts content integer
    context dice_roll_for_tax_exempt_fairy_dust_trade_incomes content integer
    context dice_roll_for_homebuyer_credit content integer
    output tax content money

declaration scope ComputeBusinessExpenses:
    input flag content list of C
    context number_of_dice_thrown_for_taxable_dragonslaying_earnings content integer
    context dice_roll_for_tax_exempt_fairy_dust_trade_incomes content integer
    output out content integer

scope ComputeDiceRollForCasinoEarnings:
    definition dice_roll_for_charitable_mileage_deduction equals output of ComputeNYCCalcDiceRollForSecurityRiskAssessment with { --flag: flag }.out

scope ComputeDiceRollForQuantumKeyDistributionNYC:
    definition quantity_of_pips_deducted_for_home_office equals 9992

scope ComputeTaxableDragonSlayingEarnings:
    exception
    definition quantity_of_pips_withheld_for_taxes under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 19 }).val) }.out
    consequence equals dice_roll_for_taxable_philosopher_stone_sales + number_of_dice_thrown_for_retirement_contributions

scope ComputeDiceRollForBiometricSecurityConsultingEarnings:
    definition dice_result_for_charitable_contributions equals output of ComputeDiceRollForIndustrialControlSystemSecurityIncome with { --flag: flag }.out

declaration scope ComputeNYCDiceRollForBlockchainSecurity:
    input flag content list of C
    context quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues content integer
    context dice_thrown_for_disaster_losses content integer
    output out content integer

scope ComputeDependentCareCredit:
    definition quantity_of_pips_deducted_for_historic_rehabilitation_credit equals output of ComputeTaxableDiceRollForNetworkSecurityProfits with { --flag: flag }.out

scope ComputeDiceForSecurityComplianceAuditNYC:
    exception
    definition number_of_dice_for_taxable_fishing_incomes under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 16 }).val) }.out
    consequence equals output of ComputeEducationExpenses with { --flag: flag }.out

scope ComputeNYCDiceRollForPhysicalSecuritySystem:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 10 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 26 }.val

scope ComputeNYCAutonomousVehicleSecurity:
    exception
    definition largest_dice_roll_for_taxable_superhero_salaries under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 2 }).val) }.out
    consequence equals 15909

scope ComputeDiceRollForSecurityPolicyConsultingFees:
    exception
    definition quantity_of_pips_claimed under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 26 }).val) }.out
    consequence equals output of ComputeNYCDigitalForensics with { --flag: flag }.out

scope ComputeNYCFirewallUpgradeIncome:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 23 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 25 }.val

scope ComputeEarnedIncomeCredit:
    definition largest_dice_amount_for_educational_expenses equals number_of_exemptions_rolled - quantity_of_pips_claimed_for_tax_exempt_troll_bridge_toll_revenues

scope ComputeDiceRollForHorseRacingWinnings:
    definition dice_thrown_for_taxable_lottery_winnings equals output of ComputeTaxableGhostHuntingRewards with { --flag: flag }.out

scope ComputeTaxableDiceRollForDistributedDenialOfServiceProtectionFees:
    definition largest_dice_roll_for_taxable_superhero_salaries equals output of ComputeNYCDiceRollForPhysicalSecuritySystem with { --flag: flag }.out

scope ComputeDiceForNYCMalwareRemoval:
    definition largest_dice_roll_for_tax_exempt_leprechaun_gifts equals output of ComputeTaxableNymphLandscapingProfits with { --flag: flag }.out

scope ComputeGamblingAddictionTherapyExpenses:
    definition tax equals if
    quantity_of_pips_claimed_for_taxable_chupacabra_pest_control = dice_thrown_for_taxable_ghost_hunting_rewards
    then $0
    else $1000

scope ComputeDiceForNYCThreatIntelligence:
    definition number_of_dependents_dice_claimed equals output of ComputeEnergyEfficiencyCredits with { --flag: flag }.out

scope ComputeTaxableDiceRollForSecurityTrainingFees:
    exception
    definition number_of_dice_thrown_for_retirement_contributions under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 6 }).val) }.out
    consequence equals output of ComputeEducationExpenses with { --flag: flag }.out

scope ComputeNYCFirewallUpgradeIncome:
    definition out equals output of Dicer2 with { --flag: flag --index: 8 }.val

declaration scope ComputeTaxableDiceRollForEncryptionConsultingIncome:
    input flag content list of C
    context largest_dice_roll_for_tax_exempt_sphinx_riddle_solution_fees content integer
    context dice_roll_for_tax_exempt_fairy_tale_royalties content integer
    output out content integer

scope ComputeCybersecurityConsultingFees:
    exception
    definition dice_thrown_for_taxable_minotaur_labyrinth_tour_earnings under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 18 }).val) }.out
    consequence equals output of ComputeTaxableElfCraftingProfits with { --flag: flag }.out

scope ComputeTaxExemptLeprechaunGifts:
    exception
    definition largest_dice_deduction under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 16 }).val) }.out
    consequence equals output of ComputeHomeOfficeDeduction with { --flag: flag }.out

scope ComputeTaxExemptLuckDragonTreasureLocationServices:
    exception
    definition quantity_of_pips_claimed_for_taxable_elf_crafting_profits under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 0 }).val) }.out
    consequence equals output of ComputeDiceRollForInternetOfThingsSecurityConsultingFees with { --flag: flag }.out

scope ComputeTaxableElfCraftingProfits:
    definition dice_thrown_for_homeownership_credits equals output of ComputeTaxableDiceRollForArtificialIntelligenceSecurityIncome with { --flag: flag }.out

scope ComputeTaxableOgreConsultingFees:
    exception
    definition quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 3 }).val) }.out
    consequence equals output of ComputeDisasterLosses with { --flag: flag }.out

scope ComputeTaxableDiceRollForDigitalForensicsIncome:
    definition dice_thrown_for_taxable_ghost_hunting_rewards equals output of ComputeDiceRollForBlockchainSecurityConsultingEarnings with { --flag: flag }.out

scope ComputeDiceRollForSecurityAuditFees:
    definition dice_roll_for_homebuyer_credit equals output of ComputeDiceForNYCSecureSoftwareDevelopment with { --flag: flag }.out

scope ComputeTaxableIncome:
    exception
    definition quantity_of_pips_claimed_for_taxable_unicorn_breeding under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 21 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForFirewallUpgradeIncome with { --flag: flag }.out

scope ComputeNYCGamblingWinnings:
    exception
    definition dice_roll_for_taxable_gremlin_technology_sales under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 21 }).val) }.out
    consequence equals quantity_of_pips_for_taxable_gifts - number_of_dice_thrown_for_taxable_kraken_escort_services

scope ComputeDiceRollForPhysicalSecuritySystemConsultingIncome:
    exception
    definition dice_thrown_for_disaster_losses under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 19 }).val) }.out
    consequence equals largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings * number_of_dice_used_for_tax_credits

scope ComputeTaxExemptSorcererSpellCastingFees:
    definition dice_roll_for_tax_exempt_fairy_dust_trade_incomes equals output of ComputeDiceRollForBlockchainSecurityConsultingEarnings with { --flag: flag }.out

scope ComputeTaxableGhostHuntingRewards:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 25 }).val) }.out
    consequence equals number_of_dependents_dice - dice_roll_for_tax_exempt_alien_income

scope ComputeTaxableDiceRollForHackerBountyRewards:
    definition tax equals if
    dice_roll_for_tax_exempt_fairy_dust_trade_incomes = dice_roll_for_homebuyer_credit
    then $0
    else $1000

scope ComputeTaxableDiceRollForVulnerabilityAssessmentProfits:
    exception
    definition number_of_dice_used_for_taxable_robotic_inventions under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals output of ComputeDiceRollForIndustrialControlSystemSecurityIncome with { --flag: flag }.out

scope ComputeDiceRollForHorseRacingWinnings:
    exception
    definition dice_roll_for_tax_exempt_feng_shui_dragon_advice_fees under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 31 }).val) }.out
    consequence equals quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales - dice_thrown_for_taxable_lottery_winnings

declaration scope ComputeTaxableDiceRollForMalwareRemovalServices:
    input flag content list of C
    context number_of_dice_thrown_for_taxable_dragonslaying_earnings content integer
    context dice_roll_for_tax_prep_fees content integer
    output out content integer

scope ComputeTaxableFengShuiDragonAdviceFees:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 11 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 26 }.val

scope ComputeMovingExpenses:
    exception
    definition largest_dice_roll_for_depletion_deduction under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 29 }).val) }.out
    consequence equals output of ComputeStandardDeduction with { --flag: flag }.out

scope ComputeDiceForSecurityComplianceAuditNYC:
    definition out equals largest_dice_roll_for_employer_provided_benefits * number_of_dice_for_taxable_fishing_incomes

scope ComputeNYCEndpointSecurityIncome:
    definition largest_dice_roll_for_depletion_deduction equals output of ComputeDiceForNYCBusinessExpenses with { --flag: flag }.out

scope ComputeNYCDiceRollForBlockchainSecurity:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 10 }).val) }.out
    consequence equals quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues + dice_thrown_for_disaster_losses

scope ComputeDiceForNYCSecurityTraining:
    definition number_of_dice_used_for_vehicle_expenses equals output of ComputeNYCDigitalSecurityIncome with { --flag: flag }.out

scope ComputeNYCDistributedDenialOfService:
    definition number_of_dice_for_taxable_fishing_incomes equals output of ComputeNYCDiceRollForSecurityAwareness with { --flag: flag }.out

scope ComputeDiceForNYCMalwareRemoval:
    definition dice_roll_for_dice_related_business_expenses equals output of ComputeTaxableDiceRollForCriticalInfrastructureProtectionProfits with { --flag: flag }.out

declaration scope ComputeTaxableDiceRollForDigitalForensicsIncome:
    input flag content list of C
    context dice_thrown_for_taxable_ghost_hunting_rewards content integer
    context largest_dice_roll_for_tax_exempt_sphinx_riddle_solution_fees content integer
    output out content integer

scope ComputeDiceRollForCasinoEarnings:
    definition number_of_dice_for_taxable_fishing_incomes equals output of ComputeTaxableCryptocurrencySecurityProfits with { --flag: flag }.out

scope ComputeInvestmentIncome:
    exception
    definition dice_roll_for_homebuyer_credit under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 19 }).val) }.out
    consequence equals output of ComputeDiceRollForNYCStartupInvestment with { --flag: flag }.out

scope ComputeTaxableDiceRollForNetworkSecurityProfits:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 1 }).val) }.out
    consequence equals largest_dice_roll_for_tax_exempt_yeti_tourism_income - dice_roll_for_taxable_philosopher_stone_sales

scope ComputeTaxableDiceRollForGameShowWinnings:
    exception
    definition largest_dice_roll_for_roth_ira_contributions under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 19 }).val) }.out
    consequence equals 24420

scope ComputeTaxableDiceRollForHackerBountyRewards:
    exception
    definition quantity_of_pips_for_taxable_gifts under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 13 }).val) }.out
    consequence equals output of ComputeStateAndLocalTaxes with { --flag: flag }.out

scope ComputeNYCTaxableIncome:
    definition out equals number_of_dice_thrown_for_military_service_deductions + largest_dice_roll_for_foreign_income

scope ComputeTaxableBingoPrizes:
    exception
    definition dice_result_for_charitable_contributions under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 14 }).val) }.out
    consequence equals output of ComputeHomeOfficeDeduction with { --flag: flag }.out

declaration scope ComputeNYCTaxableIncome:
    input flag content list of C
    context number_of_dice_thrown_for_military_service_deductions content integer
    context largest_dice_roll_for_foreign_income content integer
    output out content integer

scope ComputeTaxableDiceRollForHackerBountyRewards:
    exception
    definition dice_roll_for_homebuyer_credit under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 31 }).val) }.out
    consequence equals 210

scope ComputeDiceForSecurityAuditNYC:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 3 }).val) }.out
    consequence equals number_of_dice_for_taxable_unicorn_riding_fees * number_of_dependents_dice_claimed

declaration scope ComputeTaxExemptInterest:
    input flag content list of C
    context number_of_dice_used_for_tax_exempt_werewolf_security_services content integer
    context dice_roll_for_business_expenses content integer
    output out content integer

scope ComputeDiceForIoTSecurityConsultingNYC:
    definition quantity_of_pips_claimed_for_taxable_griffin_delivery_services equals -11593

scope ComputeTaxableDiceRollForOnlineRouletteWinnings:
    definition out equals number_of_dice_for_taxable_unicorn_riding_fees * dice_roll_for_tax_exempt_fairy_tale_royalties

scope ComputeNYCDiceRollForIndustrialControlSystemSecurity:
    exception
    definition largest_dice_amount_exempted under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 24 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForSecurityTrainingFees with { --flag: flag }.out

declaration scope ComputeGamblingTaxCredit:
    input flag content list of C
    output out content integer

scope ComputeCharitableContributions:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 14 }).val) }.out
    consequence equals largest_dice_roll_for_employer_provided_benefits + dice_roll_for_social_security_benefits

scope ComputeNYCDiceRollForBiometricSecurity:
    definition tax equals if
    quantity_of_pips_claimed_for_taxable_gold_discoveries = largest_dice_used_for_capital_gains
    then $0
    else $1000

scope ComputeAlimonyPayments:
    exception
    definition number_of_dice_thrown_for_retirement_contributions under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 30 }).val) }.out
    consequence equals output of ComputeNYCDigitalForensics with { --flag: flag }.out

scope ComputeNYCDistributedDenialOfService:
    exception
    definition number_of_dice_for_taxable_fishing_incomes under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 1 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForDarkWebMonitoringProfits with { --flag: flag }.out

scope ComputeDiceRollForSecurityAuditFees:
    definition number_of_dice_thrown_for_disability_deductions equals 5

scope ComputeTaxExemptLuckDragonTreasureLocationServices:
    definition out equals number_of_dice_for_health_savings_account_contributions + quantity_of_pips_claimed_for_taxable_elf_crafting_profits

scope ComputeTaxExemptYetiTourismIncome:
    definition out equals quantity_of_pips_claimed_for_taxable_gold_discoveries + number_of_dice_thrown_for_disability_deductions

scope ComputeTaxableGhostWritingRevenue:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 19 }).val) }.out
    consequence equals dice_thrown_for_homeownership_credits + dice_thrown_for_gambling_winnings

scope ComputeTaxableDiceGameRoyalties:
    definition largest_dice_used_for_capital_gains equals number_of_dice_thrown_for_military_service_deductions - dice_roll_for_tax_exempt_fairy_tale_royalties

scope ComputeHSAContributions:
    exception
    definition largest_dice_roll_for_depletion_deduction under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 28 }).val) }.out
    consequence equals output of ComputeDiceRollForCyberInsuranceNYC with { --flag: flag }.out

declaration scope ComputeNYCNetworkSecurityProfits:
    input flag content list of C
    context dice_roll_for_state_and_local_taxes content integer
    context dice_roll_for_income content integer
    output out content integer

declaration scope ComputeTaxableFairyTaleRoyalties:
    input flag content list of C
    context largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings content integer
    context quantity_of_pips_claimed_for_taxable_unicorn_breeding content integer
    context largest_dice_roll_for_taxable_pegasus_air_travel_revenues content integer
    context quantity_of_pips_claimed_for_taxable_chupacabra_pest_control content integer
    output tax content money

scope ComputeTaxExemptSorcererSpellCastingFees:
    exception
    definition dice_roll_for_business_expenses under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 5 }).val) }.out
    consequence equals output of ComputeStudentLoanInterest with { --flag: flag }.out

scope ComputeDiceRollForSecurityPolicyConsultingFees:
    definition out equals dice_roll_for_moving_expenses + quantity_of_pips_claimed

declaration scope ComputeTaxableDiceRollForNetworkSecurityProfits:
    input flag content list of C
    context largest_dice_roll_for_tax_exempt_yeti_tourism_income content integer
    context dice_roll_for_taxable_philosopher_stone_sales content integer
    output out content integer

scope ComputeEnergyEfficiencyCredits:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 14 }.val

declaration scope ComputeFringeBenefits:
    input flag content list of C
    context quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales content integer
    context dice_roll_for_dice_related_business_expenses content integer
    output out content integer

scope ComputeTaxableDiceGameRoyalties:
    definition tax equals if
    largest_dice_used_for_capital_gains = largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings
    then $0
    else $1000

scope ComputeDiceRollForSportsBettingGains:
    exception
    definition largest_dice_amount_for_educational_expenses under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 26 }).val) }.out
    consequence equals dice_roll_for_energy_efficiency_credits - largest_dice_roll_for_roth_ira_contributions

scope ComputeTaxableDiceRollForFirewallUpgradeIncome:
    exception
    definition quantity_of_pips_claimed_for_taxable_griffin_delivery_services under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 16 }).val) }.out
    consequence equals output of ComputeNYCDiceRollForSecurityAwareness with { --flag: flag }.out

scope ComputeTaxableDiceRollForQuantumEncryptionProfits:
    definition quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues equals output of ComputeTaxableDiceRollForCriticalInfrastructureProtectionProfits with { --flag: flag }.out

scope ComputeDiceRollForNYCSecurityTokenOffering:
    definition dice_thrown_for_taxable_lottery_winnings equals largest_dice_amount_for_educational_expenses * number_of_dice_used_for_foreign_tax_credit

scope ComputeDiceRollForBlockchainSecurityConsultingEarnings:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 27 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 13 }.val

declaration scope ComputeTaxableTimeMachineRentalIncome:
    input flag content list of C
    context dice_thrown_for_taxable_chimera_circus_profits content integer
    context largest_dice_used_for_capital_gains content integer
    context dice_roll_for_tax_exempt_mermaid_song_royalties content integer
    context largest_dice_used_for_adoption_expenses content integer
    output tax content money

scope ComputeTaxableElfCraftingProfits:
    exception
    definition dice_thrown_for_homeownership_credits under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 19 }).val) }.out
    consequence equals output of ComputeStandardDeduction with { --flag: flag }.out

scope ComputeVehicleExpenses:
    definition out equals dice_roll_for_tax_exempt_fairy_dust_trade_incomes + quantity_of_pips_for_tax_exempt_interest

scope ComputeTaxableDiceRollForCloudSecurityConsultingFees:
    definition out equals output of Dicer2 with { --flag: flag --index: 21 }.val

scope ComputeTaxableDiceGameRoyalties:
    definition number_of_dice_thrown_for_military_service_deductions equals output of ComputeTaxableDiceRollForOnlineSportsBettingGains with { --flag: flag }.out

scope ComputeTaxableDiceRollIncome:
    definition dice_roll_for_tax_exempt_fairy_tale_royalties equals output of ComputeNYCDiceRollForSecurityAwareness with { --flag: flag }.out

scope ComputeDiceRollForNYCSecurityTokenOffering:
    exception
    definition dice_thrown_for_taxable_lottery_winnings under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 26 }).val) }.out
    consequence equals largest_dice_amount_for_educational_expenses + number_of_dice_used_for_foreign_tax_credit

scope ComputeCybersecurityConsultingFees:
    exception
    definition dice_roll_for_social_security_benefits under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 22 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForOnlineFantasySportsPrizes with { --flag: flag }.out

declaration scope FlagTax:
    input flag content list of C
    output tax content money
    compute_dice_for_n_y_c_security_training scope ComputeDiceForNYCSecurityTraining
    compute_tax_exempt_mermaid_song_royalties scope ComputeTaxExemptMermaidSongRoyalties
    compute_retirement_contributions scope ComputeRetirementContributions
    compute_cybersecurity_consulting_fees scope ComputeCybersecurityConsultingFees
    compute_dice_roll_for_sports_betting_gains scope ComputeDiceRollForSportsBettingGains
    compute_gambling_debt_interest scope ComputeGamblingDebtInterest
    compute_taxable_dice_roll_for_endpoint_security_income scope ComputeTaxableDiceRollForEndpointSecurityIncome
    compute_taxable_income scope ComputeTaxableIncome
    compute_adoption_expenses scope ComputeAdoptionExpenses
    compute_taxable_dice_roll_for_hacker_bounty_rewards scope ComputeTaxableDiceRollForHackerBountyRewards
    compute_dice_roll_for_secure_software_development_income scope ComputeDiceRollForSecureSoftwareDevelopmentIncome
    compute_dice_for_io_t_security_consulting_n_y_c scope ComputeDiceForIoTSecurityConsultingNYC
    compute_n_y_c_dice_roll_for_industrial_control_system_security scope ComputeNYCDiceRollForIndustrialControlSystemSecurity
    compute_dice_roll_for_quantum_key_distribution_n_y_c scope ComputeDiceRollForQuantumKeyDistributionNYC
    compute_dice_roll_for_lottery_winnings scope ComputeDiceRollForLotteryWinnings
    compute_dice_roll_for_security_awareness_training_earnings scope ComputeDiceRollForSecurityAwarenessTrainingEarnings
    compute_dice_roll_for_online_roulette_winnings scope ComputeDiceRollForOnlineRouletteWinnings
    compute_dice_roll_for_slot_machine_payouts scope ComputeDiceRollForSlotMachinePayouts
    compute_taxable_dice_game_royalties scope ComputeTaxableDiceGameRoyalties
    compute_dice_roll_for_physical_security_system_consulting_income scope ComputeDiceRollForPhysicalSecuritySystemConsultingIncome
    compute_taxable_dragon_slaying_earnings scope ComputeTaxableDragonSlayingEarnings
    compute_dice_roll_for_casino_earnings scope ComputeDiceRollForCasinoEarnings
    compute_gambling_addiction_therapy_expenses scope ComputeGamblingAddictionTherapyExpenses
    compute_dice_roll_for_n_y_c_security_token_offering scope ComputeDiceRollForNYCSecurityTokenOffering
    compute_earned_income_credit scope ComputeEarnedIncomeCredit
    compute_taxable_dice_roll_for_online_craps_game_earnings scope ComputeTaxableDiceRollForOnlineCrapsGameEarnings
    compute_n_y_c_dice_roll_for_biometric_security scope ComputeNYCDiceRollForBiometricSecurity
    compute_n_y_c_gambling_winnings scope ComputeNYCGamblingWinnings
    compute_taxable_fairy_tale_royalties scope ComputeTaxableFairyTaleRoyalties
    compute_taxable_dice_roll_for_online_horse_racing_winnings scope ComputeTaxableDiceRollForOnlineHorseRacingWinnings
    compute_dice_roll_for_horse_racing_winnings scope ComputeDiceRollForHorseRacingWinnings
    compute_dependent_care_credit scope ComputeDependentCareCredit
    compute_n_y_c_autonomous_vehicle_security scope ComputeNYCAutonomousVehicleSecurity
    compute_child_tax_credit scope ComputeChildTaxCredit
    compute_taxable_time_machine_rental_income scope ComputeTaxableTimeMachineRentalIncome
    compute_investment_income scope ComputeInvestmentIncome
    compute_dice_roll_for_security_token_offering_consulting_earnings scope ComputeDiceRollForSecurityTokenOfferingConsultingEarnings
    compute_taxable_dice_roll_for_game_show_winnings scope ComputeTaxableDiceRollForGameShowWinnings
    compute_dice_roll_for_security_audit_fees scope ComputeDiceRollForSecurityAuditFees
    compute_tax_exempt_sphinx_riddle_solution_fees scope ComputeTaxExemptSphinxRiddleSolutionFees

declaration scope ComputeTaxableDiceRollForOnlineSportsBettingGains:
    input flag content list of C
    context dice_roll_for_cryptocurrency_transactions content integer
    context quantity_of_pips_withheld_for_taxes content integer
    output out content integer

scope ComputeTaxableCardGameProfits:
    definition dice_roll_for_taxable_wizard_consulting_fees equals output of ComputeDiceRollForInternetOfThingsSecurityConsultingFees with { --flag: flag }.out

scope ComputeTaxableDiceRollForDigitalForensicsIncome:
    definition largest_dice_roll_for_tax_exempt_sphinx_riddle_solution_fees equals output of ComputeDiceRollForCyberInsuranceNYC with { --flag: flag }.out

scope ComputeDiceRollForSlotMachinePayouts:
    definition quantity_of_pips_for_healthcare_deductions equals output of ComputeNYCDigitalSecurityIncome with { --flag: flag }.out

declaration scope ComputeTaxableDiceGameRoyalties:
    input flag content list of C
    context number_of_dice_thrown_for_military_service_deductions content integer
    context dice_roll_for_tax_exempt_fairy_tale_royalties content integer
    context largest_dice_used_for_capital_gains content integer
    context largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings content integer
    output tax content money

scope ComputeTaxableDiceRollForOnlineRouletteWinnings:
    definition number_of_dice_for_taxable_unicorn_riding_fees equals output of ComputeDiceRollForQuantumKeyDistributionConsultingFees with { --flag: flag }.out

scope ComputeRetirementContributions:
    definition dice_roll_for_homebuyer_credit equals dice_roll_for_tax_exempt_alien_income * quantity_of_pips_for_healthcare_deductions

declaration scope ComputeMortgageInterest:
    input flag content list of C
    context largest_dice_roll_for_taxable_superhero_salaries content integer
    context dice_thrown_for_gambling_winnings content integer
    output out content integer

scope ComputeDiceRollForSecurityAwarenessTrainingEarnings:
    definition dice_thrown_for_taxable_chimera_circus_profits equals number_of_exemptions_rolled - dice_roll_for_homebuyer_credit

scope ComputeCybersecurityConsultingFees:
    definition tax equals if
    quantity_of_pips_claimed_for_taxable_chupacabra_pest_control = number_of_dice_thrown_for_taxable_kraken_escort_services
    then $0
    else $1000

scope ComputeTaxableCrapsGameEarnings:
    exception
    definition largest_dice_roll_for_depletion_deduction under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 23 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForSecurityRiskAssessmentProfits with { --flag: flag }.out

scope ComputeTaxableDiceRollForMalwareRemovalServices:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 13 }).val) }.out
    consequence equals number_of_dice_thrown_for_taxable_dragonslaying_earnings + dice_roll_for_tax_prep_fees

scope ComputeTaxableDiceGameRoyalties:
    exception
    definition largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 23 }).val) }.out
    consequence equals 11422

scope ComputeTaxablePokerTournamentWinnings:
    definition out equals quantity_of_pips_claimed_for_taxable_unicorn_breeding - number_of_dice_used_for_vehicle_expenses

scope ComputeDiceRollForNYCStartupInvestment:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 17 }).val) }.out
    consequence equals dice_thrown_for_homeownership_credits - quantity_of_pips_claimed_for_farm_income

scope ComputeNYCNetworkSecurityProfits:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 11 }).val) }.out
    consequence equals dice_roll_for_state_and_local_taxes - dice_roll_for_income

scope ComputeTaxExemptDwarfGemMiningProfits:
    definition out equals number_of_dice_for_taxable_unicorn_riding_fees - dice_roll_for_tax_exempt_fairy_tale_royalties

scope ComputeDiceRollForSecureSoftwareDevelopmentIncome:
    exception
    definition dice_thrown_for_taxable_ghost_hunting_rewards under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 31 }).val) }.out
    consequence equals 907920

scope ComputeEarnedIncomeCredit:
    definition number_of_dice_thrown_for_taxable_ogre_consulting_fees equals -12176

scope ComputeTaxableFairyTaleRoyalties:
    definition quantity_of_pips_claimed_for_taxable_unicorn_breeding equals output of ComputeTaxCredits with { --flag: flag }.out

scope ComputeTaxableGhostHuntingRewards:
    exception
    definition number_of_dependents_dice under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 29 }).val) }.out
    consequence equals output of ComputeStudentLoanInterest with { --flag: flag }.out

scope ComputeTaxableCardGameProfits:
    exception
    definition number_of_dice_thrown_for_taxable_ogre_consulting_fees under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 9 }).val) }.out
    consequence equals output of ComputeStudentLoanInterest with { --flag: flag }.out

scope ComputeMovingExpenses:
    definition largest_dice_roll_for_depletion_deduction equals output of ComputeHomeOfficeDeduction with { --flag: flag }.out

scope ComputeTaxableDiceRollForCyberInsuranceConsultationProfits:
    definition dice_roll_for_tax_exempt_ghost_writing_revenue equals output of ComputeDiceRollForCyberInsuranceNYC with { --flag: flag }.out

scope ComputeDiceForSecurityAuditNYC:
    definition number_of_dependents_dice_claimed equals output of ComputeTaxableFengShuiDragonAdviceFees with { --flag: flag }.out

scope ComputeTaxableDiceRollForOnlineCrapsGameEarnings:
    definition quantity_of_pips_deducted_for_mortgage_interest equals output of ComputeCapitalGains with { --flag: flag }.out

scope ComputeTaxableIncome:
    definition quantity_of_pips_claimed_for_taxable_unicorn_breeding equals output of ComputeDiceRollForSecurityPolicyConsultingFees with { --flag: flag }.out

scope ComputeDiceRollForSecurityTokenOfferingConsultingEarnings:
    definition number_of_dice_for_taxable_unicorn_riding_fees equals output of ComputeMovingExpenses with { --flag: flag }.out

scope ComputeDiceRollForSecurityAuditFees:
    exception
    definition number_of_dice_thrown_for_disability_deductions under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 5 }).val) }.out
    consequence equals 4

scope ComputeTaxableDiceRollForOnlineHorseRacingWinnings:
    definition tax equals if
    dice_roll_for_moving_expenses = number_of_dice_used_for_tax_exempt_werewolf_security_services
    then $0
    else $1000

scope ComputeTaxableDiceRollForDigitalForensicsIncome:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 21 }).val) }.out
    consequence equals dice_thrown_for_taxable_ghost_hunting_rewards - largest_dice_roll_for_tax_exempt_sphinx_riddle_solution_fees

scope ComputeTaxableDiceRollForEncryptionConsultingIncome:
    definition dice_roll_for_tax_exempt_fairy_tale_royalties equals output of ComputeDiceRollForQuantumEncryptionNYC with { --flag: flag }.out

scope ComputeTaxableDiceRollForCybersecurityStartupInvestmentProfits:
    definition dice_roll_for_dice_related_business_expenses equals output of ComputeDiceRollForInternetOfThingsSecurityConsultingFees with { --flag: flag }.out

declaration scope ComputeTaxableGremlinTechnologySales:
    input flag content list of C
    context dice_roll_for_taxable_gremlin_technology_sales content integer
    context dice_roll_for_tax_prep_fees content integer
    output out content integer

scope ComputeDiceRollForSecurityAwarenessTrainingEarnings:
    exception
    definition dice_roll_for_homebuyer_credit under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 25 }).val) }.out
    consequence equals output of ComputeTaxableCryptocurrencySecurityProfits with { --flag: flag }.out

declaration scope ComputeNYCGamblingWinnings:
    input flag content list of C
    context quantity_of_pips_for_taxable_gifts content integer
    context number_of_dice_thrown_for_taxable_kraken_escort_services content integer
    context dice_roll_for_taxable_gremlin_technology_sales content integer
    context dice_roll_for_tax_exempt_time_machine_rental_income content integer
    output tax content money

scope ComputeTaxableDiceRollForEndpointSecurityIncome:
    exception
    definition number_of_dice_used_for_tax_credits under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 17 }).val) }.out
    consequence equals output of ComputeNYCVulnerabilityAssessment with { --flag: flag }.out

declaration scope ComputeTaxableDiceRollForQuantumEncryptionProfits:
    input flag content list of C
    context largest_dice_roll_for_taxable_nymph_landscaping_profits content integer
    context quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues content integer
    output out content integer

scope ComputeTaxCredits:
    exception
    definition quantity_of_pips_deducted_for_home_office under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 14 }).val) }.out
    consequence equals output of ComputeGamblingTaxCredit with { --flag: flag }.out

scope ComputeForeignIncome:
    definition dice_thrown_for_taxable_intergalactic_trade_profits equals output of ComputeDisasterLosses with { --flag: flag }.out

scope ComputeTaxableDiceRollForCybersecurityStartupInvestmentProfits:
    exception
    definition dice_roll_for_dice_related_business_expenses under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 9 }).val) }.out
    consequence equals output of ComputeNYCDiceRollForPhysicalSecuritySystem with { --flag: flag }.out

declaration scope ComputeTaxableDiceRollForArtificialIntelligenceSecurityIncome:
    input flag content list of C
    output out content integer

scope ComputeDiceForSecurityComplianceAuditNYC:
    exception
    definition largest_dice_roll_for_employer_provided_benefits under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 14 }).val) }.out
    consequence equals output of ComputeNYCDiceRollForPhysicalSecuritySystem with { --flag: flag }.out

scope ComputeChildTaxCredit:
    definition dice_roll_for_tax_exempt_time_machine_rental_income equals output of ComputeDiceForNYCThreatIntelligence with { --flag: flag }.out

scope ComputeTaxableIncome:
    definition dice_roll_for_volunteer_firefighter_credit equals dice_roll_for_tax_exempt_mermaid_song_royalties + quantity_of_pips_claimed_for_taxable_unicorn_breeding

scope ComputeRetirementContributions:
    definition tax equals if
    dice_roll_for_homebuyer_credit = number_of_dice_used_for_tax_credits
    then $0
    else $1000

scope ComputeTaxableDiceRollForQuantumEncryptionProfits:
    definition out equals largest_dice_roll_for_taxable_nymph_landscaping_profits + quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues

declaration scope ComputeDiceForNYCEncryptionConsulting:
    input flag content list of C
    context dice_roll_for_homebuyer_credit content integer
    context dice_thrown_for_taxable_lottery_winnings content integer
    output out content integer

declaration scope ComputeDiceRollForInternetOfThingsSecurityConsultingFees:
    input flag content list of C
    output out content integer

scope ComputeNYCAutonomousVehicleSecurity:
    definition number_of_dependents_dice_claimed equals dice_roll_for_taxable_oil_and_gas_income + number_of_dice_used_for_tax_credits

scope ComputeTaxableDragonSlayingEarnings:
    definition dice_roll_for_taxable_philosopher_stone_sales equals output of ComputeNYCArtificialIntelligenceSecurity with { --flag: flag }.out

scope ComputeTaxableBingoPrizes:
    definition dice_result_for_charitable_contributions equals output of ComputeDiceForNYCBusinessExpenses with { --flag: flag }.out

scope ComputeFringeBenefits:
    definition dice_roll_for_dice_related_business_expenses equals output of ComputeDiceRollForOnlineGamblingProfits with { --flag: flag }.out

scope ComputeRetirementContributions:
    exception
    definition quantity_of_pips_for_healthcare_deductions under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 9 }).val) }.out
    consequence equals output of ComputeNYCTaxableIncome with { --flag: flag }.out

declaration scope ComputeDiceRollForPenetrationTestingEarnings:
    input flag content list of C
    context dice_roll_for_business_expenses content integer
    context dice_roll_for_dice_related_business_expenses content integer
    output out content integer

scope ComputeTaxableDiceRollForOnlineSlotMachinePayouts:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 4 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 31 }.val

scope ComputeDiceRollForLotteryWinnings:
    definition dice_roll_for_tax_exempt_feng_shui_dragon_advice_fees equals output of ComputeDiceForSecurityAuditNYC with { --flag: flag }.out

scope ComputeDiceRollForNYCSecurityTokenOffering:
    definition tax equals if
    dice_thrown_for_taxable_lottery_winnings = largest_dice_roll_for_interest_income
    then $0
    else $1000

scope ComputeFringeBenefits:
    exception
    definition dice_roll_for_dice_related_business_expenses under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 7 }).val) }.out
    consequence equals output of ComputeStandardDeduction with { --flag: flag }.out

scope ComputeDiceRollForQuantumKeyDistributionNYC:
    exception
    definition number_of_dice_for_earned_income_tax_credit under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 30 }).val) }.out
    consequence equals number_of_dice_thrown_for_military_service_deductions + dice_roll_for_tax_exempt_alien_income

scope ComputeTaxableDragonSlayingEarnings:
    exception
    definition number_of_dice_thrown_for_retirement_contributions under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 27 }).val) }.out
    consequence equals output of ComputeNYCDigitalSecurityIncome with { --flag: flag }.out

scope ComputeDiceRollForPenetrationTestingEarnings:
    exception
    definition dice_roll_for_dice_related_business_expenses under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 7 }).val) }.out
    consequence equals output of ComputeTaxableFengShuiDragonAdviceFees with { --flag: flag }.out

declaration scope ComputeDiceRollForIndustrialControlSystemSecurityIncome:
    input flag content list of C
    output out content integer

scope ComputeDiceRollForOnlineRouletteWinnings:
    exception
    definition number_of_dice_used_for_vehicle_expenses under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 29 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForVulnerabilityAssessmentProfits with { --flag: flag }.out

scope ComputeDiceRollForSecurityTokenOfferingConsultingEarnings:
    definition tax equals if
    number_of_dice_used_for_vehicle_expenses = dice_roll_for_tax_exempt_ghost_writing_revenue
    then $0
    else $1000

scope ComputeTaxableDiceRollForEndpointSecurityIncome:
    definition number_of_dice_thrown_for_taxable_ogre_consulting_fees equals -425

scope ComputeTaxableDiceRollForOnlineHorseRacingWinnings:
    definition dice_thrown_for_disaster_losses equals output of ComputeTaxablePokerTournamentWinnings with { --flag: flag }.out

declaration scope ComputeDiceRollForThreatIntelligenceServicesIncome:
    input flag content list of C
    output out content integer

declaration scope ComputeTaxableGriffinDeliveryServices:
    input flag content list of C
    context largest_dice_roll_for_taxable_pegasus_air_travel_revenues content integer
    context quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues content integer
    output out content integer

scope ComputeDiceRollForIncidentResponseServices:
    definition quantity_of_pips_claimed_for_taxable_unicorn_breeding equals output of ComputeTaxableDiceRollForCloudSecurityConsultingFees with { --flag: flag }.out

scope ComputeDiceRelatedBusinessExpenses:
    definition dice_roll_for_state_and_local_taxes equals output of ComputeGamblingTaxCredit with { --flag: flag }.out

scope ComputeVehicleExpenses:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 9 }).val) }.out
    consequence equals dice_roll_for_tax_exempt_fairy_dust_trade_incomes * quantity_of_pips_for_tax_exempt_interest

declaration scope ComputeStateAndLocalTaxes:
    input flag content list of C
    context number_of_dice_used_for_foreign_tax_credit content integer
    context total_dice_investment_losses content integer
    output out content integer

declaration scope ComputeNYCDiceRollForPhysicalSecuritySystem:
    input flag content list of C
    output out content integer

scope ComputeTaxableDiceRollForOnlineSlotMachinePayouts:
    definition out equals output of Dicer2 with { --flag: flag --index: 27 }.val

scope ComputeMortgageInterest:
    definition out equals largest_dice_roll_for_taxable_superhero_salaries - dice_thrown_for_gambling_winnings

scope ComputeTaxableDiceRollForOnlinePokerIncome:
    exception
    definition largest_dice_amount_exempted under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 28 }).val) }.out
    consequence equals output of ComputeDiceRollForQuantumEncryptionNYC with { --flag: flag }.out

scope ComputeTaxableDiceRollForCriticalInfrastructureProtectionProfits:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 29 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 21 }.val

scope ComputeNYCAutonomousVehicleSecurity:
    definition largest_dice_roll_for_taxable_superhero_salaries equals 15908

scope ComputeDiceRollForLotteryWinnings:
    exception
    definition dice_roll_for_tax_exempt_feng_shui_dragon_advice_fees under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 4 }).val) }.out
    consequence equals output of ComputeNYCArtificialIntelligenceSecurity with { --flag: flag }.out

scope ComputeDiceRollForNYCSecurityTokenOffering:
    exception
    definition number_of_dice_used_for_foreign_tax_credit under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 18 }).val) }.out
    consequence equals output of ComputeMovingExpenses with { --flag: flag }.out

scope ComputeTaxableCryptocurrencySecurityProfits:
    definition quantity_of_pips_claimed_for_dependent_care_credit equals output of ComputeDiceRollForThreatIntelligenceServicesIncome with { --flag: flag }.out

scope ComputeGamblingDebtInterest:
    definition number_of_dice_for_taxable_fishing_incomes equals output of ComputeTaxableDiceRollForCyberInsuranceConsultationProfits with { --flag: flag }.out

scope ComputeFringeBenefits:
    exception
    definition quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 22 }).val) }.out
    consequence equals output of ComputeDiceRollForQuantumKeyDistributionConsultingFees with { --flag: flag }.out

scope ComputeTaxExemptYetiTourismIncome:
    exception
    definition quantity_of_pips_claimed_for_taxable_gold_discoveries under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 5 }).val) }.out
    consequence equals output of ComputeDiceRollForQuantumEncryptionNYC with { --flag: flag }.out

scope ComputeNYCArtificialIntelligenceSecurity:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 21 }).val) }.out
    consequence equals dice_roll_for_tax_exempt_time_machine_rental_income + largest_dice_roll_for_foreign_income

scope ComputeDisasterLosses:
    definition out equals output of Dicer2 with { --flag: flag --index: 18 }.val

scope ComputeDiceRollForPenetrationTestingEarnings:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 16 }).val) }.out
    consequence equals dice_roll_for_business_expenses - dice_roll_for_dice_related_business_expenses

declaration scope ComputeDiceForSecurityAuditNYC:
    input flag content list of C
    context number_of_dice_for_taxable_unicorn_riding_fees content integer
    context number_of_dependents_dice_claimed content integer
    output out content integer

scope ComputeDiceForIncidentResponseNYC:
    exception
    definition quantity_of_pips_claimed_for_tax_exempt_dwarf_gem_mining_profits under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 10 }).val) }.out
    consequence equals output of ComputeNYCDiceRollForSecurityAwareness with { --flag: flag }.out

scope ComputeNYCDiceRollForBiometricSecurity:
    exception
    definition largest_dice_used_for_capital_gains under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 30 }).val) }.out
    consequence equals 22285

scope ComputeTaxableTimeMachineRentalIncome:
    definition dice_thrown_for_taxable_chimera_circus_profits equals output of ComputeDiceRollForFantasySportsPrizes with { --flag: flag }.out

declaration scope ComputeNYCAutonomousVehicleSecurity:
    input flag content list of C
    context dice_roll_for_taxable_oil_and_gas_income content integer
    context number_of_dice_used_for_tax_credits content integer
    context number_of_dependents_dice_claimed content integer
    context largest_dice_roll_for_taxable_superhero_salaries content integer
    output tax content money

scope ComputeTaxableDiceRollForOnlineFantasySportsPrizes:
    definition largest_dice_roll_for_tax_exempt_yeti_tourism_income equals output of ComputeSelfEmploymentIncome with { --flag: flag }.out

declaration scope ComputeDiceRollForLotteryWinnings:
    input flag content list of C
    context dice_roll_for_tax_exempt_fairy_tale_royalties content integer
    context dice_roll_for_tax_exempt_feng_shui_dragon_advice_fees content integer
    context quantity_of_pips_for_taxable_gifts content integer
    context largest_dice_roll_for_interest_income content integer
    output tax content money

scope ComputeTaxableDiceRollIncome:
    definition out equals quantity_of_pips_claimed_for_taxable_chupacabra_pest_control - dice_roll_for_tax_exempt_fairy_tale_royalties

scope ComputeTaxableDragonSlayingEarnings:
    exception
    definition largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 3 }).val) }.out
    consequence equals 18452

scope ComputeTaxablePokerTournamentWinnings:
    exception
    definition quantity_of_pips_claimed_for_taxable_unicorn_breeding under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 4 }).val) }.out
    consequence equals output of ComputeTaxableNymphLandscapingProfits with { --flag: flag }.out

scope ComputeDiceForNYCSecureSoftwareDevelopment:
    definition number_of_dice_for_taxable_fishing_incomes equals output of ComputeNYCDiceRollForPhysicalSecuritySystem with { --flag: flag }.out

scope ComputeGamblingLosses:
    exception
    definition dice_thrown_for_taxable_ghost_hunting_rewards under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 16 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForSecurityRiskAssessmentProfits with { --flag: flag }.out

scope ComputeStudentLoanInterest:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 3 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 3 }.val

scope ComputeTaxExemptSphinxRiddleSolutionFees:
    exception
    definition largest_dice_roll_for_taxable_superhero_salaries under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 27 }).val) }.out
    consequence equals dice_roll_for_tax_exempt_fairy_tale_royalties - dice_roll_for_volunteer_firefighter_credit

scope ComputeTaxableGriffinDeliveryServices:
    exception
    definition quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 27 }).val) }.out
    consequence equals output of ComputeDisasterLosses with { --flag: flag }.out

scope ComputeDiceRollForHorseRacingWinnings:
    definition tax equals if
    dice_roll_for_tax_exempt_feng_shui_dragon_advice_fees = dice_roll_for_income
    then $0
    else $1000

scope ComputeEarnedIncomeCredit:
    definition quantity_of_pips_claimed_for_tax_exempt_troll_bridge_toll_revenues equals output of ComputeForeignIncome with { --flag: flag }.out

scope ComputeTaxableCardGameProfits:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 6 }).val) }.out
    consequence equals number_of_dice_thrown_for_taxable_ogre_consulting_fees * dice_roll_for_taxable_wizard_consulting_fees

scope ComputeTaxExemptYetiTourismIncome:
    definition number_of_dice_thrown_for_disability_deductions equals output of ComputeNYCFirewallUpgradeIncome with { --flag: flag }.out

scope ComputeDiceRollForLotteryWinnings:
    definition tax equals if
    quantity_of_pips_for_taxable_gifts = largest_dice_roll_for_interest_income
    then $0
    else $1000

scope ComputeTaxableDiceRollForEncryptionConsultingIncome:
    exception
    definition largest_dice_roll_for_tax_exempt_sphinx_riddle_solution_fees under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 30 }).val) }.out
    consequence equals output of ComputeSelfEmploymentIncome with { --flag: flag }.out

scope ComputeTaxableFairyTaleRoyalties:
    definition largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings equals output of ComputeDiceForNYCThreatIntelligence with { --flag: flag }.out

scope ComputeTaxableCrapsGameEarnings:
    exception
    definition quantity_of_pips_for_tax_exempt_interest under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 24 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForDarkWebMonitoringProfits with { --flag: flag }.out

declaration scope ComputeTaxableDiceRollForCybersecurityStartupInvestmentProfits:
    input flag content list of C
    context largest_dice_roll_for_employer_provided_benefits content integer
    context dice_roll_for_dice_related_business_expenses content integer
    output out content integer

scope ComputeTaxableDiceRollForDistributedDenialOfServiceProtectionFees:
    definition out equals largest_dice_roll_for_taxable_superhero_salaries + dice_roll_for_state_and_local_taxes

declaration scope ComputeDiceRollForOnlineGamblingProfits:
    input flag content list of C
    output out content integer

declaration scope ComputeEarnedIncomeCredit:
    input flag content list of C
    context number_of_exemptions_rolled content integer
    context quantity_of_pips_claimed_for_tax_exempt_troll_bridge_toll_revenues content integer
    context largest_dice_amount_for_educational_expenses content integer
    context number_of_dice_thrown_for_taxable_ogre_consulting_fees content integer
    output tax content money

scope ComputeNYCEndpointSecurityIncome:
    definition out equals largest_dice_roll_for_depletion_deduction - quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales

scope ComputeGamblingExciseTax:
    definition out equals output of Dicer2 with { --flag: flag --index: 30 }.val

scope ComputeDiceRollForCasinoEarnings:
    exception
    definition largest_dice_roll_for_depletion_deduction under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 25 }).val) }.out
    consequence equals 169

scope ComputeDiceRollForCasinoEarnings:
    exception
    definition number_of_dice_for_taxable_fishing_incomes under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 17 }).val) }.out
    consequence equals output of ComputeNYCDistributedDenialOfService with { --flag: flag }.out

declaration scope ComputeDiceRelatedBusinessExpenses:
    input flag content list of C
    context dice_roll_for_state_and_local_taxes content integer
    context quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues content integer
    output out content integer

scope ComputeTaxExemptMermaidSongRoyalties:
    exception
    definition quantity_of_pips_deducted_for_historic_rehabilitation_credit under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 10 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForOnlineGameShowWinnings with { --flag: flag }.out

scope ComputeDiceRollForNYCSecurityTokenOffering:
    exception
    definition largest_dice_amount_for_educational_expenses under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 5 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForDigitalForensicsIncome with { --flag: flag }.out

scope ComputeTaxableGhostWritingRevenue:
    definition dice_thrown_for_gambling_winnings equals output of ComputeTaxableDiceRollForOnlineSlotMachinePayouts with { --flag: flag }.out

scope ComputeTaxableGriffinDeliveryServices:
    definition out equals largest_dice_roll_for_taxable_pegasus_air_travel_revenues - quantity_of_pips_claimed_for_tax_exempt_centaur_farmland_revenues

scope ComputeGamblingTaxCredit:
    definition out equals output of Dicer2 with { --flag: flag --index: 12 }.val

scope ComputeTaxableDiceRollForOnlineHorseRacingWinnings:
    definition quantity_of_pips_claimed_for_tax_exempt_vampire_blood_sales equals output of ComputeDiceRollForFantasySportsPrizes with { --flag: flag }.out

scope ComputeTaxableDiceRollForSecureCodeReviewProfits:
    definition dice_thrown_for_taxable_fringe_benefits equals output of ComputeDiceRollForIdentityAccessManagementIncome with { --flag: flag }.out

scope ComputeNYCCryptocurrencyProfits:
    exception
    definition number_of_dependents_dice under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 12 }).val) }.out
    consequence equals output of ComputeStandardDeduction with { --flag: flag }.out

scope ComputeTaxableDiceRollForOnlineSportsBettingGains:
    definition dice_roll_for_cryptocurrency_transactions equals output of ComputeItemizedDeductions with { --flag: flag }.out

scope ComputeTaxExemptLuckDragonTreasureLocationServices:
    definition number_of_dice_for_health_savings_account_contributions equals output of ComputeTaxableDiceRollForArtificialIntelligenceSecurityIncome with { --flag: flag }.out

scope ComputeNYCAutonomousVehicleSecurity:
    exception
    definition number_of_dice_used_for_tax_credits under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 2 }).val) }.out
    consequence equals output of ComputeTaxableGhostWritingRevenue with { --flag: flag }.out

scope ComputeTaxableDiceRollForSecurityRiskAssessmentProfits:
    definition out equals output of Dicer2 with { --flag: flag --index: 1 }.val

scope ComputeTaxableFairyDustTradeIncomes:
    exception
    definition largest_dice_amount_exempted under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 2 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForSecurityRiskAssessmentProfits with { --flag: flag }.out

scope ComputeTaxExemptMermaidSongRoyalties:
    exception
    definition largest_dice_roll_for_foreign_income under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 25 }).val) }.out
    consequence equals quantity_of_pips_deducted_for_historic_rehabilitation_credit + dice_roll_for_tax_exempt_fairy_dust_trade_incomes

scope ComputeNYCGamblingWinnings:
    exception
    definition dice_roll_for_tax_exempt_time_machine_rental_income under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 8 }).val) }.out
    consequence equals 13620

declaration scope ComputeTaxExemptDwarfGemMiningProfits:
    input flag content list of C
    context number_of_dice_for_taxable_unicorn_riding_fees content integer
    context dice_roll_for_tax_exempt_fairy_tale_royalties content integer
    output out content integer

scope ComputeNYCArtificialIntelligenceSecurity:
    exception
    definition largest_dice_roll_for_foreign_income under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 15 }).val) }.out
    consequence equals output of ComputeDiceRollForInternetOfThingsSecurityConsultingFees with { --flag: flag }.out

scope ComputeTaxCredits:
    definition out equals quantity_of_pips_deducted_for_home_office * quantity_of_pips_claimed_for_taxable_chupacabra_pest_control

scope ComputeNYCDiceRollForCloudSecurity:
    definition largest_dice_roll_for_foreign_income equals output of ComputeDiceRollForInternetOfThingsSecurityConsultingFees with { --flag: flag }.out

scope ComputeDiceRollForIndustrialControlSystemSecurityIncome:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 26 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 13 }.val

scope ComputeTaxableDiceRollForMalwareRemovalServices:
    definition dice_roll_for_tax_prep_fees equals output of ComputeDiceForNYCBusinessExpenses with { --flag: flag }.out

scope ComputeDiceForIoTSecurityConsultingNYC:
    definition tax equals if
    largest_dice_roll_for_taxable_superhero_salaries = quantity_of_pips_claimed_for_taxable_griffin_delivery_services
    then $0
    else $1000

scope ComputeDiceRollForSecurityAwarenessTrainingEarnings:
    definition number_of_exemptions_rolled equals output of ComputeTaxableDiceRollForCybersecurityStartupInvestmentProfits with { --flag: flag }.out

scope ComputeTaxExemptYetiTourismIncome:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 5 }).val) }.out
    consequence equals quantity_of_pips_claimed_for_taxable_gold_discoveries * number_of_dice_thrown_for_disability_deductions

declaration scope ComputeTaxExemptMermaidSongRoyalties:
    input flag content list of C
    context quantity_of_pips_deducted_for_historic_rehabilitation_credit content integer
    context dice_roll_for_tax_exempt_fairy_dust_trade_incomes content integer
    context largest_dice_roll_for_foreign_income content integer
    context dice_roll_for_tax_exempt_alien_income content integer
    output tax content money

scope ComputeGamblingExciseTax:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 26 }).val) }.out
    consequence equals
    output of Dicer2 with { --flag: flag --index: 26 }.val

scope ComputeDiceRollForSportsBettingGains:
    exception
    definition dice_roll_for_energy_efficiency_credits under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals output of ComputeDiceForNYCEncryptionConsulting with { --flag: flag }.out

declaration scope ComputeTaxableGhostWritingRevenue:
    input flag content list of C
    context dice_thrown_for_homeownership_credits content integer
    context dice_thrown_for_gambling_winnings content integer
    output out content integer

scope ComputeDiceForNYCMalwareRemoval:
    exception
    definition out under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 1 }).val) }.out
    consequence equals largest_dice_roll_for_tax_exempt_leprechaun_gifts + dice_roll_for_dice_related_business_expenses

scope ComputeNYCVulnerabilityAssessment:
    definition quantity_of_pips_for_dividend_income equals output of ComputeTaxableDiceRollForCloudSecurityConsultingFees with { --flag: flag }.out

scope ComputeDiceRollForIndustrialControlSystemSecurityIncome:
    definition out equals output of Dicer2 with { --flag: flag --index: 25 }.val

declaration scope ComputeDiceRollForBiometricSecurityConsultingEarnings:
    input flag content list of C
    context dice_result_for_charitable_contributions content integer
    context dice_roll_for_social_security_benefits content integer
    output out content integer

scope ComputeTaxableDiceRollForMalwareRemovalServices:
    definition number_of_dice_thrown_for_taxable_dragonslaying_earnings equals output of ComputeHomeOfficeDeduction with { --flag: flag }.out

scope ComputeDiceRollForSecureSoftwareDevelopmentIncome:
    exception
    definition quantity_of_pips_for_taxable_gifts under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 0 }).val) }.out
    consequence equals output of ComputeNYCCalcDiceRollForSecurityRiskAssessment with { --flag: flag }.out

scope ComputeChildTaxCredit:
    exception
    definition dice_result_for_charitable_contributions under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 0 }).val) }.out
    consequence equals output of ComputeDiceForSecurityComplianceAuditNYC with { --flag: flag }.out

scope ComputeTaxableDiceRollForOnlineGameShowWinnings:
    exception
    definition number_of_dice_used_for_tax_credits under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 1 }).val) }.out
    consequence equals output of ComputeDiceRollForInternetOfThingsSecurityConsultingFees with { --flag: flag }.out

scope ComputeNYCDiceRollForBiometricSecurity:
    exception
    definition dice_roll_for_moving_expenses under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 30 }).val) }.out
    consequence equals output of ComputeDiceForSecurityAuditNYC with { --flag: flag }.out

scope ComputeStateAndLocalTaxes:
    exception
    definition number_of_dice_used_for_foreign_tax_credit under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 7 }).val) }.out
    consequence equals output of ComputeDiceForNYCBusinessExpenses with { --flag: flag }.out

declaration scope ComputeGamblingWinnings:
    input flag content list of C
    context number_of_dice_thrown_for_taxable_kraken_escort_services content integer
    context number_of_exemptions_rolled content integer
    output out content integer

declaration scope ComputeTaxablePokerTournamentWinnings:
    input flag content list of C
    context quantity_of_pips_claimed_for_taxable_unicorn_breeding content integer
    context number_of_dice_used_for_vehicle_expenses content integer
    output out content integer

scope ComputeTaxableDiceRollIncome:
    exception
    definition dice_roll_for_tax_exempt_fairy_tale_royalties under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 22 }).val) }.out
    consequence equals output of ComputeEnergyEfficiencyCredits with { --flag: flag }.out

scope ComputeDiceForSecurityComplianceAuditNYC:
    definition largest_dice_roll_for_employer_provided_benefits equals output of ComputeDiceForNYCBusinessExpenses with { --flag: flag }.out

declaration scope ComputeDiceForNYCSecurityTraining:
    input flag content list of C
    context number_of_dice_used_for_vehicle_expenses content integer
    context quantity_of_pips_deducted_for_mortgage_interest content integer
    context dice_roll_for_tax_exempt_bond_interest content integer
    context quantity_of_pips_deducted_for_home_office content integer
    output tax content money

scope ComputeDiceForIoTSecurityConsultingNYC:
    exception
    definition largest_dice_roll_for_taxable_sasquatch_tour_guide_earnings under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 20 }).val) }.out
    consequence equals output of ComputeTaxableDiceRollForDistributedDenialOfServiceProtectionFees with { --flag: flag }.out

scope ComputeTaxableDiceRollForFirewallUpgradeIncome:
    exception
    definition out under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 5 }).val) }.out
    consequence equals number_of_dice_for_earned_income_tax_credit - quantity_of_pips_claimed_for_taxable_griffin_delivery_services

scope ComputeTaxableDiceRollForHackerBountyRewards:
    exception
    definition quantity_of_pips_claimed under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 15 }).val) }.out
    consequence equals output of ComputeTaxableCrapsGameEarnings with { --flag: flag }.out

scope ComputeInvestmentIncome:
    definition largest_dice_used_for_adoption_expenses equals dice_roll_for_homebuyer_credit + quantity_of_pips_for_healthcare_deductions

scope ComputeTaxableIncome:
    exception
    definition dice_roll_for_volunteer_firefighter_credit under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 19 }).val) }.out
    consequence equals dice_roll_for_tax_exempt_mermaid_song_royalties * quantity_of_pips_claimed_for_taxable_unicorn_breeding

scope ComputeDiceRollForSecurityAwarenessTrainingEarnings:
    exception
    definition number_of_exemptions_rolled under condition
    output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 14 }).val) }.out
    consequence equals output of ComputeDiceForNYCThreatIntelligence with { --flag: flag }.out

scope ComputeTaxableDiceGameRoyalties:
    exception
    definition largest_dice_used_for_capital_gains under condition
    not output of Dicer with { --val: ((output of Dicer2 with { --flag: flag --index: 3 }).val) }.out
    consequence equals number_of_dice_thrown_for_military_service_deductions + dice_roll_for_tax_exempt_fairy_tale_royalties

scope ComputeTaxCredits:
    definition quantity_of_pips_deducted_for_home_office equals output of ComputeDiceRollForIndustrialControlSystemSecurityIncome with { --flag: flag }.out

declaration scope Z1:
    input a condition
    input b condition
    output out condition

scope Z1:
    rule out under condition a consequence fulfilled
    rule out under condition b consequence fulfilled

declaration scope Z2:
    input a condition
    input b condition
    output out condition

scope Z2:
    rule out under condition a and b consequence fulfilled

declaration scope Z3:
    input a condition
    output out condition

scope Z3:
    rule out under condition not a consequence fulfilled

declaration scope Z4:
    input a condition
    input b condition
    output out condition
    q1 scope Z1
    q2 scope Z2
    q3 scope Z2
    q4 scope Z3
    q5 scope Z3
    q6 scope Z3

scope Z4:
    definition q2.a equals a
    definition q2.b equals b
    definition q4.a equals a
    definition q5.a equals b
    definition q3.a equals q4.out
    definition q3.b equals q5.out
    definition q1.a equals q2.out
    definition q1.b equals q3.out
    definition q6.a equals q1.out
    definition out equals q6.out

declaration scope Z5:
    input a condition
    input b condition
    input c condition
    output d condition
    output e condition
    q1 scope Z4
    q2 scope Z4
    q3 scope Z2
    q4 scope Z2
    q5 scope Z1

scope Z5:
    definition q1.a equals a
    definition q1.b equals b
    definition q2.a equals q1.out
    definition q2.b equals c
    definition q3.a equals q1.out
    definition q3.b equals c
    definition q4.a equals a
    definition q4.b equals b
    definition q5.a equals q3.out
    definition q5.b equals q4.out
    definition d equals q2.out
    definition e equals q5.out

declaration scope Dicer:
    input val content integer
    output out condition

scope Dicer:
    rule out under condition (decimal of val) != ((round of ((decimal of val) / 2.0)) * 2.0) consequence fulfilled

declaration structure C:
    data index content integer
    data val content integer

declaration scope Dicer2:
    input flag content list of C
    input index content integer
    context tmp content list of C
    output val content integer

scope Dicer2:
    definition tmp equals x among flag such that x.index = index
    definition val equals (x among tmp such that 0 is minimum or if list empty then C { --index: -1 --val: -1}).val

declaration scope DiceFlagFormat:
    input flag content list of C
    output is_valid condition

scope DiceFlagFormat:
    rule is_valid under condition
    ((output of Dicer2 with { --flag: flag --index: 0 }).val = 100)
    and ((output of Dicer2 with { --flag: flag --index: 1 }).val = 105)
    and ((output of Dicer2 with { --flag: flag --index: 2 }).val = 99)
    and ((output of Dicer2 with { --flag: flag --index: 3 }).val = 101)
    and ((output of Dicer2 with { --flag: flag --index: 4 }).val = 123)
    and ((output of Dicer2 with { --flag: flag --index: 31 }).val = 125)
    consequence fulfilled

declaration scope DiceFlagLengthChecker:
    input flag content list of C
    output is_valid condition

scope DiceFlagLengthChecker:
    rule is_valid under condition
    (number of flag) = 32
    consequence fulfilled

declaration scope KeyCheck:
    input key content list of C
    output is_valid condition

    q42 scope Z4
    q41 scope Z4
    q66 scope Z5
    q97 scope Z4
    q24 scope Z5
    q145 scope Z1
    q127 scope Z4
    q48 scope Z4
    q156 scope Z1
    q6 scope Z5
    q139 scope Z1
    q150 scope Z1
    q142 scope Z1
    q124 scope Z4
    q155 scope Z1
    q78 scope Z5
    q105 scope Z4
    q148 scope Z1
    q95 scope Z5
    q70 scope Z5
    q21 scope Z5
    q44 scope Z4
    q158 scope Z1
    q16 scope Z5
    q50 scope Z4
    q27 scope Z5
    q88 scope Z5
    q81 scope Z5
    q19 scope Z5
    q35 scope Z4
    q154 scope Z1
    q110 scope Z4
    q159 scope Z1
    q1 scope Z5
    q133 scope Z1
    q30 scope Z5
    q77 scope Z5
    q86 scope Z5
    q125 scope Z4
    q25 scope Z5
    q72 scope Z5
    q102 scope Z4
    q5 scope Z5
    q85 scope Z5
    q109 scope Z4
    q114 scope Z4
    q122 scope Z4
    q20 scope Z5
    q13 scope Z5
    q136 scope Z1
    q36 scope Z4
    q75 scope Z5
    q71 scope Z5
    q92 scope Z5
    q91 scope Z5
    q118 scope Z4
    q147 scope Z1
    q74 scope Z5
    q55 scope Z4
    q38 scope Z4
    q43 scope Z4
    q9 scope Z5
    q31 scope Z5
    q23 scope Z5
    q84 scope Z5
    q98 scope Z4
    q135 scope Z1
    q111 scope Z4
    q80 scope Z5
    q64 scope Z5
    q146 scope Z1
    q61 scope Z4
    q140 scope Z1
    q15 scope Z5
    q2 scope Z5
    q101 scope Z4
    q90 scope Z5
    q157 scope Z1
    q87 scope Z5
    q152 scope Z1
    q83 scope Z5
    q93 scope Z5
    q138 scope Z1
    q129 scope Z1
    q132 scope Z1
    q100 scope Z4
    q49 scope Z4
    q108 scope Z4
    q52 scope Z4
    q68 scope Z5
    q12 scope Z5
    q120 scope Z4
    q149 scope Z1
    q143 scope Z1
    q11 scope Z5
    q60 scope Z4
    q33 scope Z4
    q34 scope Z4
    q57 scope Z4
    q79 scope Z5
    q26 scope Z5
    q32 scope Z4
    q40 scope Z4
    q17 scope Z5
    q115 scope Z4
    q128 scope Z1
    q73 scope Z5
    q89 scope Z5
    q103 scope Z4
    q106 scope Z4
    q54 scope Z4
    q123 scope Z4
    q121 scope Z4
    q113 scope Z4
    q131 scope Z1
    q39 scope Z4
    q46 scope Z4
    q45 scope Z4
    q7 scope Z5
    q62 scope Z4
    q112 scope Z4
    q117 scope Z4
    q130 scope Z1
    q151 scope Z1
    q14 scope Z5
    q58 scope Z4
    q153 scope Z1
    q29 scope Z5
    q0 scope Z5
    q65 scope Z5
    q51 scope Z4
    q141 scope Z1
    q82 scope Z5
    q134 scope Z1
    q67 scope Z5
    q59 scope Z4
    q99 scope Z4
    q126 scope Z4
    q56 scope Z4
    q119 scope Z4
    q144 scope Z1
    q53 scope Z4
    q107 scope Z4
    q22 scope Z5
    q3 scope Z5
    q76 scope Z5
    q116 scope Z4
    q28 scope Z5
    q94 scope Z5
    q63 scope Z4
    q69 scope Z5
    q10 scope Z5
    q8 scope Z5
    q137 scope Z1
    q47 scope Z4
    q96 scope Z4
    q4 scope Z5
    q104 scope Z4
    q37 scope Z4
    q18 scope Z5

scope KeyCheck:
    definition q30.b equals output of Dicer with { --val: 1 }.out
    definition q19.b equals output of Dicer with { --val: 0 }.out
    definition q70.c equals q69.e
    definition q126.b equals output of Dicer with { --val: 1 }.out
    definition q33.a equals q25.d
    definition q78.c equals q77.e
    definition q75.a equals q45.out
    definition q29.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 22 }).val) }.out
    definition q71.a equals q40.out
    definition q1.b equals output of Dicer with { --val: 0 }.out
    definition q74.a equals q42.out
    definition q10.b equals output of Dicer with { --val: 1 }.out
    definition q20.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 13 }).val) }.out
    definition q55.a equals q16.d
    definition q115.a equals q83.d
    definition q0.b equals output of Dicer with { --val: 1 }.out
    definition q112.b equals output of Dicer with { --val: 1 }.out
    definition q129.b equals q121.out
    definition q4.c equals q3.e
    definition q134.b equals q110.out
    definition q31.b equals output of Dicer with { --val: 0 }.out
    definition q155.a equals q150.out
    definition q96.b equals output of Dicer with { --val: 0 }.out
    definition q55.b equals output of Dicer with { --val: 1 }.out
    definition q63.a equals q29.d
    definition q42.a equals q31.d
    definition q94.c equals q93.e
    definition q148.a equals q112.out
    definition q83.c equals q82.e
    definition q132.b equals q122.out
    definition q147.b equals q145.out
    definition q153.a equals q148.out
    definition q68.a equals q50.out
    definition q26.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 1 }).val) }.out
    definition q84.a equals q51.out
    definition q36.b equals output of Dicer with { --val: 1 }.out
    definition q10.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 29 }).val) }.out
    definition q39.a equals q5.d
    definition q29.b equals output of Dicer with { --val: 0 }.out
    definition q32.b equals output of Dicer with { --val: 0 }.out
    definition q89.a equals q36.out
    definition q99.a equals q67.d
    definition q97.a equals q65.d
    definition q90.b equals output of Dicer with { --val: 0 }.out
    definition q16.b equals output of Dicer with { --val: 1 }.out
    definition q7.c equals q6.e
    definition q12.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 7 }).val) }.out
    definition q3.b equals output of Dicer with { --val: 1 }.out
    definition q60.a equals q10.d
    definition q22.b equals output of Dicer with { --val: 0 }.out
    definition q90.a equals q32.out
    definition q118.a equals q86.d
    definition q150.a equals q142.out
    definition q154.b equals q147.out
    definition q53.b equals output of Dicer with { --val: 1 }.out
    definition q76.c equals q75.e
    definition q124.b equals output of Dicer with { --val: 1 }.out
    definition q94.b equals output of Dicer with { --val: 1 }.out
    definition q61.a equals q0.d
    definition q144.a equals q97.out
    definition q37.b equals output of Dicer with { --val: 0 }.out
    definition q89.b equals output of Dicer with { --val: 0 }.out
    definition q79.a equals q38.out
    definition q110.b equals output of Dicer with { --val: 0 }.out
    definition q90.c equals q89.e
    definition q82.a equals q55.out
    definition q105.a equals q73.d
    definition q29.c equals q28.e
    definition q17.b equals output of Dicer with { --val: 0 }.out
    definition q24.b equals output of Dicer with { --val: 1 }.out
    definition q105.b equals output of Dicer with { --val: 0 }.out
    definition q5.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 5 }).val) }.out
    definition q9.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 18 }).val) }.out
    definition q15.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 11 }).val) }.out
    definition q37.a equals q27.d
    definition q26.c equals q25.e
    definition q152.b equals q151.out
    definition q74.c equals q73.e
    definition q11.b equals output of Dicer with { --val: 1 }.out
    definition q42.b equals output of Dicer with { --val: 1 }.out
    definition q126.a equals q94.d
    definition q34.b equals output of Dicer with { --val: 0 }.out
    definition q21.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 28 }).val) }.out
    definition q47.b equals output of Dicer with { --val: 0 }.out
    definition q80.c equals q79.e
    definition q114.b equals output of Dicer with { --val: 0 }.out
    definition q79.c equals q78.e
    definition q27.b equals output of Dicer with { --val: 0 }.out
    definition q13.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 4 }).val) }.out
    definition q135.a equals q123.out
    definition q82.c equals q81.e
    definition q58.a equals q26.d
    definition q119.a equals q87.d
    definition q125.a equals q93.d
    definition q9.c equals q8.e
    definition q77.c equals q76.e
    definition q15.b equals output of Dicer with { --val: 1 }.out
    definition q48.b equals output of Dicer with { --val: 0 }.out
    definition q56.a equals q15.d
    definition q140.b equals q137.out
    definition q111.b equals output of Dicer with { --val: 1 }.out
    definition q112.a equals q80.d
    definition q7.b equals output of Dicer with { --val: 0 }.out
    definition q81.c equals q80.e
    definition q13.c equals q12.e
    definition q25.b equals output of Dicer with { --val: 1 }.out
    definition q66.b equals output of Dicer with { --val: 0 }.out
    definition q146.a equals q136.out
    definition q155.b equals q154.out
    definition q89.c equals q88.e
    definition q51.b equals output of Dicer with { --val: 1 }.out
    definition q28.b equals output of Dicer with { --val: 0 }.out
    definition q139.b equals q129.out
    definition q25.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 0 }).val) }.out
    definition q59.a equals q2.d
    definition q81.a equals q58.out
    definition q110.a equals q78.d
    definition q23.b equals output of Dicer with { --val: 1 }.out
    definition q86.c equals q85.e
    definition q45.a equals q28.d
    definition q75.b equals output of Dicer with { --val: 1 }.out
    definition q64.b equals output of Dicer with { --val: 1 }.out
    definition q130.b equals q109.out
    definition q5.b equals output of Dicer with { --val: 1 }.out
    definition q113.b equals output of Dicer with { --val: 1 }.out
    definition q91.a equals q41.out
    definition q92.b equals output of Dicer with { --val: 1 }.out
    definition q49.a equals q21.d
    definition q10.c equals q9.e
    definition q62.b equals output of Dicer with { --val: 0 }.out
    definition q2.b equals output of Dicer with { --val: 1 }.out
    definition q57.b equals output of Dicer with { --val: 0 }.out
    definition q71.b equals output of Dicer with { --val: 1 }.out
    definition q56.b equals output of Dicer with { --val: 1 }.out
    definition q145.a equals q138.out
    definition q49.b equals output of Dicer with { --val: 0 }.out
    definition q68.c equals q67.e
    definition q73.b equals output of Dicer with { --val: 0 }.out
    definition q43.a equals q20.d
    definition q121.b equals output of Dicer with { --val: 1 }.out
    definition q78.b equals output of Dicer with { --val: 0 }.out
    definition q68.b equals output of Dicer with { --val: 1 }.out
    definition q88.c equals q87.e
    definition q85.b equals output of Dicer with { --val: 1 }.out
    definition q50.a equals q23.d
    definition q27.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 10 }).val) }.out
    definition q116.b equals output of Dicer with { --val: 0 }.out
    definition q123.a equals q91.d
    definition q59.b equals output of Dicer with { --val: 0 }.out
    definition q4.b equals output of Dicer with { --val: 1 }.out
    definition q58.b equals output of Dicer with { --val: 0 }.out
    definition q73.a equals q61.out
    definition q99.b equals output of Dicer with { --val: 0 }.out
    definition q152.a equals q143.out
    definition q102.a equals q70.d
    definition q97.b equals output of Dicer with { --val: 0 }.out
    definition q31.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 30 }).val) }.out
    definition q116.a equals q84.d
    definition q142.a equals q117.out
    definition q52.a equals q4.d
    definition q133.b equals q103.out
    definition q100.b equals output of Dicer with { --val: 0 }.out
    definition q95.a equals q34.out
    definition q8.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 2 }).val) }.out
    definition q8.b equals output of Dicer with { --val: 1 }.out
    definition q12.c equals q11.e
    definition q6.b equals output of Dicer with { --val: 1 }.out
    definition q11.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 23 }).val) }.out
    definition q141.b equals q106.out
    definition q103.a equals q71.d
    definition q114.a equals q82.d
    definition q72.c equals q71.e
    definition q120.b equals output of Dicer with { --val: 1 }.out
    definition q28.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 20 }).val) }.out
    definition q21.b equals output of Dicer with { --val: 0 }.out
    definition q77.b equals output of Dicer with { --val: 1 }.out
    definition q95.c equals q94.e
    definition q83.b equals output of Dicer with { --val: 0 }.out
    definition q64.c equals false
    definition q85.a equals q62.out
    definition q9.b equals output of Dicer with { --val: 0 }.out
    definition q158.a equals q157.out
    definition q88.b equals output of Dicer with { --val: 1 }.out
    definition q67.a equals q56.out
    definition q17.c equals q16.e
    definition q154.a equals q141.out
    definition q51.a equals q1.d
    definition q17.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 27 }).val) }.out
    definition q33.b equals output of Dicer with { --val: 0 }.out
    definition q132.a equals q124.out
    definition q74.b equals output of Dicer with { --val: 0 }.out
    definition q85.c equals q84.e
    definition q101.a equals q69.d
    definition q82.b equals output of Dicer with { --val: 0 }.out
    definition q145.b equals q108.out
    definition q72.a equals q39.out
    definition q24.c equals q23.e
    definition q118.b equals output of Dicer with { --val: 1 }.out
    definition q109.b equals output of Dicer with { --val: 1 }.out
    definition q66.a equals q59.out
    definition q141.a equals q98.out
    definition q104.b equals output of Dicer with { --val: 0 }.out
    definition q157.b equals q149.out
    definition q156.a equals q153.out
    definition q27.c equals q26.e
    definition q75.c equals q74.e
    definition q158.b equals q156.out
    definition q35.a equals q13.d
    definition q96.a equals q64.d
    definition q62.a equals q22.d
    definition q93.b equals output of Dicer with { --val: 0 }.out
    definition q44.a equals q3.d
    definition q67.c equals q66.e
    definition q87.a equals q46.out
    definition q45.b equals output of Dicer with { --val: 1 }.out
    definition q119.b equals output of Dicer with { --val: 0 }.out
    definition q23.c equals q22.e
    definition q76.b equals output of Dicer with { --val: 1 }.out
    definition q137.a equals q132.out
    definition q52.b equals output of Dicer with { --val: 0 }.out
    definition q18.c equals q17.e
    definition q94.a equals q52.out
    definition q137.b equals q96.out
    definition q106.b equals output of Dicer with { --val: 0 }.out
    definition q20.b equals output of Dicer with { --val: 1 }.out
    definition q140.a equals q130.out
    definition q153.b equals q152.out
    definition q54.a equals q19.d
    definition q103.b equals output of Dicer with { --val: 1 }.out
    definition q120.a equals q88.d
    definition q91.c equals q90.e
    definition q13.b equals output of Dicer with { --val: 1 }.out
    definition q69.b equals output of Dicer with { --val: 1 }.out
    definition q19.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 9 }).val) }.out
    definition q3.c equals q2.e
    definition q32.a equals q24.d
    definition q21.c equals q20.e
    definition q1.c equals q0.e
    definition q18.b equals output of Dicer with { --val: 1 }.out
    definition q151.a equals q119.out
    definition q129.a equals q104.out
    definition q142.b equals q134.out
    definition q93.a equals q49.out
    definition q122.a equals q90.d
    definition q77.a equals q35.out
    definition q93.c equals q92.e
    definition q7.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 21 }).val) }.out
    definition q84.c equals q83.e
    definition q86.b equals output of Dicer with { --val: 1 }.out
    definition q2.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 8 }).val) }.out
    definition q30.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 19 }).val) }.out
    definition q47.a equals q14.d
    definition q36.a equals q9.d
    definition q22.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 6 }).val) }.out
    definition q101.b equals output of Dicer with { --val: 1 }.out
    definition q136.b equals q116.out
    definition q60.b equals output of Dicer with { --val: 0 }.out
    definition q25.c equals q24.e
    definition q107.b equals output of Dicer with { --val: 0 }.out
    definition q48.a equals q6.d
    definition q40.a equals q17.d
    definition q23.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 31 }).val) }.out
    definition q92.c equals q91.e
    definition q150.b equals q144.out
    definition q69.c equals q68.e
    definition q124.a equals q92.d
    definition q113.a equals q81.d
    definition q39.b equals output of Dicer with { --val: 1 }.out
    definition q0.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 16 }).val) }.out
    definition q1.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 25 }).val) }.out
    definition q54.b equals output of Dicer with { --val: 1 }.out
    definition q117.a equals q85.d
    definition q88.a equals q57.out
    definition q87.c equals q86.e
    definition q28.c equals q27.e
    definition q73.c equals q72.e
    definition q115.b equals output of Dicer with { --val: 0 }.out
    definition q138.a equals q115.out
    definition q4.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 26 }).val) }.out
    definition q14.c equals q13.e
    definition q86.a equals q63.out
    definition q121.a equals q89.d
    definition q11.c equals q10.e
    definition q6.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 15 }).val) }.out
    definition q131.b equals q113.out
    definition q149.b equals q118.out
    definition q151.b equals q125.out
    definition q44.b equals output of Dicer with { --val: 0 }.out
    definition q61.b equals output of Dicer with { --val: 1 }.out
    definition q72.b equals output of Dicer with { --val: 1 }.out
    definition q64.a equals q53.out
    definition q157.a equals q155.out
    definition q40.b equals output of Dicer with { --val: 0 }.out
    definition q128.b equals q126.out
    definition q46.a equals q30.d
    definition q122.b equals output of Dicer with { --val: 0 }.out
    definition q76.a equals q44.out
    definition q38.b equals output of Dicer with { --val: 1 }.out
    definition q139.a equals q120.out
    definition q130.a equals q111.out
    definition q125.b equals output of Dicer with { --val: 0 }.out
    definition q6.c equals q5.e
    definition q146.b equals q100.out
    definition q26.b equals output of Dicer with { --val: 0 }.out
    definition q143.b equals q135.out
    definition q15.c equals q14.e
    definition q80.b equals output of Dicer with { --val: 1 }.out
    definition q143.a equals q139.out
    definition q133.a equals q101.out
    definition q19.c equals q18.e
    definition q106.a equals q74.d
    definition q148.b equals q146.out
    definition q127.a equals q95.d
    definition q31.c equals q30.e
    definition q12.b equals output of Dicer with { --val: 0 }.out
    definition q34.a equals q18.d
    definition q65.a equals q33.out
    definition q108.b equals output of Dicer with { --val: 0 }.out
    definition q134.a equals q128.out
    definition q67.b equals output of Dicer with { --val: 0 }.out
    definition q80.a equals q37.out
    definition q111.a equals q79.d
    definition q136.a equals q114.out
    definition q70.a equals q48.out
    definition q149.a equals q133.out
    definition q84.b equals output of Dicer with { --val: 0 }.out
    definition q95.b equals output of Dicer with { --val: 0 }.out
    definition q147.a equals q140.out
    definition q3.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 14 }).val) }.out
    definition q63.b equals output of Dicer with { --val: 0 }.out
    definition q104.a equals q72.d
    definition q83.a equals q60.out
    definition q43.b equals output of Dicer with { --val: 0 }.out
    definition q2.c equals q1.e
    definition q138.b equals q105.out
    definition q30.c equals q29.e
    definition q109.a equals q77.d
    definition q24.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 17 }).val) }.out
    definition q107.a equals q75.d
    definition q79.b equals output of Dicer with { --val: 0 }.out
    definition q98.b equals output of Dicer with { --val: 1 }.out
    definition q50.b equals output of Dicer with { --val: 1 }.out
    definition q128.a equals q127.out
    definition q70.b equals output of Dicer with { --val: 0 }.out
    definition q100.a equals q68.d
    definition q53.a equals q12.d
    definition q131.a equals q102.out
    definition q117.b equals output of Dicer with { --val: 0 }.out
    definition q35.b equals output of Dicer with { --val: 0 }.out
    definition q71.c equals q70.e
    definition q16.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 12 }).val) }.out
    definition q22.c equals q21.e
    definition q0.c equals false
    definition q5.c equals q4.e
    definition q123.b equals output of Dicer with { --val: 0 }.out
    definition q41.b equals output of Dicer with { --val: 1 }.out
    definition q92.a equals q47.out
    definition q65.c equals q64.e
    definition q14.b equals output of Dicer with { --val: 1 }.out
    definition q108.a equals q76.d
    definition q57.a equals q8.d
    definition q65.b equals output of Dicer with { --val: 1 }.out
    definition q46.b equals output of Dicer with { --val: 0 }.out
    definition q66.c equals q65.e
    definition q156.b equals q99.out
    definition q144.b equals q131.out
    definition q78.a equals q54.out
    definition q91.b equals output of Dicer with { --val: 1 }.out
    definition q38.a equals q11.d
    definition q127.b equals output of Dicer with { --val: 0 }.out
    definition q20.c equals q19.e
    definition q14.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 3 }).val) }.out
    definition q16.c equals q15.e
    definition q135.b equals q107.out
    definition q102.b equals output of Dicer with { --val: 1 }.out
    definition q18.a equals output of Dicer with { --val: ((output of Dicer2 with { --flag: key --index: 24 }).val) }.out
    definition q81.b equals output of Dicer with { --val: 1 }.out
    definition q87.b equals output of Dicer with { --val: 1 }.out
    definition q41.a equals q7.d
    definition q8.c equals q7.e
    definition q69.a equals q43.out
    definition q98.a equals q66.d
    definition is_valid equals not q158.out

declaration scope DiceFlagTax:
    input flag content list of C
    output tax content money

    flag_length scope DiceFlagLengthChecker
    flag_format scope DiceFlagFormat
    key_check scope KeyCheck
    flag_tax scope FlagTax

scope DiceFlagTax:
    definition flag_length.flag equals flag
    definition flag_format.flag equals flag
    definition key_check.key equals flag
    definition flag_tax.flag equals flag

    label dice_tax
    definition tax equals flag_tax.tax

    exception dice_tax
    definition tax under condition 
    not flag_length.is_valid
    consequence equals $100,000,000

    exception dice_tax
    definition tax under condition
    not flag_format.is_valid
    consequence equals $100,000,000

    exception dice_tax
    definition tax under condition
    not key_check.is_valid
    consequence equals $100,000,000

declaration scope Main:
    flag_tax scope DiceFlagTax
    output tax content money

scope Main:
    definition flag_tax.flag equals flag
    definition tax equals flag_tax.tax
```
